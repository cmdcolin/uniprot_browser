{"version":3,"file":"drawPhased-BPe_GwF_.js","sources":["../../node_modules/@jbrowse/plugin-variants/esm/shared/constants.js","../../node_modules/@jbrowse/plugin-variants/esm/shared/drawAlleleCount.js","../../node_modules/@jbrowse/plugin-variants/esm/shared/drawPhased.js"],"sourcesContent":["export const fudgeFactor = 0.6;\nexport const f2 = fudgeFactor / 2;\n","import { colord } from '@jbrowse/core/util/colord';\nimport { f2 } from './constants';\nexport function getColorAlleleCount(ref, alt, alt2, uncalled, total, drawReference = true) {\n    if (ref === total) {\n        return drawReference ? '#ccc' : '';\n    }\n    else {\n        let a1;\n        if (alt) {\n            a1 = colord(`hsl(200,50%,${80 - (alt / total) * 50}%)`);\n        }\n        if (alt2) {\n            const l = `hsla(0,100%,20%,${alt2 / total})`;\n            a1 = a1 ? a1.mix(l) : colord(l);\n        }\n        if (uncalled) {\n            const l = `hsl(50,50%,50%,${uncalled / total})`;\n            a1 = a1 ? a1.mix(l) : colord(l);\n        }\n        return (a1 === null || a1 === void 0 ? void 0 : a1.toHex()) || 'black';\n    }\n}\nexport function drawColorAlleleCount(c, ctx, x, y, w, h, featureType = '', featureStrand, alpha = 1) {\n    ctx.fillStyle = alpha !== 1 ? colord(c).alpha(alpha).toHex() : c;\n    if (featureType === 'inversion') {\n        if (featureStrand === 1) {\n            ctx.beginPath();\n            ctx.moveTo(x - f2, y - f2);\n            ctx.lineTo(x - f2, y + h + f2);\n            ctx.lineTo(x + w + f2, y + h / 2);\n            ctx.closePath();\n            ctx.fill();\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(x + w + f2, y - f2);\n            ctx.lineTo(x + w + f2, y + h + f2);\n            ctx.lineTo(x - f2, y + h / 2);\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n    else {\n        ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n    }\n}\n","import { set1 } from '@jbrowse/core/ui/colors';\nimport { colord } from '@jbrowse/core/util/colord';\nimport { f2 } from './constants';\nimport { colorify } from './util';\nfunction getColorPhased(alleles, HP, drawReference = true) {\n    const c = +alleles[HP];\n    return c ? set1[c - 1] || 'black' : drawReference ? '#ccc' : undefined;\n}\nfunction getColorPhasedWithPhaseSet(alleles, HP, PS, drawReference = true) {\n    const c = +alleles[HP];\n    return c ? colorify(+PS) || 'black' : drawReference ? '#ccc' : undefined;\n}\nexport function drawPhased(alleles, ctx, x, y, w, h, HP, PS, drawReference = true, alpha = 1) {\n    const c = PS !== undefined\n        ? getColorPhasedWithPhaseSet(alleles, HP, PS, drawReference)\n        : getColorPhased(alleles, HP, drawReference);\n    if (c) {\n        ctx.fillStyle = alpha !== 1 ? colord(c).alpha(alpha).toHex() : c;\n        ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n    }\n    return c;\n}\n"],"names":["fudgeFactor","f2","getColorAlleleCount","ref","alt","alt2","uncalled","total","drawReference","a1","colord","l","drawColorAlleleCount","c","ctx","x","y","w","h","featureType","featureStrand","alpha","getColorPhased","alleles","HP","set1","getColorPhasedWithPhaseSet","PS","colorify","drawPhased"],"mappings":"wFAAO,MAAMA,EAAc,GACdC,EAAKD,EAAc,ECCzB,SAASE,EAAoBC,EAAKC,EAAKC,EAAMC,EAAUC,EAAOC,EAAgB,GAAM,CACvF,GAAIL,IAAQI,EACR,OAAOC,EAAgB,OAAS,GAE/B,CACD,IAAIC,EAIJ,GAHIL,IACAK,EAAKC,EAAAA,OAAO,eAAe,GAAMN,EAAMG,EAAS,EAAE,IAAI,GAEtDF,EAAM,CACN,MAAMM,EAAI,mBAAmBN,EAAOE,CAAK,IACzCE,EAAKA,EAAKA,EAAG,IAAIE,CAAC,EAAID,EAAAA,OAAOC,CAAC,CAClC,CACA,GAAIL,EAAU,CACV,MAAMK,EAAI,kBAAkBL,EAAWC,CAAK,IAC5CE,EAAKA,EAAKA,EAAG,IAAIE,CAAC,EAAID,EAAAA,OAAOC,CAAC,CAClC,CACA,OAAgDF,GAAG,MAAK,GAAO,OACnE,CACJ,CACO,SAASG,EAAqBC,EAAGC,EAAKC,EAAGC,EAAGC,EAAGC,EAAGC,EAAc,GAAIC,EAAeC,EAAQ,EAAG,CACjGP,EAAI,UAAYO,IAAU,EAAIX,EAAAA,OAAOG,CAAC,EAAE,MAAMQ,CAAK,EAAE,MAAK,EAAKR,EAC3DM,IAAgB,YACZC,IAAkB,GAClBN,EAAI,UAAS,EACbA,EAAI,OAAOC,EAAId,EAAIe,EAAIf,CAAE,EACzBa,EAAI,OAAOC,EAAId,EAAIe,EAAIE,EAAIjB,CAAE,EAC7Ba,EAAI,OAAOC,EAAIE,EAAIhB,EAAIe,EAAIE,EAAI,CAAC,EAChCJ,EAAI,UAAS,EACbA,EAAI,KAAI,IAGRA,EAAI,UAAS,EACbA,EAAI,OAAOC,EAAIE,EAAIhB,EAAIe,EAAIf,CAAE,EAC7Ba,EAAI,OAAOC,EAAIE,EAAIhB,EAAIe,EAAIE,EAAIjB,CAAE,EACjCa,EAAI,OAAOC,EAAId,EAAIe,EAAIE,EAAI,CAAC,EAC5BJ,EAAI,UAAS,EACbA,EAAI,KAAI,GAIZA,EAAI,SAASC,EAAId,EAAIe,EAAIf,EAAIgB,EAAIhB,EAAIiB,EAAIjB,CAAE,CAEnD,CCzCA,SAASqB,EAAeC,EAASC,EAAIhB,EAAgB,GAAM,CACvD,MAAMK,EAAI,CAACU,EAAQC,CAAE,EACrB,OAAOX,EAAIY,EAAAA,KAAKZ,EAAI,CAAC,GAAK,QAAUL,EAAgB,OAAS,MACjE,CACA,SAASkB,EAA2BH,EAASC,EAAIG,EAAInB,EAAgB,GAAM,CAEvE,MADU,CAACe,EAAQC,CAAE,EACVI,EAAS,CAACD,CAAE,GAAK,QAAUnB,EAAgB,OAAS,MACnE,CACO,SAASqB,EAAWN,EAAST,EAAKC,EAAGC,EAAGC,EAAGC,EAAGM,EAAIG,EAAInB,EAAgB,GAAMa,EAAQ,EAAG,CAC1F,MAAMR,EAAIc,IAAO,OACXD,EAA2BH,EAASC,EAAIG,EAAInB,CAAa,EACzDc,EAAeC,EAASC,EAAIhB,CAAa,EAC/C,OAAIK,IACAC,EAAI,UAAYO,IAAU,EAAIX,EAAAA,OAAOG,CAAC,EAAE,MAAMQ,CAAK,EAAE,MAAK,EAAKR,EAC/DC,EAAI,SAASC,EAAId,EAAIe,EAAIf,EAAIgB,EAAIhB,EAAIiB,EAAIjB,CAAE,GAExCY,CACX","x_google_ignoreList":[0,1,2]}