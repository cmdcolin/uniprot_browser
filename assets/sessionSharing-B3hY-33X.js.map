{"version":3,"mappings":";6FACA,SAASA,EAAYC,EAAQ,CACzB,OAAO,OACF,KAAK,CAAC,GAAG,OAAO,OAAO,gBAAgB,IAAI,WAAWA,EAAS,CAAC,CAAC,CAAC,EAClE,IAAIC,GAAK,OAAO,aAAaA,CAAC,CAAC,EAC/B,KAAK,EAAE,CAAC,EACR,WAAW,QAAS,EAAE,EACtB,MAAM,EAAGD,CAAM,CACxB,CACA,MAAME,EAAU,MAAOC,EAAMC,KACb,YAAM,OAAO,mBAAe,kEAC7B,QAAQD,EAAMC,CAAQ,EAAE,SAAQ,EAEzCC,EAAU,MAAOF,EAAMC,IAAa,CACtC,MAAME,EAAM,YAAM,OAAO,mBAAe,OAAAC,KAAA,qDAClCC,EAAO,MAAKC,EAAA,IAAC,OAAO,wBAAoB,OAAAF,KAAA,mDAE9C,OADcD,EAAI,QAAQH,EAAMC,CAAQ,EAC3B,SAASI,CAAI,CAC9B,EACA,SAASE,EAAYC,EAAK,CACtB,GAAI,CAEA,OADY,KAAK,MAAMA,CAAG,EACf,OACf,MACU,CACN,OAAOA,CACX,CACJ,CACO,eAAeC,EAAqBC,EAASC,EAAKC,EAAS,CAC9D,MAAMC,EAAO,MAAMC,EAAa,KAAK,UAAUJ,CAAO,CAAC,EACjDT,EAAWL,EAAY,CAAC,EACxBmB,EAAmB,MAAMhB,EAAQc,EAAMZ,CAAQ,EAC/Ce,EAAO,IAAI,SACjBA,EAAK,OAAO,UAAWD,CAAgB,EACvCC,EAAK,OAAO,aAAc,GAAG,KAAK,IAAG,CAAE,EAAE,EACzCA,EAAK,OAAO,UAAWJ,CAAO,EAC9B,MAAMK,EAAW,MAAM,MAAM,GAAGN,CAAG,QAAS,CACxC,OAAQ,OACR,KAAM,OACN,KAAMK,CACd,CAAK,EACD,GAAI,CAACC,EAAS,GAAI,CACd,MAAMT,EAAM,MAAMS,EAAS,KAAI,EAC/B,MAAM,IAAI,MAAMV,EAAYC,CAAG,CAAC,CACpC,CAEA,MAAO,CACH,KAFS,MAAMS,EAAS,KAAI,EAG5B,iBAAAF,EACA,SAAAd,CACR,CACA,CACO,eAAeiB,EAAsBC,EAASC,EAAmBnB,EAAU,CAC9E,MAAMoB,EAAYD,EAAkB,MAAM,QAAQ,EAAE,CAAC,EAC/CT,EAAM,GAAGQ,CAAO,cAAc,mBAAmBE,CAAS,CAAC,GAC3DJ,EAAW,MAAM,MAAMN,CAAG,EAChC,GAAI,CAACM,EAAS,GACV,MAAM,IAAI,MAAMV,EAAY,MAAMU,EAAS,KAAI,CAAE,CAAC,EAEtD,MAAMK,EAAO,MAAML,EAAS,KAAI,EAChC,OAAOf,EAAQoB,EAAK,QAASrB,CAAQ,CACzC","names":["generateUID","length","b","encrypt","text","password","decrypt","AES","n","Utf8","__vitePreload","getErrorMsg","err","shareSessionToDynamo","session","url","referer","sess","toUrlSafeB64","encryptedSession","data","response","readSessionFromDynamo","baseUrl","sessionQueryParam","sessionId","json"],"ignoreList":[0],"sources":["../../node_modules/@jbrowse/plugin-grid-bookmark/esm/GridBookmarkWidget/sessionSharing.js"],"sourcesContent":["import { toUrlSafeB64 } from './utils';\nfunction generateUID(length) {\n    return window\n        .btoa([...window.crypto.getRandomValues(new Uint8Array(length * 2))]\n        .map(b => String.fromCharCode(b))\n        .join(''))\n        .replaceAll(/[+/]/g, '')\n        .slice(0, length);\n}\nconst encrypt = async (text, password) => {\n    const AES = await import('crypto-js/aes');\n    return AES.encrypt(text, password).toString();\n};\nconst decrypt = async (text, password) => {\n    const AES = await import('crypto-js/aes');\n    const Utf8 = await import('crypto-js/enc-utf8');\n    const bytes = AES.decrypt(text, password);\n    return bytes.toString(Utf8);\n};\nfunction getErrorMsg(err) {\n    try {\n        const obj = JSON.parse(err);\n        return obj.message;\n    }\n    catch (e) {\n        return err;\n    }\n}\nexport async function shareSessionToDynamo(session, url, referer) {\n    const sess = await toUrlSafeB64(JSON.stringify(session));\n    const password = generateUID(5);\n    const encryptedSession = await encrypt(sess, password);\n    const data = new FormData();\n    data.append('session', encryptedSession);\n    data.append('dateShared', `${Date.now()}`);\n    data.append('referer', referer);\n    const response = await fetch(`${url}share`, {\n        method: 'POST',\n        mode: 'cors',\n        body: data,\n    });\n    if (!response.ok) {\n        const err = await response.text();\n        throw new Error(getErrorMsg(err));\n    }\n    const json = await response.json();\n    return {\n        json,\n        encryptedSession,\n        password,\n    };\n}\nexport async function readSessionFromDynamo(baseUrl, sessionQueryParam, password) {\n    const sessionId = sessionQueryParam.split('share-')[1];\n    const url = `${baseUrl}?sessionId=${encodeURIComponent(sessionId)}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(getErrorMsg(await response.text()));\n    }\n    const json = await response.json();\n    return decrypt(json.session, password);\n}\n"],"file":"assets/sessionSharing-B3hY-33X.js"}