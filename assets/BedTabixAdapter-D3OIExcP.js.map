{"version":3,"file":"BedTabixAdapter-D3OIExcP.js","sources":["../../node_modules/@jbrowse/plugin-bed/esm/BedTabixAdapter/BedTabixAdapter.js"],"sourcesContent":["import BED from '@gmod/bed';\nimport { TabixIndexedFile } from '@gmod/tabix';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature, updateStatus } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { featureData } from '../util';\nclass BedTabixAdapter extends BaseFeatureDataAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const bedGzLoc = this.getConf('bedGzLocation');\n        const type = this.getConf(['index', 'indexType']);\n        const loc = this.getConf(['index', 'location']);\n        const autoSql = this.getConf('autoSql');\n        const pm = this.pluginManager;\n        this.bed = new TabixIndexedFile({\n            filehandle: openLocation(bedGzLoc, pm),\n            csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n            tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n        });\n        this.columnNames = this.getConf('columnNames');\n        this.scoreColumn = this.getConf('scoreColumn');\n        this.parser = new BED({ autoSql });\n    }\n    async getRefNames(opts = {}) {\n        return this.bed.getReferenceSequenceNames(opts);\n    }\n    async getHeader(opts) {\n        return this.bed.getHeader(opts);\n    }\n    async getMetadataPre2(_opts) {\n        if (!this.setupP) {\n            this.setupP = this.getMetadataPre().catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async getMetadataPre() {\n        const meta = await this.bed.getMetadata();\n        return { meta };\n    }\n    async getMetadata(opts) {\n        const { statusCallback = () => { } } = opts || {};\n        return updateStatus('Downloading index', statusCallback, () => this.getMetadataPre2(opts));\n    }\n    async getNames() {\n        if (this.columnNames.length) {\n            return this.columnNames;\n        }\n        const header = await this.getHeader();\n        const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f);\n        const defline = defs.at(-1);\n        return (defline === null || defline === void 0 ? void 0 : defline.includes('\\t'))\n            ? defline\n                .slice(1)\n                .split('\\t')\n                .map(f => f.trim())\n            : undefined;\n    }\n    getFeatures(query, opts) {\n        const { stopToken, statusCallback = () => { } } = opts || {};\n        return ObservableCreate(async (observer) => {\n            const { meta } = await this.getMetadata();\n            const { columnNumbers } = meta;\n            const colRef = columnNumbers.ref - 1;\n            const colStart = columnNumbers.start - 1;\n            const colEnd = columnNumbers.end - 1;\n            const names = await this.getNames();\n            let start = performance.now();\n            checkStopToken(stopToken);\n            await updateStatus('Downloading features', statusCallback, () => this.bed.getLines(query.refName, query.start, query.end, {\n                lineCallback: (line, fileOffset) => {\n                    if (performance.now() - start > 200) {\n                        checkStopToken(stopToken);\n                        start = performance.now();\n                    }\n                    observer.next(new SimpleFeature(featureData({\n                        line,\n                        colRef,\n                        colStart,\n                        colEnd,\n                        scoreColumn: this.scoreColumn,\n                        parser: this.parser,\n                        uniqueId: `${this.id}-${fileOffset}`,\n                        names,\n                    })));\n                },\n                stopToken,\n            }));\n            observer.complete();\n        }, stopToken);\n    }\n}\nBedTabixAdapter.capabilities = ['getFeatures', 'getRefNames'];\nexport default BedTabixAdapter;\n"],"names":["BedTabixAdapter","BaseFeatureDataAdapter","config","getSubAdapter","pluginManager","bedGzLoc","type","loc","autoSql","pm","TabixIndexedFile","openLocation","BED","opts","_opts","e","statusCallback","updateStatus","defline","f","query","stopToken","ObservableCreate","observer","meta","columnNumbers","colRef","colStart","colEnd","names","start","checkStopToken","line","fileOffset","SimpleFeature","featureData"],"mappings":"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","x_google_ignoreList":[0]}