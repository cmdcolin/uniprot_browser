{"version":3,"mappings":";sDAEA,SAASA,EAAMC,EAAI,CAEf,MAAO,YADQ,OAAO,KAAS,IACHA,EAAK,MAAM,EAC3C,CACO,eAAeC,EAAUC,EAAMC,EAAMC,EAAI,CAE5C,MAAMC,EADOC,oBAAkBJ,CAAI,EAChB,cAAc,aAC3BK,EAASL,EAAK,OACpB,GAAIC,EAAK,gBAAiB,CACtB,MAAMK,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQH,EAAQ,EACvBG,EAAO,OAASD,EAAS,EACzB,MAAME,EAAMD,EAAO,WAAW,IAAI,EAClC,OAAKC,GAGLA,EAAI,MAAM,EAAG,CAAC,EACdL,EAAGF,EAAMO,EAAKJ,EAAOE,CAAM,EACnBG,MAAK,QAAS,CAAE,MAAOL,EAAO,OAAQE,EAAQ,UAAWC,EAAO,UAAU,WAAW,CAAC,CAAE,GAJ5F,MAKR,KACK,CACD,MAAMG,EAAM,MAAKC,EAAA,IAAC,OAAO,0BAAY,OAAAC,KAAA,6CAC/BJ,EAAM,IAAIE,EAAI,QAAQN,EAAOE,CAAM,EACzCH,EAAGF,EAAMO,EAAKJ,EAAOE,CAAM,EAC3B,MAAMO,EAASf,EAAMG,EAAK,EAAE,EAC5B,OAAQa,OAAMC,WAAW,CAAE,SAAU,CAACN,MAAK,OAAQ,CAAE,SAAUA,MAAK,WAAY,CAAE,GAAII,EAAQ,SAAUJ,MAAK,OAAQ,CAAE,EAAG,EAAG,EAAG,EAAG,MAAOL,EAAO,OAAQE,EAAQ,CAAC,CAAE,CAAC,CAAE,EAAGG,MAAK,IAAK,CAAE,wBAAyB,CAAE,OAAQD,EAAI,OAAM,EAAG,SAAS,EAAI,SAAU,QAAQK,CAAM,IAAK,CAAC,EAAG,CACxR,CACJ","names":["getId","id","renderSvg","self","opts","cb","width","getContainingView","height","canvas","ctx","_jsx","C2S","__vitePreload","n","clipid","_jsxs","_Fragment"],"ignoreList":[0],"sources":["../../node_modules/@jbrowse/plugin-alignments/esm/shared/renderSvgUtil.js"],"sourcesContent":["import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { getContainingView } from '@jbrowse/core/util';\nfunction getId(id) {\n    const isJest = typeof jest === 'undefined';\n    return `arc-clip-${isJest ? id : 'jest'}`;\n}\nexport async function renderSvg(self, opts, cb) {\n    const view = getContainingView(self);\n    const width = view.dynamicBlocks.totalWidthPx;\n    const height = self.height;\n    if (opts.rasterizeLayers) {\n        const canvas = document.createElement('canvas');\n        canvas.width = width * 2;\n        canvas.height = height * 2;\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            return;\n        }\n        ctx.scale(2, 2);\n        cb(self, ctx, width, height);\n        return (_jsx(\"image\", { width: width, height: height, xlinkHref: canvas.toDataURL('image/png') }));\n    }\n    else {\n        const C2S = await import('canvas2svg');\n        const ctx = new C2S.default(width, height);\n        cb(self, ctx, width, height);\n        const clipid = getId(self.id);\n        return (_jsxs(_Fragment, { children: [_jsx(\"defs\", { children: _jsx(\"clipPath\", { id: clipid, children: _jsx(\"rect\", { x: 0, y: 0, width: width, height: height }) }) }), _jsx(\"g\", { dangerouslySetInnerHTML: { __html: ctx.getSvg().innerHTML }, clipPath: `url(#${clipid})` })] }));\n    }\n}\n"],"file":"assets/renderSvgUtil-B0l5tRXv.js"}