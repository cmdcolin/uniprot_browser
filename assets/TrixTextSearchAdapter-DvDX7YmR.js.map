{"version":3,"file":"TrixTextSearchAdapter-DvDX7YmR.js","sources":["../../node_modules/@gmod/trix/esm/dedupe.js","../../node_modules/@gmod/trix/esm/util.js","../../node_modules/@gmod/trix/esm/index.js","../../node_modules/@jbrowse/plugin-trix/esm/TrixTextSearchAdapter/TrixTextSearchAdapter.js"],"sourcesContent":["// from https://github.com/seriousManual/dedupe/blob/master/LICENSE\nexport function dedupe(list, hasher = JSON.stringify) {\n    const clone = [];\n    const lookup = new Set();\n    for (const entry of list) {\n        const hashed = hasher(entry);\n        if (!lookup.has(hashed)) {\n            clone.push(entry);\n            lookup.add(hashed);\n        }\n    }\n    return clone;\n}\n//# sourceMappingURL=dedupe.js.map","export function sum(array) {\n    let sum = 0;\n    for (const entry of array) {\n        sum += entry.length;\n    }\n    return sum;\n}\nexport function concatUint8Array(args) {\n    const mergedArray = new Uint8Array(sum(args));\n    let offset = 0;\n    for (const entry of args) {\n        mergedArray.set(entry, offset);\n        offset += entry.length;\n    }\n    return mergedArray;\n}\n//# sourceMappingURL=util.js.map","import { dedupe } from './dedupe';\nimport { concatUint8Array } from './util';\nconst CHUNK_SIZE = 65536;\n// this is the number of hex characters to use for the address in ixixx, see\n// https://github.com/GMOD/ixixx-js/blob/master/src/index.ts#L182\nconst ADDRESS_SIZE = 10;\nexport default class Trix {\n    ixxFile;\n    ixFile;\n    maxResults;\n    constructor(ixxFile, ixFile, maxResults = 20) {\n        this.ixxFile = ixxFile;\n        this.ixFile = ixFile;\n        this.maxResults = maxResults;\n    }\n    async search(searchString, opts) {\n        let resultArr = [];\n        const searchWords = searchString.split(' ');\n        // we only search one word at a time\n        const searchWord = searchWords[0].toLowerCase();\n        const res = await this._getBuffer(searchWord, opts);\n        if (!res) {\n            return [];\n        }\n        let { end, buffer } = res;\n        let done = false;\n        const decoder = new TextDecoder('utf8');\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        while (!done) {\n            let foundSomething = false;\n            const str = decoder.decode(buffer);\n            // slice to lastIndexOf('\\n') to make sure we get complete records\n            // since the buffer fetch could get halfway into a record\n            const lines = str\n                .slice(0, str.lastIndexOf('\\n'))\n                .split('\\n')\n                .filter(f => !!f);\n            const hits2 = [];\n            for (const line of lines) {\n                const word = line.split(' ')[0];\n                const match = word.startsWith(searchWord);\n                if (!foundSomething && match) {\n                    foundSomething = true;\n                }\n                // we are done scanning if we are lexicographically greater than the\n                // search string\n                if (word.slice(0, searchWord.length) > searchWord) {\n                    done = true;\n                }\n                if (match) {\n                    hits2.push(line);\n                }\n            }\n            const hits = hits2.flatMap(line => {\n                const [term, ...parts] = line.split(' ');\n                return parts.map(elt => [term, elt.split(',')[0]]);\n            });\n            // if we are not done, and we haven't filled up maxResults with hits yet,\n            // then refetch\n            if (resultArr.length + hits.length < this.maxResults && !done) {\n                const res2 = await this.ixFile.read(CHUNK_SIZE, end, opts);\n                // early break if empty response\n                if (res2.length === 0) {\n                    resultArr = resultArr.concat(hits);\n                    break;\n                }\n                buffer = concatUint8Array([buffer, res2]);\n                end += CHUNK_SIZE;\n            }\n            // if we have filled up the hits, or we are detected to be done via the\n            // filtering, then return\n            else if (resultArr.length + hits.length >= this.maxResults || done) {\n                resultArr = resultArr.concat(hits);\n                break;\n            }\n        }\n        // de-duplicate results based on the detail column (resultArr[1])\n        return dedupe(resultArr, elt => elt[1]).slice(0, this.maxResults);\n    }\n    async getIndex(opts) {\n        const file = await this.ixxFile.readFile({\n            encoding: 'utf8',\n            ...opts,\n        });\n        return file\n            .split('\\n')\n            .filter(f => !!f)\n            .map(line => {\n            const p = line.length - ADDRESS_SIZE;\n            const prefix = line.slice(0, p);\n            const posStr = line.slice(p);\n            const pos = Number.parseInt(posStr, 16);\n            return [prefix, pos];\n        });\n    }\n    async _getBuffer(searchWord, opts) {\n        let start = 0;\n        let end = 65536;\n        const indexes = await this.getIndex(opts);\n        for (const [key, value] of indexes) {\n            const trimmedKey = key.slice(0, searchWord.length);\n            if (trimmedKey < searchWord) {\n                start = value;\n                end = value + 65536;\n            }\n        }\n        // Return the buffer and its end position in the file.\n        const len = end - start;\n        if (len < 0) {\n            return undefined;\n        }\n        const buffer = await this.ixFile.read(len, start, opts);\n        return {\n            buffer,\n            end,\n        };\n    }\n}\n//# sourceMappingURL=index.js.map","import Trix from '@gmod/trix';\nimport BaseResult from '@jbrowse/core/TextSearch/BaseResults';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { BaseAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nfunction decodeURIComponentNoThrow(uri) {\n    try {\n        return decodeURIComponent(uri);\n    }\n    catch (e) {\n        return uri;\n    }\n}\nfunction shorten(str, term, w = 15) {\n    const tidx = str.toLowerCase().indexOf(term);\n    return str.length < 40\n        ? str\n        : (Math.max(0, tidx - w) > 0 ? '...' : '') +\n            str.slice(Math.max(0, tidx - w), tidx + term.length + w).trim() +\n            (tidx + term.length < str.length ? '...' : '');\n}\nexport default class TrixTextSearchAdapter extends BaseAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const ixFilePath = readConfObject(config, 'ixFilePath');\n        const ixxFilePath = readConfObject(config, 'ixxFilePath');\n        if (!ixFilePath) {\n            throw new Error('must provide out.ix');\n        }\n        if (!ixxFilePath) {\n            throw new Error('must provide out.ixx');\n        }\n        this.trixJs = new Trix(openLocation(ixxFilePath, pluginManager), openLocation(ixFilePath, pluginManager), 1500);\n    }\n    async searchIndex(args) {\n        const query = args.queryString.toLowerCase();\n        const strs = query.split(' ');\n        const results = await this.trixJs.search(query);\n        const formatted = results\n            .filter(([, data]) => strs.every(r => decodeURIComponentNoThrow(data).toLowerCase().includes(r)))\n            .map(([term, data]) => {\n            const result = JSON.parse(data.replaceAll('|', ','));\n            const [loc, trackId, ...rest] = result.map(record => decodeURIComponentNoThrow(record));\n            const labelFieldIdx = rest.findIndex(elt => !!elt);\n            const contextIdx = rest\n                .map(elt => elt.toLowerCase())\n                .findIndex(f => f.includes(term.toLowerCase()));\n            const labelField = rest[labelFieldIdx];\n            const contextField = rest[contextIdx];\n            const context = contextIdx !== -1 ? shorten(contextField, term) : undefined;\n            const label = shorten(labelField, term);\n            const displayString = !context || label.toLowerCase() === context.toLowerCase()\n                ? label\n                : `${label} (${context})`;\n            return new BaseResult({\n                locString: loc,\n                label: labelField,\n                displayString,\n                matchedObject: result.map(record => decodeURIComponent(record)),\n                trackId,\n            });\n        });\n        return args.searchType === 'exact'\n            ? formatted.filter(r => r.getLabel().toLowerCase() === args.queryString.toLowerCase())\n            : formatted;\n    }\n}\n"],"names":["dedupe","list","hasher","clone","lookup","entry","hashed","sum","array","concatUint8Array","args","mergedArray","offset","CHUNK_SIZE","ADDRESS_SIZE","Trix","ixxFile","ixFile","maxResults","searchString","opts","resultArr","searchWord","res","end","buffer","done","decoder","str","lines","f","hits2","line","word","match","hits","term","parts","elt","res2","p","prefix","posStr","pos","start","indexes","key","value","len","decodeURIComponentNoThrow","uri","shorten","w","tidx","TrixTextSearchAdapter","BaseAdapter","config","getSubAdapter","pluginManager","ixFilePath","readConfObject","ixxFilePath","openLocation","query","strs","formatted","data","r","result","loc","trackId","rest","record","labelFieldIdx","contextIdx","labelField","contextField","context","label","displayString","BaseResult"],"mappings":"gGACO,SAASA,EAAOC,EAAMC,EAAS,KAAK,UAAW,CAClD,MAAMC,EAAQ,CAAA,EACRC,EAAS,IAAI,IACnB,UAAWC,KAASJ,EAAM,CACtB,MAAMK,EAASJ,EAAOG,CAAK,EACtBD,EAAO,IAAIE,CAAM,IAClBH,EAAM,KAAKE,CAAK,EAChBD,EAAO,IAAIE,CAAM,EAEzB,CACA,OAAOH,CACX,CCZO,SAASI,EAAIC,EAAO,CACvB,IAAID,EAAM,EACV,UAAWF,KAASG,EAChBD,GAAOF,EAAM,OAEjB,OAAOE,CACX,CACO,SAASE,EAAiBC,EAAM,CACnC,MAAMC,EAAc,IAAI,WAAWJ,EAAIG,CAAI,CAAC,EAC5C,IAAIE,EAAS,EACb,UAAWP,KAASK,EAChBC,EAAY,IAAIN,EAAOO,CAAM,EAC7BA,GAAUP,EAAM,OAEpB,OAAOM,CACX,CCbA,MAAME,EAAa,MAGbC,EAAe,GACN,MAAMC,CAAK,CACtB,QACA,OACA,WACA,YAAYC,EAASC,EAAQC,EAAa,GAAI,CAC1C,KAAK,QAAUF,EACf,KAAK,OAASC,EACd,KAAK,WAAaC,CACtB,CACA,MAAM,OAAOC,EAAcC,EAAM,CAC7B,IAAIC,EAAY,CAAA,EAGhB,MAAMC,EAFcH,EAAa,MAAM,GAAG,EAEX,CAAC,EAAE,YAAW,EACvCI,EAAM,MAAM,KAAK,WAAWD,EAAYF,CAAI,EAClD,GAAI,CAACG,EACD,MAAO,CAAA,EAEX,GAAI,CAAE,IAAAC,EAAK,OAAAC,CAAM,EAAKF,EAClBG,EAAO,GACX,MAAMC,EAAU,IAAI,YAAY,MAAM,EAEtC,KAAO,CAACD,GAAM,CAEV,MAAME,EAAMD,EAAQ,OAAOF,CAAM,EAG3BI,EAAQD,EACT,MAAM,EAAGA,EAAI,YAAY;AAAA,CAAI,CAAC,EAC9B,MAAM;AAAA,CAAI,EACV,OAAOE,GAAK,CAAC,CAACA,CAAC,EACdC,EAAQ,CAAA,EACd,UAAWC,KAAQH,EAAO,CACtB,MAAMI,EAAOD,EAAK,MAAM,GAAG,EAAE,CAAC,EACxBE,EAAQD,EAAK,WAAWX,CAAU,EAMpCW,EAAK,MAAM,EAAGX,EAAW,MAAM,EAAIA,IACnCI,EAAO,IAEPQ,GACAH,EAAM,KAAKC,CAAI,CAEvB,CACA,MAAMG,EAAOJ,EAAM,QAAQC,GAAQ,CAC/B,KAAM,CAACI,EAAM,GAAGC,CAAK,EAAIL,EAAK,MAAM,GAAG,EACvC,OAAOK,EAAM,IAAIC,GAAO,CAACF,EAAME,EAAI,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CACrD,CAAC,EAGD,GAAIjB,EAAU,OAASc,EAAK,OAAS,KAAK,YAAc,CAACT,EAAM,CAC3D,MAAMa,EAAO,MAAM,KAAK,OAAO,KAAK1B,EAAYW,EAAKJ,CAAI,EAEzD,GAAImB,EAAK,SAAW,EAAG,CACnBlB,EAAYA,EAAU,OAAOc,CAAI,EACjC,KACJ,CACAV,EAAShB,EAAiB,CAACgB,EAAQc,CAAI,CAAC,EACxCf,GAAOX,CACX,SAGSQ,EAAU,OAASc,EAAK,QAAU,KAAK,YAAcT,EAAM,CAChEL,EAAYA,EAAU,OAAOc,CAAI,EACjC,KACJ,CACJ,CAEA,OAAOnC,EAAOqB,EAAWiB,GAAOA,EAAI,CAAC,CAAC,EAAE,MAAM,EAAG,KAAK,UAAU,CACpE,CACA,MAAM,SAASlB,EAAM,CAKjB,OAJa,MAAM,KAAK,QAAQ,SAAS,CACrC,SAAU,OACV,GAAGA,CACf,CAAS,GAEI,MAAM;AAAA,CAAI,EACV,OAAOU,GAAK,CAAC,CAACA,CAAC,EACf,IAAIE,GAAQ,CACb,MAAMQ,EAAIR,EAAK,OAASlB,EAClB2B,EAAST,EAAK,MAAM,EAAGQ,CAAC,EACxBE,EAASV,EAAK,MAAMQ,CAAC,EACrBG,EAAM,OAAO,SAASD,EAAQ,EAAE,EACtC,MAAO,CAACD,EAAQE,CAAG,CACvB,CAAC,CACL,CACA,MAAM,WAAWrB,EAAYF,EAAM,CAC/B,IAAIwB,EAAQ,EACRpB,EAAM,MACV,MAAMqB,EAAU,MAAM,KAAK,SAASzB,CAAI,EACxC,SAAW,CAAC0B,EAAKC,CAAK,IAAKF,EACJC,EAAI,MAAM,EAAGxB,EAAW,MAAM,EAChCA,IACbsB,EAAQG,EACRvB,EAAMuB,EAAQ,OAItB,MAAMC,EAAMxB,EAAMoB,EAClB,OAAII,EAAM,EACN,OAGG,CACH,OAFW,MAAM,KAAK,OAAO,KAAKA,EAAKJ,EAAOxB,CAAI,EAGlD,IAAAI,CACZ,CACI,CACJ,CChHA,SAASyB,EAA0BC,EAAK,CACpC,GAAI,CACA,OAAO,mBAAmBA,CAAG,CACjC,MACU,CACN,OAAOA,CACX,CACJ,CACA,SAASC,EAAQvB,EAAKQ,EAAMgB,EAAI,GAAI,CAChC,MAAMC,EAAOzB,EAAI,YAAW,EAAG,QAAQQ,CAAI,EAC3C,OAAOR,EAAI,OAAS,GACdA,GACC,KAAK,IAAI,EAAGyB,EAAOD,CAAC,EAAI,EAAI,MAAQ,IACnCxB,EAAI,MAAM,KAAK,IAAI,EAAGyB,EAAOD,CAAC,EAAGC,EAAOjB,EAAK,OAASgB,CAAC,EAAE,KAAI,GAC5DC,EAAOjB,EAAK,OAASR,EAAI,OAAS,MAAQ,GACvD,CACe,MAAM0B,UAA8BC,EAAAA,WAAY,CAC3D,YAAYC,EAAQC,EAAeC,EAAe,CAC9C,MAAMF,EAAQC,EAAeC,CAAa,EAC1C,MAAMC,EAAaC,EAAAA,eAAeJ,EAAQ,YAAY,EAChDK,EAAcD,EAAAA,eAAeJ,EAAQ,aAAa,EACxD,GAAI,CAACG,EACD,MAAM,IAAI,MAAM,qBAAqB,EAEzC,GAAI,CAACE,EACD,MAAM,IAAI,MAAM,sBAAsB,EAE1C,KAAK,OAAS,IAAI9C,EAAK+C,EAAAA,aAAaD,EAAaH,CAAa,EAAGI,eAAaH,EAAYD,CAAa,EAAG,IAAI,CAClH,CACA,MAAM,YAAYhD,EAAM,CACpB,MAAMqD,EAAQrD,EAAK,YAAY,YAAW,EACpCsD,EAAOD,EAAM,MAAM,GAAG,EAEtBE,GADU,MAAM,KAAK,OAAO,OAAOF,CAAK,GAEzC,OAAO,CAAC,CAAA,CAAGG,CAAI,IAAMF,EAAK,MAAMG,GAAKlB,EAA0BiB,CAAI,EAAE,YAAW,EAAG,SAASC,CAAC,CAAC,CAAC,EAC/F,IAAI,CAAC,CAAC/B,EAAM8B,CAAI,IAAM,CACvB,MAAME,EAAS,KAAK,MAAMF,EAAK,WAAW,IAAK,GAAG,CAAC,EAC7C,CAACG,EAAKC,EAAS,GAAGC,CAAI,EAAIH,EAAO,IAAII,GAAUvB,EAA0BuB,CAAM,CAAC,EAChFC,EAAgBF,EAAK,UAAUjC,GAAO,CAAC,CAACA,CAAG,EAC3CoC,EAAaH,EACd,IAAIjC,GAAOA,EAAI,YAAW,CAAE,EAC5B,UAAU,GAAK,EAAE,SAASF,EAAK,YAAW,CAAE,CAAC,EAC5CuC,EAAaJ,EAAKE,CAAa,EAC/BG,EAAeL,EAAKG,CAAU,EAC9BG,EAAUH,IAAe,GAAKvB,EAAQyB,EAAcxC,CAAI,EAAI,OAC5D0C,EAAQ3B,EAAQwB,EAAYvC,CAAI,EAChC2C,EAAgB,CAACF,GAAWC,EAAM,YAAW,IAAOD,EAAQ,YAAW,EACvEC,EACA,GAAGA,CAAK,KAAKD,CAAO,IAC1B,OAAO,IAAIG,EAAW,CAClB,UAAWX,EACX,MAAOM,EACP,cAAAI,EACA,cAAeX,EAAO,IAAII,GAAU,mBAAmBA,CAAM,CAAC,EAC9D,QAAAF,CAChB,CAAa,CACL,CAAC,EACD,OAAO5D,EAAK,aAAe,QACrBuD,EAAU,OAAO,GAAK,EAAE,WAAW,gBAAkBvD,EAAK,YAAY,YAAW,CAAE,EACnFuD,CACV,CACJ","x_google_ignoreList":[0,1,2,3]}