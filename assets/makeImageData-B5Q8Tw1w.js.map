{"version":3,"file":"makeImageData-B5Q8Tw1w.js","sources":["../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/colorBy.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/getAlignmentShapeColor.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderAlignmentShape.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/util.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderModifications.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderPerBaseLettering.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderPerBaseQuality.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderMethylation.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderAlignment.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderMismatches.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderSoftClipping.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/makeImageData.js"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration';\nimport { fillColor } from '../shared/color';\nimport { orientationTypes } from '../util';\nexport function colorByInsertSize(feature) {\n    return feature.get('is_paired') &&\n        feature.get('refName') !== feature.get('next_ref')\n        ? '#555'\n        : `hsl(${Math.abs(feature.get('template_length')) / 10},50%,50%)`;\n}\nexport function colorByMappingQuality(feature) {\n    return `hsl(${feature.get('score')},50%,50%)`;\n}\nfunction getOrientation(feature, config) {\n    const orientationType = readConfObject(config, 'orientationType');\n    const type = orientationTypes[orientationType];\n    const orientation = type[feature.get('pair_orientation')];\n    return {\n        LR: 'color_pair_lr',\n        RR: 'color_pair_rr',\n        RL: 'color_pair_rl',\n        LL: 'color_pair_ll',\n    }[orientation];\n}\nexport function colorByStrand(feature) {\n    return feature.get('strand') === -1 ? '#8F8FD8' : '#EC8B8B';\n}\nexport function colorByOrientation(feature, config) {\n    return fillColor[getOrientation(feature, config) || 'color_nostrand'];\n}\nfunction getStranded(feature) {\n    const flags = feature.get('flags');\n    const strand = feature.get('strand');\n    if (flags & 1) {\n        const flipper = flags & 64 ? -1 : 1;\n        if (flags & 2) {\n            return strand * flipper === 1 ? 'color_rev_strand' : 'color_fwd_strand';\n        }\n        if (flags & 8) {\n            return strand * flipper === 1\n                ? 'color_rev_missing_mate'\n                : 'color_fwd_missing_mate';\n        }\n        if (feature.get('refName') === feature.get('next_ref')) {\n            return strand * flipper === 1\n                ? 'color_rev_strand_not_proper'\n                : 'color_fwd_strand_not_proper';\n        }\n        return strand === 1 ? 'color_fwd_diff_chr' : 'color_rev_diff_chr';\n    }\n    return 'color_unknown';\n}\nexport function colorByStrandedRnaSeq(feature) {\n    return fillColor[getStranded(feature)];\n}\n","import { readConfObject } from '@jbrowse/core/configuration';\nimport { colorByInsertSize, colorByMappingQuality, colorByOrientation, colorByStrand, colorByStrandedRnaSeq, } from './colorBy';\nimport { fillColor } from '../shared/color';\nexport function getAlignmentShapeColor({ colorType, tag, feature, config, defaultColor, colorTagMap, }) {\n    switch (colorType) {\n        case 'insertSize':\n            return colorByInsertSize(feature);\n        case 'strand':\n            return colorByStrand(feature);\n        case 'mappingQuality':\n            return colorByMappingQuality(feature);\n        case 'pairOrientation':\n            return colorByOrientation(feature, config);\n        case 'stranded':\n            return colorByStrandedRnaSeq(feature);\n        case 'xs':\n        case 'tag': {\n            const tags = feature.get('tags');\n            const val = tags ? tags[tag] : feature.get(tag);\n            if (tag === 'XS' || tag === 'TS') {\n                if (val === '-') {\n                    return fillColor.color_rev_strand;\n                }\n                else if (val === '+') {\n                    return fillColor.color_fwd_strand;\n                }\n                else {\n                    return fillColor.color_nostrand;\n                }\n            }\n            if (tag === 'ts') {\n                if (val === '-') {\n                    return feature.get('strand') === -1\n                        ? fillColor.color_fwd_strand\n                        : fillColor.color_rev_strand;\n                }\n                else if (val === '+') {\n                    return feature.get('strand') === -1\n                        ? fillColor.color_rev_strand\n                        : fillColor.color_fwd_strand;\n                }\n                else {\n                    return fillColor.color_nostrand;\n                }\n            }\n            return colorTagMap[val] || fillColor.color_nostrand;\n        }\n        case 'insertSizeAndPairOrientation':\n            break;\n        case 'modifications':\n        case 'methylation':\n            return feature.get('flags') & 16 ? '#c8dcc8' : '#c8c8c8';\n        default:\n            return defaultColor\n                ? 'lightgrey'\n                : readConfObject(config, 'color', { feature });\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { parseCigar } from '../MismatchParser';\nexport function renderAlignmentShape({ ctx, feat, renderArgs, }) {\n    const { regions, bpPerPx } = renderArgs;\n    const { heightPx, topPx, feature } = feat;\n    const region = regions[0];\n    const s = feature.get('start');\n    const e = feature.get('end');\n    const CIGAR = feature.get('CIGAR');\n    const flip = region.reversed ? -1 : 1;\n    const strand = feature.get('strand') * flip;\n    const renderChevrons = bpPerPx < 10 && heightPx > 5;\n    if (CIGAR === null || CIGAR === void 0 ? void 0 : CIGAR.includes('N')) {\n        const cigarOps = parseCigar(CIGAR);\n        if (strand === 1) {\n            let drawLen = 0;\n            let drawStart = s;\n            for (let i = 0; i < cigarOps.length; i += 2) {\n                const opLen = +cigarOps[i];\n                const op = cigarOps[i + 1];\n                if (op === 'M' || op === 'X' || op === '=' || op === 'D') {\n                    drawLen += opLen;\n                }\n                else if (op === 'N') {\n                    if (drawStart !== drawLen) {\n                        const [leftPx, rightPx] = bpSpanPx(drawStart, drawStart + drawLen, region, bpPerPx);\n                        const w = rightPx - leftPx;\n                        ctx.fillRect(leftPx, topPx, w, heightPx);\n                    }\n                    drawStart += drawLen + opLen;\n                    drawLen = 0;\n                }\n            }\n            if (drawStart !== drawLen) {\n                const [leftPx, rightPx] = bpSpanPx(drawStart, drawStart + drawLen, region, bpPerPx);\n                const w = rightPx - leftPx;\n                if (renderChevrons) {\n                    ctx.beginPath();\n                    ctx.moveTo(leftPx, topPx);\n                    ctx.lineTo(leftPx, topPx + heightPx);\n                    ctx.lineTo(rightPx, topPx + heightPx);\n                    ctx.lineTo(rightPx + 5, topPx + heightPx / 2);\n                    ctx.lineTo(rightPx, topPx);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    ctx.fillRect(leftPx, topPx, w, heightPx);\n                }\n            }\n        }\n        else if (strand === -1) {\n            let drawLen = 0;\n            let drawStart = e;\n            for (let i = cigarOps.length - 2; i >= 0; i -= 2) {\n                const opLen = +cigarOps[i];\n                const op = cigarOps[i + 1];\n                if (op === 'M' || op === 'X' || op === '=' || op === 'D') {\n                    drawLen += opLen;\n                }\n                else if (op === 'N') {\n                    if (drawLen !== 0) {\n                        const [leftPx, rightPx] = bpSpanPx(drawStart - drawLen, drawStart, region, bpPerPx);\n                        ctx.fillRect(leftPx, topPx, rightPx - leftPx, heightPx);\n                    }\n                    drawStart -= drawLen + opLen;\n                    drawLen = 0;\n                }\n            }\n            if (drawLen !== 0) {\n                const [leftPx, rightPx] = bpSpanPx(drawStart - drawLen, drawStart, region, bpPerPx);\n                const w = rightPx - leftPx;\n                if (renderChevrons) {\n                    ctx.beginPath();\n                    ctx.moveTo(leftPx - 5, topPx + heightPx / 2);\n                    ctx.lineTo(leftPx, topPx + heightPx);\n                    ctx.lineTo(rightPx, topPx + heightPx);\n                    ctx.lineTo(rightPx, topPx);\n                    ctx.lineTo(leftPx, topPx);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    ctx.fillRect(leftPx, topPx, w, heightPx);\n                }\n            }\n        }\n    }\n    else {\n        const [leftPx, rightPx] = bpSpanPx(s, e, region, bpPerPx);\n        if (bpPerPx < 10 && heightPx > 5) {\n            if (strand === -1) {\n                ctx.beginPath();\n                ctx.moveTo(leftPx - 5, topPx + heightPx / 2);\n                ctx.lineTo(leftPx, topPx + heightPx);\n                ctx.lineTo(rightPx, topPx + heightPx);\n                ctx.lineTo(rightPx, topPx);\n                ctx.lineTo(leftPx, topPx);\n                ctx.closePath();\n                ctx.fill();\n            }\n            else {\n                ctx.beginPath();\n                ctx.moveTo(leftPx, topPx);\n                ctx.lineTo(leftPx, topPx + heightPx);\n                ctx.lineTo(rightPx, topPx + heightPx);\n                ctx.lineTo(rightPx + 5, topPx + heightPx / 2);\n                ctx.lineTo(rightPx, topPx);\n                ctx.closePath();\n                ctx.fill();\n            }\n        }\n        else {\n            ctx.fillRect(leftPx, topPx, rightPx - leftPx, heightPx);\n        }\n    }\n}\n","import { measureText } from '@jbrowse/core/util';\nexport function fillRect(ctx, l, t, w, h, cw, color) {\n    if (l + w < 0 || l > cw) {\n        return;\n    }\n    if (color) {\n        ctx.fillStyle = color;\n    }\n    ctx.fillRect(l, t, w, h);\n}\nexport function getColorBaseMap(theme) {\n    const { skip, deletion, insertion, hardclip, softclip, bases } = theme.palette;\n    return {\n        A: bases.A.main,\n        C: bases.C.main,\n        G: bases.G.main,\n        T: bases.T.main,\n        deletion,\n        insertion,\n        hardclip,\n        softclip,\n        skip,\n    };\n}\nexport function getContrastBaseMap(theme) {\n    return Object.fromEntries(Object.entries(getColorBaseMap(theme)).map(([key, value]) => [\n        key,\n        theme.palette.getContrastText(value),\n    ]));\n}\nexport function shouldDrawSNPsMuted(type) {\n    return ['methylation', 'modifications'].includes(type || '');\n}\nexport function shouldDrawIndels() {\n    return true;\n}\nexport function getCharWidthHeight() {\n    const charWidth = measureText('A');\n    const charHeight = measureText('M') - 2;\n    return { charWidth, charHeight };\n}\n","import { bpSpanPx, max, sum } from '@jbrowse/core/util';\nimport { fillRect } from './util';\nimport { getMaxProbModAtEachPosition } from '../shared/getMaximumModificationAtEachPosition';\nimport { alphaColor } from '../shared/util';\nexport function renderModifications({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, cigarOps, }) {\n    var _a, _b, _c;\n    const { feature, topPx, heightPx } = feat;\n    const { colorBy, visibleModifications = {} } = renderArgs;\n    const seq = feature.get('seq');\n    if (!seq) {\n        return;\n    }\n    const start = feature.get('start');\n    const isolatedModification = (_a = colorBy === null || colorBy === void 0 ? void 0 : colorBy.modifications) === null || _a === void 0 ? void 0 : _a.isolatedModification;\n    const twoColor = (_b = colorBy === null || colorBy === void 0 ? void 0 : colorBy.modifications) === null || _b === void 0 ? void 0 : _b.twoColor;\n    (_c = getMaxProbModAtEachPosition(feature, cigarOps)) === null || _c === void 0 ? void 0 : _c.forEach(({ allProbs, prob, type }, pos) => {\n        const r = start + pos;\n        const [leftPx, rightPx] = bpSpanPx(r, r + 1, region, bpPerPx);\n        const mod = visibleModifications[type];\n        if (!mod) {\n            console.warn(`${type} not known yet`);\n            return;\n        }\n        if (isolatedModification && mod.type !== isolatedModification) {\n            return;\n        }\n        const col = mod.color || 'black';\n        const s = 1 - sum(allProbs);\n        if (twoColor && s > max(allProbs)) {\n            const c = alphaColor('blue', s);\n            const w = rightPx - leftPx + 0.5;\n            fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n        }\n        else {\n            const c = alphaColor(col, prob);\n            const w = rightPx - leftPx + 0.5;\n            fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n        }\n        pos++;\n    });\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { fillRect } from './util';\nexport function renderPerBaseLettering({ ctx, feat, region, bpPerPx, colorMap, colorContrastMap, charWidth, charHeight, canvasWidth, cigarOps, }) {\n    const heightLim = charHeight - 2;\n    const { feature, topPx, heightPx } = feat;\n    const seq = feature.get('seq');\n    const w = 1 / bpPerPx;\n    const start = feature.get('start');\n    let soffset = 0;\n    let roffset = 0;\n    if (!seq) {\n        return;\n    }\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const len = +cigarOps[i];\n        const op = cigarOps[i + 1];\n        if (op === 'S' || op === 'I') {\n            soffset += len;\n        }\n        else if (op === 'D' || op === 'N') {\n            roffset += len;\n        }\n        else if (op === 'M' || op === 'X' || op === '=') {\n            for (let m = 0; m < len; m++) {\n                const letter = seq[soffset + m];\n                const r = start + roffset + m;\n                const [leftPx] = bpSpanPx(r, r + 1, region, bpPerPx);\n                const c = colorMap[letter];\n                fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c);\n                if (w >= charWidth && heightPx >= heightLim) {\n                    ctx.fillStyle = colorContrastMap[letter];\n                    ctx.fillText(letter, leftPx + (w - charWidth) / 2 + 1, topPx + heightPx);\n                }\n            }\n            soffset += len;\n            roffset += len;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { fillRect } from './util';\nexport function renderPerBaseQuality({ ctx, feat, region, bpPerPx, canvasWidth, cigarOps, }) {\n    const { feature, topPx, heightPx } = feat;\n    const qual = feature.get('qual') || '';\n    const scores = qual.split(' ').map(val => +val);\n    const w = 1 / bpPerPx;\n    const start = feature.get('start');\n    let soffset = 0;\n    let roffset = 0;\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const len = +cigarOps[i];\n        const op = cigarOps[i + 1];\n        if (op === 'S' || op === 'I') {\n            soffset += len;\n        }\n        else if (op === 'D' || op === 'N') {\n            roffset += len;\n        }\n        else if (op === 'M' || op === 'X' || op === '=') {\n            for (let m = 0; m < len; m++) {\n                const score = scores[soffset + m];\n                const start0 = start + roffset + m;\n                const leftPx = bpSpanPx(start0, start0 + 1, region, bpPerPx)[0];\n                const c = `hsl(${score === 255 ? 150 : score * 1.5},55%,50%)`;\n                fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c);\n            }\n            soffset += len;\n            roffset += len;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { colord } from '@jbrowse/core/util/colord';\nimport { fillRect } from './util';\nimport { getMethBins } from '../ModificationParser/getMethBins';\nexport function renderMethylation({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, cigarOps, }) {\n    const { regionSequence } = renderArgs;\n    const { feature, topPx, heightPx } = feat;\n    if (!regionSequence) {\n        throw new Error('region sequence required for methylation');\n    }\n    const seq = feature.get('seq');\n    if (!seq) {\n        return;\n    }\n    const fstart = feature.get('start');\n    const fend = feature.get('end');\n    const { methBins, methProbs, hydroxyMethBins, hydroxyMethProbs } = getMethBins(feature, cigarOps);\n    function getCol(k) {\n        if (methBins[k]) {\n            const p = methProbs[k] || 0;\n            return (p > 0.5\n                ? colord('red').alpha((p - 0.5) * 2)\n                : colord('blue').alpha(1 - p * 2)).toHslString();\n        }\n        if (hydroxyMethBins[k]) {\n            const p = hydroxyMethProbs[k] || 0;\n            return (p > 0.5\n                ? colord('pink').alpha((p - 0.5) * 2)\n                : colord('purple').alpha(1 - p * 2)).toHslString();\n        }\n        return undefined;\n    }\n    const r = regionSequence.toLowerCase();\n    for (let i = 0; i < fend - fstart; i++) {\n        const j = i + fstart;\n        const l1 = r[j - region.start + 1];\n        const l2 = r[j - region.start + 2];\n        if (l1 === 'c' && l2 === 'g') {\n            if (bpPerPx > 2) {\n                const [leftPx, rightPx] = bpSpanPx(j, j + 2, region, bpPerPx);\n                const w = rightPx - leftPx + 0.5;\n                const c = getCol(i) || getCol(i + 1) || 'blue';\n                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n            }\n            else {\n                const [leftPx, rightPx] = bpSpanPx(j, j + 1, region, bpPerPx);\n                const w = rightPx - leftPx + 0.5;\n                const c = getCol(i) || 'blue';\n                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n                const [leftPx2, rightPx2] = bpSpanPx(j + 1, j + 2, region, bpPerPx);\n                const w2 = rightPx2 - leftPx2 + 0.5;\n                const c2 = getCol(i + 1) || 'blue';\n                fillRect(ctx, leftPx2, topPx, w2, heightPx, canvasWidth, c2);\n            }\n        }\n    }\n}\n","import { getAlignmentShapeColor } from './getAlignmentShapeColor';\nimport { renderAlignmentShape } from './renderAlignmentShape';\nimport { renderModifications } from './renderModifications';\nimport { renderPerBaseLettering } from './renderPerBaseLettering';\nimport { renderPerBaseQuality } from './renderPerBaseQuality';\nimport { parseCigar } from '../MismatchParser';\nimport { renderMethylation } from './renderMethylation';\nexport function renderAlignment({ ctx, feat, renderArgs, colorMap, colorContrastMap, charWidth, charHeight, defaultColor, canvasWidth, }) {\n    const { config, bpPerPx, regions, colorBy, colorTagMap = {} } = renderArgs;\n    const { tag = '', type: colorType = '' } = colorBy || {};\n    const { feature } = feat;\n    const region = regions[0];\n    ctx.fillStyle = getAlignmentShapeColor({\n        feature,\n        config,\n        tag,\n        defaultColor,\n        colorType,\n        colorTagMap,\n    });\n    renderAlignmentShape({ ctx, feat, renderArgs });\n    switch (colorType) {\n        case 'perBaseQuality': {\n            const cigarOps = parseCigar(feature.get('CIGAR'));\n            renderPerBaseQuality({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                canvasWidth,\n                cigarOps,\n            });\n            break;\n        }\n        case 'perBaseLettering': {\n            const cigarOps = parseCigar(feature.get('CIGAR'));\n            renderPerBaseLettering({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                colorMap,\n                colorContrastMap,\n                charWidth,\n                charHeight,\n                canvasWidth,\n                cigarOps,\n            });\n            break;\n        }\n        case 'modifications': {\n            const cigarOps = parseCigar(feature.get('CIGAR'));\n            renderModifications({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                renderArgs,\n                canvasWidth,\n                cigarOps,\n            });\n            break;\n        }\n        case 'methylation': {\n            const cigarOps = parseCigar(feature.get('CIGAR'));\n            renderMethylation({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                renderArgs,\n                canvasWidth,\n                cigarOps,\n            });\n            break;\n        }\n    }\n}\n","import { bpSpanPx, measureText } from '@jbrowse/core/util';\nimport { colord } from '@jbrowse/core/util/colord';\nimport { fillRect } from './util';\nexport function renderMismatches({ ctx, feat, renderArgs, minSubfeatureWidth, largeInsertionIndicatorScale, mismatchAlpha, charWidth, charHeight, colorMap, colorContrastMap, hideSmallIndels, canvasWidth, drawSNPsMuted, drawIndels = true, }) {\n    const { bpPerPx, regions } = renderArgs;\n    const { heightPx, topPx, feature } = feat;\n    const region = regions[0];\n    const start = feature.get('start');\n    const pxPerBp = Math.min(1 / bpPerPx, 2);\n    const mismatches = feature.get('mismatches');\n    const heightLim = charHeight - 2;\n    const extraHorizontallyFlippedOffset = region.reversed ? 1 / bpPerPx + 1 : -1;\n    if (!mismatches) {\n        return;\n    }\n    for (const mismatch of mismatches) {\n        const mstart = start + mismatch.start;\n        const mlen = mismatch.length;\n        const mbase = mismatch.base;\n        const [leftPx, rightPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx);\n        const widthPx = Math.max(minSubfeatureWidth, rightPx - leftPx);\n        if (mismatch.type === 'mismatch') {\n            if (!drawSNPsMuted) {\n                const baseColor = colorMap[mismatch.base] || '#888';\n                const c = mismatchAlpha && mismatch.qual !== undefined\n                    ? colord(baseColor)\n                        .alpha(Math.min(1, mismatch.qual / 50))\n                        .toHslString()\n                    : baseColor;\n                fillRect(ctx, Math.round(leftPx), topPx, widthPx, heightPx, canvasWidth, c);\n            }\n            if (widthPx >= charWidth && heightPx >= heightLim) {\n                const contrastColor = drawSNPsMuted\n                    ? 'black'\n                    : colorContrastMap[mismatch.base] || 'black';\n                ctx.fillStyle =\n                    mismatchAlpha && mismatch.qual !== undefined\n                        ? colord(contrastColor)\n                            .alpha(Math.min(1, mismatch.qual / 50))\n                            .toHslString()\n                        : contrastColor;\n                ctx.fillText(mbase, leftPx + (widthPx - charWidth) / 2 + 1, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'deletion' && drawIndels) {\n            const len = mismatch.length;\n            if (!hideSmallIndels || len >= 10) {\n                fillRect(ctx, leftPx, topPx, Math.abs(leftPx - rightPx), heightPx, canvasWidth, colorMap.deletion);\n                const txt = `${mismatch.length}`;\n                const rwidth = measureText(txt, 10);\n                if (widthPx >= rwidth && heightPx >= heightLim) {\n                    ctx.fillStyle = colorContrastMap.deletion;\n                    ctx.fillText(txt, (leftPx + rightPx) / 2 - rwidth / 2, topPx + heightPx);\n                }\n            }\n        }\n        else if (mismatch.type === 'insertion' && drawIndels) {\n            const pos = leftPx + extraHorizontallyFlippedOffset;\n            const len = +mismatch.base || mismatch.length;\n            const insW = Math.max(0, Math.min(1.2, 1 / bpPerPx));\n            if (len < 10) {\n                if (!hideSmallIndels) {\n                    fillRect(ctx, pos, topPx, insW, heightPx, canvasWidth, colorMap.insertion);\n                    if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n                        const l = Math.round(pos - insW);\n                        fillRect(ctx, l, topPx, insW * 3, 1, canvasWidth);\n                        fillRect(ctx, l, topPx + heightPx - 1, insW * 3, 1, canvasWidth);\n                        ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx);\n                    }\n                }\n            }\n        }\n        else if (mismatch.type === 'hardclip' || mismatch.type === 'softclip') {\n            const pos = leftPx + extraHorizontallyFlippedOffset;\n            const c = colorMap[mismatch.type];\n            const clipW = Math.max(minSubfeatureWidth, pxPerBp);\n            fillRect(ctx, pos, topPx, clipW, heightPx, canvasWidth, c);\n            if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n                const l = pos - clipW;\n                fillRect(ctx, l, topPx, clipW * 3, 1, canvasWidth);\n                fillRect(ctx, l, topPx + heightPx - 1, clipW * 3, 1, canvasWidth);\n                ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'skip') {\n            if (leftPx + widthPx > 0) {\n                const adjustPx = widthPx - (bpPerPx > 10 ? 1.5 : 0);\n                const l = Math.max(0, leftPx);\n                const t = topPx + heightPx / 2 - 1;\n                const w = adjustPx + Math.min(leftPx, 0);\n                const h = 1;\n                fillRect(ctx, l, t, w, h, canvasWidth, colorMap.skip);\n            }\n        }\n    }\n    if (drawIndels) {\n        for (const mismatch of mismatches) {\n            const mstart = start + mismatch.start;\n            const mlen = mismatch.length;\n            const len = +mismatch.base || mismatch.length;\n            if (mismatch.type === 'insertion' && len >= 10) {\n                const [leftPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx);\n                const txt = `${len}`;\n                if (bpPerPx > largeInsertionIndicatorScale) {\n                    fillRect(ctx, leftPx - 1, topPx, 2, heightPx, canvasWidth, colorMap.insertion);\n                }\n                else if (heightPx > charHeight) {\n                    const rwidth = measureText(txt);\n                    const padding = 5;\n                    fillRect(ctx, leftPx - rwidth / 2 - padding, topPx, rwidth + 2 * padding, heightPx, canvasWidth, 'purple');\n                    ctx.fillStyle = colorContrastMap.insertion;\n                    ctx.fillText(txt, leftPx - rwidth / 2, topPx + heightPx);\n                }\n                else {\n                    const padding = 2;\n                    fillRect(ctx, leftPx - padding, topPx, 2 * padding, heightPx, canvasWidth, colorMap.insertion);\n                }\n            }\n        }\n    }\n}\n","import { readConfObject } from '@jbrowse/core/configuration';\nimport { bpSpanPx } from '@jbrowse/core/util';\nimport { fillRect, getCharWidthHeight } from './util';\nimport { parseCigar } from '../MismatchParser';\nexport function renderSoftClipping({ ctx, feat, renderArgs, config, theme, colorMap, canvasWidth, }) {\n    const { feature, topPx, heightPx } = feat;\n    const { regions, bpPerPx } = renderArgs;\n    const region = regions[0];\n    const minFeatWidth = readConfObject(config, 'minSubfeatureWidth');\n    const mismatches = feature.get('mismatches');\n    const seq = feature.get('seq');\n    const { charWidth, charHeight } = getCharWidthHeight();\n    if (!(seq && mismatches)) {\n        return;\n    }\n    const heightLim = charHeight - 2;\n    let seqOffset = 0;\n    let refOffset = 0;\n    const CIGAR = feature.get('CIGAR');\n    const cigarOps = parseCigar(CIGAR);\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const op = cigarOps[i + 1];\n        const len = +cigarOps[i];\n        if (op === 'S') {\n            for (let k = 0; k < len; k++) {\n                const base = seq[seqOffset + k];\n                const s0 = feature.get('start') - (i === 0 ? len : 0) + refOffset + k;\n                const [leftPx, rightPx] = bpSpanPx(s0, s0 + 1, region, bpPerPx);\n                const widthPx = Math.max(minFeatWidth, rightPx - leftPx);\n                const baseColor = colorMap[base] || '#000000';\n                ctx.fillStyle = baseColor;\n                fillRect(ctx, leftPx, topPx, widthPx, heightPx, canvasWidth);\n                if (widthPx >= charWidth && heightPx >= heightLim) {\n                    ctx.fillStyle = theme.palette.getContrastText(baseColor);\n                    ctx.fillText(base, leftPx + (widthPx - charWidth) / 2 + 1, topPx + heightPx);\n                }\n            }\n            seqOffset += len;\n        }\n        if (op === 'N') {\n            refOffset += len;\n        }\n        if (op === 'M' || op === '=' || op === 'X') {\n            refOffset += len;\n            seqOffset += len;\n        }\n        if (op === 'H') {\n        }\n        if (op === 'D') {\n            refOffset += len;\n        }\n        if (op === 'I') {\n            seqOffset += len;\n        }\n    }\n}\n","import { readConfObject } from '@jbrowse/core/configuration';\nimport { createJBrowseTheme } from '@jbrowse/core/ui';\nimport { forEachWithStopTokenCheck } from '@jbrowse/core/util';\nimport { renderAlignment } from './renderAlignment';\nimport { renderMismatches } from './renderMismatches';\nimport { renderSoftClipping } from './renderSoftClipping';\nimport { getCharWidthHeight, getColorBaseMap, getContrastBaseMap, shouldDrawIndels, shouldDrawSNPsMuted, } from './util';\nexport function makeImageData({ ctx, layoutRecords, canvasWidth, renderArgs, }) {\n    const { stopToken, config, showSoftClip, colorBy, theme: configTheme, } = renderArgs;\n    const mismatchAlpha = readConfObject(config, 'mismatchAlpha');\n    const minSubfeatureWidth = readConfObject(config, 'minSubfeatureWidth');\n    const largeInsertionIndicatorScale = readConfObject(config, 'largeInsertionIndicatorScale');\n    const hideSmallIndels = readConfObject(config, 'hideSmallIndels');\n    const defaultColor = readConfObject(config, 'color') === '#f0f';\n    const theme = createJBrowseTheme(configTheme);\n    const colorMap = getColorBaseMap(theme);\n    const colorContrastMap = getContrastBaseMap(theme);\n    ctx.font = 'bold 10px Courier New,monospace';\n    const { charWidth, charHeight } = getCharWidthHeight();\n    const drawSNPsMuted = shouldDrawSNPsMuted(colorBy === null || colorBy === void 0 ? void 0 : colorBy.type);\n    const drawIndels = shouldDrawIndels();\n    forEachWithStopTokenCheck(layoutRecords, stopToken, feat => {\n        renderAlignment({\n            ctx,\n            feat,\n            renderArgs,\n            defaultColor,\n            colorMap,\n            colorContrastMap,\n            charWidth,\n            charHeight,\n            canvasWidth,\n        });\n        renderMismatches({\n            ctx,\n            feat,\n            renderArgs,\n            hideSmallIndels,\n            mismatchAlpha,\n            drawSNPsMuted,\n            drawIndels,\n            largeInsertionIndicatorScale,\n            minSubfeatureWidth,\n            charWidth,\n            charHeight,\n            colorMap,\n            colorContrastMap,\n            canvasWidth,\n        });\n        if (showSoftClip) {\n            renderSoftClipping({\n                ctx,\n                feat,\n                renderArgs,\n                colorMap,\n                config,\n                theme,\n                canvasWidth,\n            });\n        }\n    });\n    return undefined;\n}\n"],"names":["colorByInsertSize","feature","colorByMappingQuality","getOrientation","config","orientationType","readConfObject","orientation","orientationTypes","colorByStrand","colorByOrientation","fillColor","getStranded","flags","strand","flipper","colorByStrandedRnaSeq","getAlignmentShapeColor","colorType","tag","defaultColor","colorTagMap","tags","val","renderAlignmentShape","ctx","feat","renderArgs","regions","bpPerPx","heightPx","topPx","region","s","e","CIGAR","flip","renderChevrons","cigarOps","parseCigar","drawLen","drawStart","opLen","op","leftPx","rightPx","bpSpanPx","w","fillRect","l","t","h","cw","color","getColorBaseMap","theme","skip","deletion","insertion","hardclip","softclip","bases","getContrastBaseMap","key","value","shouldDrawSNPsMuted","type","shouldDrawIndels","getCharWidthHeight","charWidth","measureText","charHeight","renderModifications","canvasWidth","_a","_b","_c","colorBy","visibleModifications","start","isolatedModification","twoColor","getMaxProbModAtEachPosition","allProbs","prob","pos","r","mod","col","sum","max","c","alphaColor","renderPerBaseLettering","colorMap","colorContrastMap","heightLim","seq","soffset","roffset","i","len","m","letter","renderPerBaseQuality","scores","score","start0","renderMethylation","regionSequence","fstart","fend","methBins","methProbs","hydroxyMethBins","hydroxyMethProbs","getMethBins","getCol","k","p","colord","j","l1","l2","leftPx2","rightPx2","w2","c2","renderAlignment","renderMismatches","minSubfeatureWidth","largeInsertionIndicatorScale","mismatchAlpha","hideSmallIndels","drawSNPsMuted","drawIndels","pxPerBp","mismatches","extraHorizontallyFlippedOffset","mismatch","mstart","mlen","mbase","widthPx","baseColor","contrastColor","txt","rwidth","insW","clipW","adjustPx","padding","renderSoftClipping","minFeatWidth","seqOffset","refOffset","base","s0","makeImageData","layoutRecords","stopToken","showSoftClip","configTheme","createJBrowseTheme","forEachWithStopTokenCheck"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}