import{Z as j,u as p,aI as N,aJ as W}from"./index-DPMJgfAS.js";import{d as Z,f as u,g as z,a as K}from"./drawPhased-BPe_GwF_.js";import"./util-Cozj6Xfd.js";async function _(d,P){const{scrollTop:D,minorAlleleFrequencyFilter:R,sources:x,rowHeight:g,features:q,regions:v,bpPerPx:H,renderingMode:J,stopToken:h,lengthCutoffFilter:O,referenceDrawingMode:C}=P,B=v[0],{statusCallback:S=()=>{}}=P;j.checkStopToken(h);const T=await p.updateStatus("Calculating stats",S,()=>N({stopToken:h,features:q.values(),minorAlleleFrequencyFilter:R,lengthCutoffFilter:O}));j.checkStopToken(h);const k=new W;return await p.updateStatus("Drawing variants",S,()=>{p.forEachWithStopTokenCheck(T,h,({mostFrequentAlt:e,feature:n})=>{const[w,G]=p.featureSpanPx(n,B,H),L=n.get("end")-n.get("start"),c=Math.max(Math.round(G-w),2),F=n.get("genotypes");let s=-D;const b=x.length;if(J==="phased")for(let a=0;a<b;a++){const{name:l,HP:f}=x[a],t=F[l],o=Math.floor(w),i=Math.max(g,1);if(t)if(t.includes("|")){const m=t.split("|");Z(m,d,o,s,c,i,f,void 0,C==="draw")&&k.insert({minX:o,maxX:o+c,minY:s,maxY:s+i,genotype:t,name:l,featureId:n.id()})}else d.fillStyle="black",d.fillRect(o-u,s-u,c+u,i+u);s+=g}else{const a={};for(let l=0;l<b;l++){const{name:f}=x[l],t=F[f],o=Math.floor(w),i=Math.max(g,1);if(t){let r=a[t];if(r===void 0){let m=0,A=0,E=0,I=0;const X=t.split(/[/|]/),Y=X.length;for(let y=0;y<Y;y++){const M=X[y];M===e?m++:M==="0"?I++:M==="."?A++:E++}r=z(I,m,E,A,Y,C==="draw"),a[t]=r}r&&(K(r,d,o,s,c,i,n.get("type"),n.get("strand"),L>5?.75:1),k.insert({minX:o,maxX:o+c,minY:s,maxY:s+i,genotype:t,name:f,featureId:n.id()}))}s+=g}}})}),{rbush:k.toJSON(),featureGenotypeMap:Object.fromEntries(T.map(({feature:e})=>[e.id(),{alt:e.get("ALT"),ref:e.get("REF"),name:e.get("name"),description:e.get("description"),length:e.get("end")-e.get("start")}]))}}export{_ as makeImageData};
//# sourceMappingURL=makeImageData-BHBJR4kO.js.map
