import"./remoteFile-DJNFoLH1.js";import{u as T}from"./unzip-OY3UkAtn.js";import{B as A,a as I,p as k,c as y,b as x}from"./BamAdapter-J9PAy6uI.js";import"./index-B3kPj2Rj.js";import"./index-BzItsYpE.js";import"./crc32-BNi2TJ31.js";import"./browser-DdKr-yeI.js";import"./index-CWy9Wmpn.js";import"./QuickLRU-C4m-IIJL.js";import"./rxjs-bJg6jVuh.js";async function p(u,t){const a=await Promise.all(u.map(async e=>{const{url:r,headers:i}=e;if(r.startsWith("data:")){const n=await fetch(r);if(!n.ok)throw new Error("failed to decode base64");const o=await n.arrayBuffer();return new Uint8Array(o)}else{const{referer:n,...o}=i,s=await fetch(r,{...t,headers:{...t?.headers,...o}});if(!s.ok)throw new Error(`HTTP ${s.status} fetching ${r}: ${await s.text()}`);return new Uint8Array(await s.arrayBuffer())}}));return y(await Promise.all(a.map(e=>T(e))))}class B extends A{constructor(t){super({htsget:!0}),this.baseUrl=t.baseUrl,this.trackId=t.trackId}async*streamRecordsForRange(t,a,e,r){const n=`${`${this.baseUrl}/${this.trackId}`}?referenceName=${t}&start=${a}&end=${e}&format=BAM`,o=this.chrToIndex?.[t];if(o===void 0)yield[];else{const s=await fetch(n,{...r});if(!s.ok)throw new Error(`HTTP ${s.status} fetching ${n}: ${await s.text()}`);const h=await s.json(),c=await p(h.htsget.urls.slice(1),r);yield*this._fetchChunkFeatures([{buffer:c,_fetchedSize:void 0,bin:0,compareTo(){return 0},toUniqueString(){return`${t}_${a}_${e}`},fetchedSize(){return 0},minv:{dataPosition:0,blockPosition:0,compareTo:()=>0},maxv:{dataPosition:Number.MAX_SAFE_INTEGER,blockPosition:0,compareTo:()=>0},toString(){return`${t}_${a}_${e}`}}],o,a,e,r)}}async _readChunk({chunk:t}){if(!t.buffer)throw new Error("expected chunk.buffer in htsget");return{data:t.buffer,cpositions:[],dpositions:[],chunk:t}}async getHeader(t={}){const a=`${this.baseUrl}/${this.trackId}?referenceName=na&class=header`,e=await fetch(a,t);if(!e.ok)throw new Error(`HTTP ${e.status} fetching ${a}: ${await e.text()}`);const r=await e.json(),i=await p(r.htsget.urls,t),n=new DataView(i.buffer);if(n.getInt32(0,!0)!==I)throw new Error("Not a BAM file");const o=n.getInt32(4,!0),h=new TextDecoder("utf8").decode(i.subarray(8,8+o)),c=k(h),w=[],g={},b=c.filter(d=>d.tag==="SQ");for(const[d,$]of b.entries()){let l="",m=0;for(const f of $.data)f.tag==="SN"?l=f.value:f.tag==="LN"&&(m=+f.value);g[l]=d,w[d]={refName:l,length:m}}return this.chrToIndex=g,this.indexToChr=w,c}}class M extends x{async configurePre(){const t=this.getConf("htsgetBase"),a=this.getConf("htsgetTrackId"),e=new B({baseUrl:t,trackId:a}),r=this.getConf("sequenceAdapter");if(r&&this.getSubAdapter){const i=await this.getSubAdapter(r);return{bam:e,sequenceAdapter:i.dataAdapter}}return{bam:e}}}export{M as default};
//# sourceMappingURL=HtsgetBamAdapter-rztRsuNu.js.map
