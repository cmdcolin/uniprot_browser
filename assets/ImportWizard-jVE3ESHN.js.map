{"version":3,"file":"ImportWizard-jVE3ESHN.js","sources":["../../node_modules/@jbrowse/plugin-spreadsheet-view/esm/SpreadsheetView/components/TrackSelector.js","../../node_modules/@jbrowse/plugin-spreadsheet-view/esm/SpreadsheetView/components/ImportWizard.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { coarseStripHTML } from '@jbrowse/core/util';\nimport { MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst TrackSelector = observer(function ({ model, selectedAssembly, }) {\n    var _a;\n    const filteredTracks = selectedAssembly\n        ? model.tracksForAssembly(selectedAssembly)\n        : undefined;\n    const resetTrack = ((_a = filteredTracks === null || filteredTracks === void 0 ? void 0 : filteredTracks[0]) === null || _a === void 0 ? void 0 : _a.track.trackId) || '';\n    const [selectedTrack, setSelectedTrack] = useState(resetTrack);\n    useEffect(() => {\n        const entry = filteredTracks === null || filteredTracks === void 0 ? void 0 : filteredTracks.find(f => selectedTrack === f.track.trackId);\n        if (entry) {\n            model.setFileSource(entry.loc);\n            model.setFileType(entry.type);\n        }\n    }, [model, selectedTrack, filteredTracks]);\n    return (_jsx(\"div\", { children: (filteredTracks === null || filteredTracks === void 0 ? void 0 : filteredTracks.length) ? (_jsx(TextField, { select: true, label: \"Tracks\", variant: \"outlined\", value: selectedTrack, onChange: event => {\n                setSelectedTrack(event.target.value);\n            }, children: filteredTracks.map(({ track, label }) => (_jsx(MenuItem, { value: track.trackId, children: coarseStripHTML(label) }, track.trackId))) })) : (_jsx(ErrorMessage, { error: `No tracks found for ${selectedAssembly}` })) }));\n});\nexport default TrackSelector;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { AssemblySelector, ErrorMessage, FileSelector, LoadingEllipses, } from '@jbrowse/core/ui';\nimport { getSession } from '@jbrowse/core/util';\nimport { Button, FormControl, FormControlLabel, FormGroup, FormLabel, Paper, Radio, RadioGroup, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getRoot } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nimport TrackSelector from './TrackSelector';\nconst useStyles = makeStyles()({\n    container: {\n        margin: '0 auto',\n        maxWidth: '40em',\n        padding: 20,\n    },\n});\nconst ImportWizard = observer(function ({ model, }) {\n    var _a;\n    const session = getSession(model);\n    const { classes } = useStyles();\n    const { assemblyNames, assemblyManager } = session;\n    const { loading, fileType, fileSource, isReadyToOpen, fileTypes, error } = model;\n    const [selectedAssembly, setSelectedAssembly] = useState(assemblyNames[0]);\n    const [selectorType, setSelectorType] = useState('custom');\n    const err = ((_a = assemblyManager.get(selectedAssembly)) === null || _a === void 0 ? void 0 : _a.error) || error;\n    const rootModel = getRoot(model);\n    return (_jsxs(\"div\", { children: [err ? _jsx(ErrorMessage, { error: err }) : null, _jsxs(Paper, { className: classes.container, children: [loading ? _jsx(LoadingEllipses, { variant: \"h6\" }) : null, _jsx(\"div\", { children: _jsx(FormControl, { component: \"fieldset\", children: _jsx(RadioGroup, { row: true, \"aria-label\": \"file type\", name: \"type\", value: fileType, onChange: event => {\n                                    setSelectorType(event.target.value);\n                                }, children: Object.entries({\n                                    custom: 'Open file from URL or local computer',\n                                    existing: 'Open from track',\n                                }).map(([key, val]) => (_jsx(FormControlLabel, { checked: selectorType === key, value: key, control: _jsx(Radio, {}), label: val }, key))) }) }) }), selectorType === 'custom' ? (_jsx(\"div\", { children: _jsx(FormControl, { component: \"fieldset\", children: _jsx(FormGroup, { children: _jsx(FileSelector, { inline: true, location: fileSource, rootModel: rootModel, setLocation: arg => {\n                                        model.setFileSource(arg);\n                                    } }) }) }) })) : selectedAssembly ? (_jsx(TrackSelector, { model: model, selectedAssembly: selectedAssembly })) : (_jsx(\"div\", { children: \"Select assembly\" })), _jsx(\"div\", { children: _jsxs(FormControl, { component: \"fieldset\", children: [_jsx(FormLabel, { component: \"legend\", children: \"File Type\" }), _jsx(RadioGroup, { row: true, \"aria-label\": \"file type\", name: \"type\", value: fileType, onChange: event => {\n                                        model.setFileType(event.target.value);\n                                    }, children: fileTypes.map(fileTypeName => (_jsx(FormControlLabel, { checked: fileType === fileTypeName, value: fileTypeName, control: _jsx(Radio, {}), label: fileTypeName }, fileTypeName))) })] }) }), _jsx(\"div\", { children: _jsx(AssemblySelector, { session: session, selected: selectedAssembly, onChange: val => {\n                                setSelectedAssembly(val);\n                            } }) }), _jsx(\"div\", { children: _jsx(Button, { disabled: !isReadyToOpen || !!err, variant: \"contained\", \"data-testid\": \"open_spreadsheet\", color: \"primary\", onClick: () => {\n                                model.import(selectedAssembly);\n                            }, children: \"Open\" }) })] })] }));\n});\nexport default ImportWizard;\n"],"names":["TrackSelector","observer","model","selectedAssembly","_a","filteredTracks","resetTrack","selectedTrack","setSelectedTrack","useState","useEffect","entry","f","_jsx","TextField","event","track","label","MenuItem","coarseStripHTML","ErrorMessage","useStyles","makeStyles","ImportWizard","session","getSession","classes","assemblyNames","assemblyManager","loading","fileType","fileSource","isReadyToOpen","fileTypes","error","setSelectedAssembly","selectorType","setSelectorType","err","rootModel","getRoot","_jsxs","Paper","LoadingEllipses","FormControl","RadioGroup","key","val","FormControlLabel","Radio","FormGroup","FileSelector","arg","FormLabel","fileTypeName","AssemblySelector","Button"],"mappings":"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","x_google_ignoreList":[0,1]}