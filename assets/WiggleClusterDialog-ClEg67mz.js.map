{"version":3,"file":"WiggleClusterDialog-ClEg67mz.js","sources":["../../node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/WiggleClusterDialog/WiggleClusterDialogAuto.js","../../node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/WiggleClusterDialog/WiggleClusterDialogManual.js","../../node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/WiggleClusterDialog/WiggleClusterDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { getContainingView, getSession, isAbortException, useLocalStorage, } from '@jbrowse/core/util';\nimport { createStopToken, stopStopToken } from '@jbrowse/core/util/stopToken';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { Button, DialogActions, DialogContent, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { isAlive } from 'mobx-state-tree';\nconst WiggleClusterDialogAuto = observer(function ({ model, children, handleClose, }) {\n    const [progress, setProgress] = useState('');\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(false);\n    const [stopToken, setStopToken] = useState('');\n    const [showAdvanced, setShowAdvanced] = useState(false);\n    const [samplesPerPixel, setSamplesPerPixel] = useLocalStorage('cluster-samplesPerPixel', '1');\n    return (_jsxs(_Fragment, { children: [_jsxs(DialogContent, { children: [children, _jsxs(\"div\", { style: { marginTop: 50 }, children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                                    setShowAdvanced(!showAdvanced);\n                                }, children: showAdvanced ? 'Hide advanced options' : 'Show advanced options' }), showAdvanced ? (_jsxs(\"div\", { style: { marginTop: 20 }, children: [_jsx(Typography, { children: \"This procedure samples the data at each 'pixel' across the visible by default\" }), _jsx(TextField, { label: \"Samples per pixel (>1 for denser sampling, between 0-1 for sparser sampling)\", variant: \"outlined\", size: \"small\", value: samplesPerPixel, onChange: event => {\n                                            setSamplesPerPixel(event.target.value);\n                                        } })] })) : null] }), _jsxs(\"div\", { children: [loading ? (_jsxs(\"div\", { style: { padding: 50 }, children: [_jsx(\"span\", { children: progress || 'Loading...' }), _jsx(Button, { onClick: () => {\n                                            stopStopToken(stopToken);\n                                        }, children: \"Stop\" })] })) : null, error ? _jsx(ErrorMessage, { error: error }) : null] })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", disabled: loading, onClick: async () => {\n                            try {\n                                setError(undefined);\n                                setProgress('Initializing');\n                                setLoading(true);\n                                const view = getContainingView(model);\n                                if (!view.initialized) {\n                                    return;\n                                }\n                                const { rpcManager } = getSession(model);\n                                const { sourcesWithoutLayout, adapterConfig } = model;\n                                if (sourcesWithoutLayout) {\n                                    const sessionId = getRpcSessionId(model);\n                                    const stopToken = createStopToken();\n                                    setStopToken(stopToken);\n                                    const ret = (await rpcManager.call(sessionId, 'MultiWiggleClusterScoreMatrix', {\n                                        regions: view.dynamicBlocks.contentBlocks,\n                                        sources: sourcesWithoutLayout,\n                                        sessionId,\n                                        adapterConfig,\n                                        stopToken,\n                                        bpPerPx: view.bpPerPx / +samplesPerPixel,\n                                        statusCallback: (arg) => {\n                                            setProgress(arg);\n                                        },\n                                    }));\n                                    model.setLayout(ret.order.map(idx => {\n                                        const ret = sourcesWithoutLayout[idx];\n                                        if (!ret) {\n                                            throw new Error(`out of bounds at ${idx}`);\n                                        }\n                                        return ret;\n                                    }));\n                                }\n                                handleClose();\n                            }\n                            catch (e) {\n                                if (!isAbortException(e) && isAlive(model)) {\n                                    console.error(e);\n                                    setError(e);\n                                }\n                            }\n                            finally {\n                                setLoading(false);\n                                setProgress('');\n                                setStopToken('');\n                            }\n                        }, children: \"Run clustering\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                            if (stopToken) {\n                                stopStopToken(stopToken);\n                            }\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default WiggleClusterDialogAuto;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getContainingView, getSession, isAbortException, useLocalStorage, } from '@jbrowse/core/util';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { Button, DialogActions, DialogContent, FormControlLabel, Radio, RadioGroup, TextField, Typography, } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { saveAs } from 'file-saver';\nimport { observer } from 'mobx-react';\nimport { isAlive } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n    mgap: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing(4),\n    },\n}));\nconst WiggleClusterDialogManuals = observer(function ({ model, handleClose, children, }) {\n    const { classes } = useStyles();\n    const [paste, setPaste] = useState('');\n    const [ret, setRet] = useState();\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(false);\n    const [showAdvanced, setShowAdvanced] = useLocalStorage('cluster-showAdvanced', false);\n    const [clusterMethod, setClusterMethod] = useState('single');\n    const [samplesPerPixel, setSamplesPerPixel] = useState('1');\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                setError(undefined);\n                setRet(undefined);\n                setLoading(true);\n                const view = getContainingView(model);\n                const { dynamicBlocks, bpPerPx } = view;\n                const { rpcManager } = getSession(model);\n                const { sourcesWithoutLayout, adapterConfig } = model;\n                const sessionId = getRpcSessionId(model);\n                const ret = (await rpcManager.call(sessionId, 'MultiWiggleGetScoreMatrix', {\n                    regions: dynamicBlocks.contentBlocks,\n                    sources: sourcesWithoutLayout,\n                    sessionId,\n                    adapterConfig,\n                    bpPerPx: bpPerPx / +samplesPerPixel,\n                }));\n                setRet(ret);\n            }\n            catch (e) {\n                if (!isAbortException(e) && isAlive(model)) {\n                    console.error(e);\n                    setError(e);\n                }\n            }\n            finally {\n                setLoading(false);\n            }\n        })();\n    }, [model, samplesPerPixel]);\n    const results = ret\n        ? `inputMatrix<-matrix(c(${Object.values(ret)\n            .map(val => val.join(','))\n            .join(',\\n')}\n),nrow=${Object.values(ret).length},byrow=TRUE)\nrownames(inputMatrix)<-c(${Object.keys(ret)\n            .map(key => `'${key}'`)\n            .join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='${clusterMethod}')\ncat(resultClusters$order,sep='\\\\n')`\n        : undefined;\n    const resultsTsv = ret\n        ? Object.entries(ret)\n            .map(([key, val]) => [key, ...val].join('\\t'))\n            .join('\\n')\n        : undefined;\n    return (_jsxs(_Fragment, { children: [_jsxs(DialogContent, { children: [children, _jsxs(\"div\", { style: { marginTop: 50 }, children: [_jsxs(\"div\", { children: [_jsxs(\"div\", { style: {\n                                            display: 'flex',\n                                            gap: '8px',\n                                            flexWrap: 'wrap',\n                                            marginBottom: '16px',\n                                        }, children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                                                    saveAs(new Blob([results || ''], {\n                                                        type: 'text/plain;charset=utf-8',\n                                                    }), 'cluster.R');\n                                                }, children: \"Download Rscript\" }), ' ', \"or\", ' ', _jsx(Button, { variant: \"contained\", onClick: () => {\n                                                    copy(results || '');\n                                                }, children: \"Copy Rscript to clipboard\" }), ' ', \"or\", ' ', _jsx(Button, { variant: \"contained\", onClick: () => {\n                                                    saveAs(new Blob([resultsTsv || ''], {\n                                                        type: 'text/plain;charset=utf-8',\n                                                    }), 'scores.tsv');\n                                                }, children: \"Download TSV\" })] }), _jsx(\"div\", { children: _jsx(Button, { variant: \"contained\", onClick: () => {\n                                                setShowAdvanced(!showAdvanced);\n                                            }, children: showAdvanced\n                                                ? 'Hide advanced options'\n                                                : 'Show advanced options' }) }), showAdvanced ? (_jsxs(\"div\", { children: [_jsx(Typography, { variant: \"h6\", children: \"Advanced options\" }), _jsx(RadioGroup, { children: Object.entries({\n                                                    single: 'Single',\n                                                    complete: 'Complete',\n                                                }).map(([key, val]) => (_jsx(FormControlLabel, { control: _jsx(Radio, { checked: clusterMethod === key, onChange: () => {\n                                                            setClusterMethod(key);\n                                                        } }), label: val }, key))) }), _jsxs(\"div\", { style: { marginTop: 20 }, children: [_jsx(Typography, { children: \"This procedure samples the data at each 'pixel' across the visible by default\" }), _jsx(TextField, { label: \"Samples per pixel (>1 for denser sampling, between 0-1 for sparser sampling)\", variant: \"outlined\", size: \"small\", value: samplesPerPixel, onChange: event => {\n                                                            setSamplesPerPixel(event.target.value);\n                                                        } })] })] })) : null, results ? (_jsx(\"div\", {})) : loading ? (_jsx(LoadingEllipses, { variant: \"h6\", title: \"Generating score matrix\" })) : error ? (_jsx(ErrorMessage, { error: error })) : null] }), _jsxs(\"div\", { children: [_jsx(Typography, { variant: \"subtitle2\", gutterBottom: true, style: { marginTop: '16px' }, children: \"Clustering Results:\" }), _jsx(TextField, { multiline: true, fullWidth: true, variant: \"outlined\", placeholder: \"Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\", rows: 10, value: paste, onChange: event => {\n                                            setPaste(event.target.value);\n                                        }, slotProps: {\n                                            input: {\n                                                classes: {\n                                                    input: classes.textAreaFont,\n                                                },\n                                            },\n                                        } })] })] })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                            const { sourcesWithoutLayout } = model;\n                            if (sourcesWithoutLayout) {\n                                try {\n                                    model.setLayout(paste\n                                        .split('\\n')\n                                        .map(t => t.trim())\n                                        .filter(f => !!f)\n                                        .map(r => +r)\n                                        .map(idx => {\n                                        const ret = sourcesWithoutLayout[idx - 1];\n                                        if (!ret) {\n                                            throw new Error(`out of bounds at ${idx}`);\n                                        }\n                                        return ret;\n                                    }));\n                                }\n                                catch (e) {\n                                    console.error(e);\n                                    getSession(model).notifyError(`${e}`, e);\n                                }\n                            }\n                            handleClose();\n                        }, children: \"Apply clustering\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default WiggleClusterDialogManuals;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { FormControlLabel, Radio, RadioGroup } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport WiggleClusterDialogAuto from './WiggleClusterDialogAuto';\nimport WiggleClusterDialogManual from './WiggleClusterDialogManual';\nfunction Header({ activeMode, setActiveMode, }) {\n    return (_jsx(\"div\", { children: _jsx(RadioGroup, { children: Object.entries({\n                auto: (_jsx(\"div\", { children: \"Run in-app clustering (slower, particularly for large numbers of samples, uses JS implementation of hclust)\" })),\n                manual: (_jsx(\"div\", { children: \"Download R script to run clustering (faster, uses R implementation of hclust)\" })),\n            }).map(([key, val]) => (_jsx(FormControlLabel, { control: _jsx(Radio, { checked: activeMode === key, onChange: () => {\n                        setActiveMode(key);\n                    } }), label: val }, key))) }) }));\n}\nconst WiggleClusterDialog = observer(function ({ model, handleClose, }) {\n    const [activeMode, setActiveMode] = useState('auto');\n    return (_jsx(Dialog, { open: true, title: \"Cluster by score\", maxWidth: \"xl\", onClose: (_, reason) => {\n            if (reason !== 'backdropClick') {\n                handleClose();\n            }\n        }, children: activeMode === 'auto' ? (_jsx(WiggleClusterDialogAuto, { model: model, handleClose: handleClose, children: _jsx(Header, { activeMode: activeMode, setActiveMode: setActiveMode }) })) : (_jsx(WiggleClusterDialogManual, { model: model, handleClose: handleClose, children: _jsx(Header, { activeMode: activeMode, setActiveMode: setActiveMode }) })) }));\n});\nexport default WiggleClusterDialog;\n"],"names":["WiggleClusterDialogAuto","observer","model","children","handleClose","progress","setProgress","useState","error","setError","loading","setLoading","stopToken","setStopToken","showAdvanced","setShowAdvanced","samplesPerPixel","setSamplesPerPixel","useLocalStorage","_jsxs","_Fragment","DialogContent","_jsx","Button","Typography","TextField","event","stopStopToken","ErrorMessage","DialogActions","view","getContainingView","rpcManager","getSession","sourcesWithoutLayout","adapterConfig","sessionId","getRpcSessionId","createStopToken","ret","arg","idx","e","isAbortException","isAlive","useStyles","makeStyles","theme","WiggleClusterDialogManuals","classes","paste","setPaste","setRet","clusterMethod","setClusterMethod","useEffect","dynamicBlocks","bpPerPx","results","val","key","resultsTsv","saveAs","copy","RadioGroup","FormControlLabel","Radio","LoadingEllipses","t","f","r","Header","activeMode","setActiveMode","WiggleClusterDialog","Dialog","_","reason","WiggleClusterDialogManual"],"mappings":"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","x_google_ignoreList":[0,1,2]}