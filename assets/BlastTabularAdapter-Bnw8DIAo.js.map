{"version":3,"file":"BlastTabularAdapter-Bnw8DIAo.js","sources":["../../node_modules/@jbrowse/plugin-comparative-adapters/esm/BlastTabularAdapter/BlastTabularAdapter.js"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { doesIntersect2, fetchAndMaybeUnzip } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { parseLineByLine } from '@jbrowse/core/util/parseLineByLine';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport SyntenyFeature from '../SyntenyFeature';\nfunction createBlastLineParser(columns) {\n    const columnNames = columns.trim().split(' ');\n    const qseqidIndex = columnNames.indexOf('qseqid');\n    if (qseqidIndex === -1) {\n        throw new Error('Missing required column \"qseqid\"');\n    }\n    const sseqidIndex = columnNames.indexOf('sseqid');\n    if (sseqidIndex === -1) {\n        throw new Error('Missing required column \"sseqid\"');\n    }\n    const qstartIndex = columnNames.indexOf('qstart');\n    if (qstartIndex === -1) {\n        throw new Error('Missing required column \"qstart\"');\n    }\n    const qendIndex = columnNames.indexOf('qend');\n    if (qendIndex === -1) {\n        throw new Error('Missing required column \"qend\"');\n    }\n    const sstartIndex = columnNames.indexOf('sstart');\n    if (sstartIndex === -1) {\n        throw new Error('Missing required column \"sstart\"');\n    }\n    const sendIndex = columnNames.indexOf('send');\n    if (sendIndex === -1) {\n        throw new Error('Missing required column \"send\"');\n    }\n    const columnNameSet = new Map(columnNames\n        .map((c, idx) => [c, idx])\n        .filter(f => !['qseqid', 'sseqid', 'qstart', 'qend', 'sstart', 'send'].includes(f[0])));\n    return (line) => {\n        if (line.startsWith('#')) {\n            return;\n        }\n        const row = line.split('\\t');\n        const qseqid = row[qseqidIndex];\n        const sseqid = row[sseqidIndex];\n        const qstart = row[qstartIndex];\n        const qend = row[qendIndex];\n        const sstart = row[sstartIndex];\n        const send = row[sendIndex];\n        if (!(qseqid && sseqid && qstart && qend && sstart && send)) {\n            console.warn('Invalid BLAST line');\n            console.warn(line);\n            return;\n        }\n        const record = {\n            qseqid,\n            sseqid,\n            qstart: Number.parseInt(qstart),\n            qend: Number.parseInt(qend),\n            sstart: Number.parseInt(sstart),\n            send: Number.parseInt(send),\n        };\n        for (const [columnName, idx] of columnNameSet.entries()) {\n            const value = row[idx];\n            if (!value) {\n                continue;\n            }\n            record[columnName] = value;\n        }\n        return record;\n    };\n}\nclass BlastTabularAdapter extends BaseFeatureDataAdapter {\n    getData(opts) {\n        if (!this.data) {\n            this.data = this.setup(opts).catch((e) => {\n                this.data = undefined;\n                throw e;\n            });\n        }\n        return this.data;\n    }\n    async setup(opts) {\n        const columns = readConfObject(this.config, 'columns');\n        const lines = [];\n        const cb = createBlastLineParser(columns);\n        parseLineByLine(await fetchAndMaybeUnzip(openLocation(readConfObject(this.config, 'blastTableLocation'), this.pluginManager), opts), line => {\n            const res = cb(line);\n            if (res) {\n                lines.push(res);\n            }\n            return true;\n        }, opts === null || opts === void 0 ? void 0 : opts.statusCallback);\n        return lines;\n    }\n    async hasDataForRefName() {\n        return true;\n    }\n    getAssemblyNames() {\n        const assemblyNames = this.getConf('assemblyNames');\n        if (assemblyNames.length === 0) {\n            const query = this.getConf('queryAssembly');\n            const target = this.getConf('targetAssembly');\n            return [query, target];\n        }\n        return assemblyNames;\n    }\n    async getRefNames(opts = {}) {\n        var _a;\n        const r1 = (_a = opts.regions) === null || _a === void 0 ? void 0 : _a[0].assemblyName;\n        const feats = await this.getData(opts);\n        const idx = this.getAssemblyNames().indexOf(r1);\n        if (idx !== -1) {\n            const set = new Set();\n            for (const feat of feats) {\n                set.add(idx === 0 ? feat.qseqid : feat.sseqid);\n            }\n            return [...set];\n        }\n        console.warn('Unable to do ref renaming on adapter');\n        return [];\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const blastRecords = await this.getData(opts);\n            const [queryAssembly, targetAssembly] = this.getAssemblyNames();\n            const { refName: queryRefName, assemblyName: queryAssemblyName, start: queryStart, end: queryEnd, } = query;\n            if (queryAssemblyName !== targetAssembly &&\n                queryAssemblyName !== queryAssembly) {\n                console.warn(`${queryAssemblyName} not found in this adapter`);\n                observer.complete();\n                return;\n            }\n            for (let i = 0; i < blastRecords.length; i++) {\n                const r = blastRecords[i];\n                let start;\n                let end;\n                let refName;\n                let assemblyName;\n                let mateStart;\n                let mateEnd;\n                let mateRefName;\n                let mateAssemblyName;\n                const { qseqid, sseqid, qstart, qend, sstart, send, ...rest } = r;\n                if (queryAssemblyName === queryAssembly) {\n                    start = qstart;\n                    end = qend;\n                    refName = qseqid;\n                    assemblyName = queryAssembly;\n                    mateStart = sstart;\n                    mateEnd = send;\n                    mateRefName = sseqid;\n                    mateAssemblyName = targetAssembly;\n                }\n                else {\n                    start = sstart;\n                    end = send;\n                    refName = sseqid;\n                    assemblyName = targetAssembly;\n                    mateStart = qstart;\n                    mateEnd = qend;\n                    mateRefName = qseqid;\n                    mateAssemblyName = queryAssembly;\n                }\n                let strand = 1;\n                let mateStrand = 1;\n                if (start > end) {\n                    ;\n                    [start, end] = [end, start];\n                    strand = -1;\n                }\n                if (mateStart > mateEnd) {\n                    ;\n                    [mateStart, mateEnd] = [mateEnd, mateStart];\n                    mateStrand = -1;\n                }\n                if (refName === queryRefName &&\n                    doesIntersect2(queryStart, queryEnd, start, end)) {\n                    observer.next(new SyntenyFeature({\n                        uniqueId: i + queryAssemblyName,\n                        assemblyName,\n                        start,\n                        end,\n                        type: 'match',\n                        refName,\n                        strand: strand * mateStrand,\n                        syntenyId: i,\n                        ...rest,\n                        mate: {\n                            start: mateStart,\n                            end: mateEnd,\n                            refName: mateRefName,\n                            assemblyName: mateAssemblyName,\n                        },\n                    }));\n                }\n            }\n            observer.complete();\n        });\n    }\n}\nBlastTabularAdapter.capabilities = ['getFeatures', 'getRefNames'];\nexport default BlastTabularAdapter;\n"],"names":["createBlastLineParser","columns","columnNames","qseqidIndex","sseqidIndex","qstartIndex","qendIndex","sstartIndex","sendIndex","columnNameSet","idx","f","line","row","qseqid","sseqid","qstart","qend","sstart","send","record","columnName","value","BlastTabularAdapter","BaseFeatureDataAdapter","opts","e","readConfObject","lines","cb","parseLineByLine","fetchAndMaybeUnzip","openLocation","res","assemblyNames","query","target","_a","r1","feats","set","feat","ObservableCreate","observer","blastRecords","queryAssembly","targetAssembly","queryRefName","queryAssemblyName","queryStart","queryEnd","i","r","start","end","refName","assemblyName","mateStart","mateEnd","mateRefName","mateAssemblyName","rest","strand","mateStrand","doesIntersect2","SyntenyFeature"],"mappings":"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","x_google_ignoreList":[0]}