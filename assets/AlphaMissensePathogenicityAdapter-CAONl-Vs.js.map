{"version":3,"file":"AlphaMissensePathogenicityAdapter-CAONl-Vs.js","sources":["../../src/UniprotPlugin/AlphaMissensePathogenicityAdapter/AlphaMissensePathogenicityAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { SimpleFeature, doesIntersect2, max, min } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, Region } from '@jbrowse/core/util'\n\nexport default class AlphaMissensePathogenicityAdapter extends BaseFeatureDataAdapter {\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public feats:\n    | Promise<\n        {\n          uniqueId: string\n          start: number\n          end: number\n          score: number\n          ref: string\n          variant: string\n          am_class: string\n        }[]\n      >\n    | undefined\n\n  private async loadDataP() {\n    const scores = await openLocation(this.getConf('location')).readFile('utf8')\n    return scores\n      .split('\\n')\n      .slice(1)\n      .map(f => f.trim())\n      .filter(f => !!f)\n      .map((row, idx) => {\n        const [protein_variant, score, am_class] = row.split(',')\n        const ref = protein_variant![0]\n        const variant = protein_variant!.at(-1)\n        const coord = protein_variant!.slice(1, -1)\n        return {\n          uniqueId: `feat-${idx}`,\n          ref: ref!,\n          variant: variant!,\n          start: +coord,\n          end: +coord + 1,\n          score: +score!,\n          am_class: am_class!,\n        }\n      })\n  }\n\n  private async loadData(_opts: BaseOptions = {}) {\n    this.feats =\n      this.feats ??\n      this.loadDataP().catch((error: unknown) => {\n        this.feats = undefined\n        throw error\n      })\n\n    return this.feats\n  }\n\n  public async getGlobalStats(_opts?: BaseOptions) {\n    const data = await this.loadData()\n    const scoreMin = min(data.map(s => s.score))\n    const scoreMax = max(data.map(s => s.score))\n    return { scoreMin, scoreMax }\n  }\n\n  // always render bigwig instead of calculating a feature density for it\n  async getMultiRegionFeatureDensityStats(_regions: Region[]) {\n    return { featureDensity: 0 }\n  }\n  public async getRefNames(_opts: BaseOptions = {}) {\n    return []\n  }\n\n  public getFeatures(query: Region, _opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const data = await this.loadData()\n      for (const f of data) {\n        if (doesIntersect2(f.start, f.end, start, end)) {\n          observer.next(new SimpleFeature({ ...f, refName, source: f.variant }))\n        }\n      }\n      observer.complete()\n    })\n  }\n\n  public async getSources() {\n    const sources = new Set<string>()\n    const data = await this.loadData()\n    for (const f of data) {\n      sources.add(f.variant)\n    }\n    return [...sources].map(s => ({\n      name: s,\n      __name: s,\n    }))\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["AlphaMissensePathogenicityAdapter","BaseFeatureDataAdapter","openLocation","f","row","idx","protein_variant","score","am_class","ref","variant","coord","_opts","error","data","scoreMin","min","s","scoreMax","max","_regions","query","ObservableCreate","observer","start","end","refName","doesIntersect2","SimpleFeature","sources"],"mappings":"+HAQA,MAAqBA,UAA0CC,EAAAA,sBAAuB,CACpF,OAAc,aAAe,CAAC,cAAe,aAAa,EAEnD,MAcP,MAAc,WAAY,CAExB,OADe,MAAMC,EAAAA,aAAa,KAAK,QAAQ,UAAU,CAAC,EAAE,SAAS,MAAM,GAExE,MAAM;AAAA,CAAI,EACV,MAAM,CAAC,EACP,IAAIC,GAAKA,EAAE,KAAA,CAAM,EACjB,UAAY,CAAC,CAACA,CAAC,EACf,IAAI,CAACC,EAAKC,IAAQ,CACjB,KAAM,CAACC,EAAiBC,EAAOC,CAAQ,EAAIJ,EAAI,MAAM,GAAG,EAClDK,EAAMH,EAAiB,CAAC,EACxBI,EAAUJ,EAAiB,GAAG,EAAE,EAChCK,EAAQL,EAAiB,MAAM,EAAG,EAAE,EAC1C,MAAO,CACL,SAAU,QAAQD,CAAG,GACrB,IAAAI,EACA,QAAAC,EACA,MAAO,CAACC,EACR,IAAK,CAACA,EAAQ,EACd,MAAO,CAACJ,EACR,SAAAC,CAAA,CAEJ,CAAC,CACL,CAEA,MAAc,SAASI,EAAqB,GAAI,CAC9C,YAAK,MACH,KAAK,OACL,KAAK,YAAY,MAAOC,GAAmB,CACzC,WAAK,MAAQ,OACPA,CACR,CAAC,EAEI,KAAK,KACd,CAEA,MAAa,eAAeD,EAAqB,CAC/C,MAAME,EAAO,MAAM,KAAK,SAAA,EAClBC,EAAWC,EAAAA,IAAIF,EAAK,IAAIG,GAAKA,EAAE,KAAK,CAAC,EACrCC,EAAWC,EAAAA,IAAIL,EAAK,IAAIG,GAAKA,EAAE,KAAK,CAAC,EAC3C,MAAO,CAAE,SAAAF,EAAU,SAAAG,CAAA,CACrB,CAGA,MAAM,kCAAkCE,EAAoB,CAC1D,MAAO,CAAE,eAAgB,CAAA,CAC3B,CACA,MAAa,YAAYR,EAAqB,GAAI,CAChD,MAAO,CAAA,CACT,CAEO,YAAYS,EAAeT,EAAqB,GAAI,CACzD,OAAOU,EAAAA,iBAA0B,MAAMC,GAAY,CACjD,KAAM,CAAE,MAAAC,EAAO,IAAAC,EAAK,QAAAC,CAAA,EAAYL,EAC1BP,EAAO,MAAM,KAAK,SAAA,EACxB,UAAWX,KAAKW,EACVa,EAAAA,eAAexB,EAAE,MAAOA,EAAE,IAAKqB,EAAOC,CAAG,GAC3CF,EAAS,KAAK,IAAIK,EAAAA,cAAc,CAAE,GAAGzB,EAAG,QAAAuB,EAAS,OAAQvB,EAAE,OAAA,CAAS,CAAC,EAGzEoB,EAAS,SAAA,CACX,CAAC,CACH,CAEA,MAAa,YAAa,CACxB,MAAMM,MAAc,IACdf,EAAO,MAAM,KAAK,SAAA,EACxB,UAAWX,KAAKW,EACde,EAAQ,IAAI1B,EAAE,OAAO,EAEvB,MAAO,CAAC,GAAG0B,CAAO,EAAE,IAAIZ,IAAM,CAC5B,KAAMA,EACN,OAAQA,CAAA,EACR,CACJ,CAEO,eAAsB,CAAC,CAChC"}