{"version":3,"file":"getMethBins-0YrPm7Ya.js","sources":["../../node_modules/@jbrowse/plugin-alignments/esm/ModificationParser/getModPositions.js","../../node_modules/@jbrowse/plugin-alignments/esm/ModificationParser/getModProbabilities.js","../../node_modules/@jbrowse/plugin-alignments/esm/shared/getMaximumModificationAtEachPosition.js","../../node_modules/@jbrowse/plugin-alignments/esm/ModificationParser/getMethBins.js"],"sourcesContent":["import { revcom } from '@jbrowse/core/util';\nimport { modificationRegex } from './consts';\nexport function getModPositions(mm, fseq, fstrand) {\n    const seq = fstrand === -1 ? revcom(fseq) : fseq;\n    const mods = mm.split(';');\n    const result = [];\n    for (const mod of mods) {\n        if (mod === '') {\n            continue;\n        }\n        const split = mod.split(',');\n        const basemod = split[0];\n        const matches = modificationRegex.exec(basemod);\n        if (!matches) {\n            throw new Error(`bad format for MM tag: \"${mod}\"`);\n        }\n        const [, base, strand, typestr] = matches;\n        const types = typestr.split(/(\\d+|.)/);\n        if (strand === '-') {\n            console.warn('unsupported negative strand modifications');\n            result.push({\n                type: 'unsupported',\n                positions: [],\n                base: base,\n                strand: strand,\n            });\n        }\n        for (const type of types) {\n            if (type === '') {\n                continue;\n            }\n            let currPos = 0;\n            const positions = [];\n            for (let i = 1, l = split.length; i < l; i++) {\n                let delta = +split[i];\n                do {\n                    if (base === 'N' || base === seq[currPos]) {\n                        delta--;\n                    }\n                    currPos++;\n                } while (delta >= 0 && currPos < seq.length);\n                if (fstrand === -1) {\n                    const pos = seq.length - currPos;\n                    if (pos >= 0) {\n                        positions.unshift(pos);\n                    }\n                }\n                else {\n                    positions.push(currPos - 1);\n                }\n            }\n            result.push({\n                type,\n                base: base,\n                strand: strand,\n                positions,\n            });\n        }\n    }\n    return result;\n}\n","import { getTagAlt } from '../util';\nexport function getModProbabilities(feature) {\n    const m = getTagAlt(feature, 'ML', 'Ml') || [];\n    if (m) {\n        const result = [];\n        if (typeof m === 'string') {\n            const parts = m.split(',');\n            for (let i = 0, l = parts.length; i < l; i++) {\n                result.push(+parts[i] / 255);\n            }\n        }\n        else {\n            for (let i = 0, l = m.length; i < l; i++) {\n                result.push(m[i] / 255);\n            }\n        }\n        return result;\n    }\n    else {\n        const mp = getTagAlt(feature, 'MP', 'Mp');\n        if (mp) {\n            const result = [];\n            for (let i = 0, l = mp.length; i < l; i++) {\n                const phred = mp.charCodeAt(i) - 33;\n                result.push(Math.min(1, phred / 50));\n            }\n            return result;\n        }\n        return undefined;\n    }\n}\n","import { getNextRefPos, parseCigar } from '../MismatchParser';\nimport { getModPositions } from '../ModificationParser/getModPositions';\nimport { getModProbabilities } from '../ModificationParser/getModProbabilities';\nimport { getTagAlt } from '../util';\nexport function getMaxProbModAtEachPosition(feature, cigarOps) {\n    const fstrand = feature.get('strand');\n    const seq = feature.get('seq');\n    const mm = getTagAlt(feature, 'MM', 'Mm') || '';\n    const ops = cigarOps || parseCigar(feature.get('CIGAR'));\n    if (seq) {\n        const modifications = getModPositions(mm, seq, fstrand);\n        const probabilities = getModProbabilities(feature);\n        const maxProbModForPosition = [];\n        let probIndex = 0;\n        for (const { type, positions } of modifications) {\n            for (const { ref, idx } of getNextRefPos(ops, positions)) {\n                const prob = (probabilities === null || probabilities === void 0 ? void 0 : probabilities[probIndex + (fstrand === -1 ? positions.length - 1 - idx : idx)]) || 0;\n                if (!maxProbModForPosition[ref]) {\n                    maxProbModForPosition[ref] = {\n                        type,\n                        prob,\n                        allProbs: [prob],\n                    };\n                }\n                else {\n                    const old = maxProbModForPosition[ref];\n                    maxProbModForPosition[ref] = {\n                        allProbs: [...old.allProbs, prob],\n                        prob: Math.max(old.prob, prob),\n                        type: old.prob > prob ? old.type : type,\n                    };\n                }\n            }\n            probIndex += positions.length;\n        }\n        return maxProbModForPosition;\n    }\n    return undefined;\n}\n","import { getNextRefPos } from '../MismatchParser';\nimport { getModPositions } from './getModPositions';\nimport { getModProbabilities } from './getModProbabilities';\nimport { getTagAlt } from '../util';\nexport function getMethBins(feature, cigarOps) {\n    const fstart = feature.get('start');\n    const fend = feature.get('end');\n    const fstrand = feature.get('strand');\n    const flen = fend - fstart;\n    const mm = getTagAlt(feature, 'MM', 'Mm') || '';\n    const methBins = [];\n    const hydroxyMethBins = [];\n    const methProbs = [];\n    const hydroxyMethProbs = [];\n    const seq = feature.get('seq');\n    if (seq) {\n        const probabilities = getModProbabilities(feature);\n        const modifications = getModPositions(mm, seq, fstrand);\n        let probIndex = 0;\n        for (const { type, positions } of modifications) {\n            for (const { ref, idx } of getNextRefPos(cigarOps, positions)) {\n                if (ref < 0 || ref >= flen) {\n                    continue;\n                }\n                const isReverseStrand = fstrand === -1;\n                const idx2 = probIndex + (isReverseStrand ? positions.length - 1 - idx : idx);\n                const prob = (probabilities === null || probabilities === void 0 ? void 0 : probabilities[idx2]) || 0;\n                if (type === 'm') {\n                    methBins[ref] = 1;\n                    methProbs[ref] = prob;\n                }\n                else if (type === 'h') {\n                    hydroxyMethBins[ref] = 1;\n                    hydroxyMethProbs[ref] = prob;\n                }\n            }\n            probIndex += positions.length;\n        }\n    }\n    return {\n        methBins,\n        hydroxyMethBins,\n        methProbs,\n        hydroxyMethProbs,\n    };\n}\n"],"names":["getModPositions","mm","fseq","fstrand","seq","revcom","mods","result","mod","split","basemod","matches","modificationRegex","base","strand","typestr","types","type","currPos","positions","i","l","delta","pos","getModProbabilities","feature","m","getTagAlt","parts","mp","phred","getMaxProbModAtEachPosition","cigarOps","ops","parseCigar","modifications","probabilities","maxProbModForPosition","probIndex","ref","idx","getNextRefPos","prob","old","getMethBins","fstart","fend","flen","methBins","hydroxyMethBins","methProbs","hydroxyMethProbs","idx2"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}