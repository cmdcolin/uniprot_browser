{"version":3,"file":"AlphaFoldConfidenceAdapter-vGWvaXKQ.js","sources":["../../src/UniprotPlugin/AlphaFoldConfidenceAdapter/AlphaFoldConfidenceAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { SimpleFeature, doesIntersect2 } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, Region } from '@jbrowse/core/util'\n\nexport default class AlphaFoldConfidenceAdapter extends BaseFeatureDataAdapter {\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public feats:\n    | Promise<{ uniqueId: string; start: number; end: number; score: number }[]>\n    | undefined\n\n  private async loadDataP() {\n    const scores = JSON.parse(\n      await openLocation(this.getConf('location')).readFile('utf8'),\n    ) as { residueNumber: number[]; confidenceScore: number[] }\n\n    return scores.residueNumber.map((value, idx) => ({\n      uniqueId: `feat-${idx}`,\n      start: value,\n      end: value + 1,\n      score: scores.confidenceScore[idx]!,\n    }))\n  }\n\n  private async loadData(_opts: BaseOptions = {}) {\n    this.feats =\n      this.feats ??\n      this.loadDataP().catch((error: unknown) => {\n        this.feats = undefined\n        throw error\n      })\n\n    return this.feats\n  }\n\n  public async getRefNames(_opts: BaseOptions = {}) {\n    return []\n  }\n\n  public getFeatures(query: Region, _opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const data = await this.loadData()\n      for (const f of data) {\n        if (doesIntersect2(f.start, f.end, start, end)) {\n          observer.next(new SimpleFeature({ ...f, refName }))\n        }\n      }\n      observer.complete()\n    })\n  }\n}\n"],"names":["AlphaFoldConfidenceAdapter","BaseFeatureDataAdapter","scores","openLocation","value","idx","_opts","error","query","ObservableCreate","observer","start","end","refName","data","f","doesIntersect2","SimpleFeature"],"mappings":"+HAQA,MAAqBA,UAAmCC,EAAAA,sBAAuB,CAC7E,OAAc,aAAe,CAAC,cAAe,aAAa,EAEnD,MAIP,MAAc,WAAY,CACxB,MAAMC,EAAS,KAAK,MAClB,MAAMC,EAAAA,aAAa,KAAK,QAAQ,UAAU,CAAC,EAAE,SAAS,MAAM,CAAA,EAG9D,OAAOD,EAAO,cAAc,IAAI,CAACE,EAAOC,KAAS,CAC/C,SAAU,QAAQA,CAAG,GACrB,MAAOD,EACP,IAAKA,EAAQ,EACb,MAAOF,EAAO,gBAAgBG,CAAG,CAAA,EACjC,CACJ,CAEA,MAAc,SAASC,EAAqB,GAAI,CAC9C,YAAK,MACH,KAAK,OACL,KAAK,YAAY,MAAOC,GAAmB,CACzC,WAAK,MAAQ,OACPA,CACR,CAAC,EAEI,KAAK,KACd,CAEA,MAAa,YAAYD,EAAqB,GAAI,CAChD,MAAO,CAAA,CACT,CAEO,YAAYE,EAAeF,EAAqB,GAAI,CACzD,OAAOG,EAAAA,iBAA0B,MAAMC,GAAY,CACjD,KAAM,CAAE,MAAAC,EAAO,IAAAC,EAAK,QAAAC,CAAA,EAAYL,EAC1BM,EAAO,MAAM,KAAK,SAAA,EACxB,UAAWC,KAAKD,EACVE,EAAAA,eAAeD,EAAE,MAAOA,EAAE,IAAKJ,EAAOC,CAAG,GAC3CF,EAAS,KAAK,IAAIO,EAAAA,cAAc,CAAE,GAAGF,EAAG,QAAAF,CAAA,CAAS,CAAC,EAGtDH,EAAS,SAAA,CACX,CAAC,CACH,CACF"}