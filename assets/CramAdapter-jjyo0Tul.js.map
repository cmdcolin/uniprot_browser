{"version":3,"file":"CramAdapter-jjyo0Tul.js","sources":["../../node_modules/@gmod/cram/esm/cramFile/constants.js","../../node_modules/@gmod/cram/esm/cramFile/record.js","../../node_modules/xz-decompress/dist/package/xz-decompress.js","../../node_modules/@gmod/cram/esm/errors.js","../../node_modules/@gmod/cram/esm/seek-bzip/toHex.js","../../node_modules/@gmod/cram/esm/seek-bzip/bitreader.js","../../node_modules/@gmod/cram/esm/seek-bzip/crc32.js","../../node_modules/@gmod/cram/esm/seek-bzip/stream.js","../../node_modules/@gmod/cram/esm/seek-bzip/index.js","../../node_modules/@gmod/cram/esm/htscodecs/arith_sh.js","../../node_modules/@gmod/cram/esm/htscodecs/byte_model.js","../../node_modules/@gmod/cram/esm/htscodecs/iostream.js","../../node_modules/@gmod/cram/esm/htscodecs/arith_gen.js","../../node_modules/@gmod/cram/esm/htscodecs/fqzcomp.js","../../node_modules/@gmod/cram/esm/htscodecs/rans4x16.js","../../node_modules/@gmod/cram/esm/util.js","../../node_modules/@gmod/cram/esm/htscodecs/tok3.js","../../node_modules/@gmod/cram/esm/htscodecs/index.js","../../node_modules/@gmod/cram/esm/io.js","../../node_modules/@gmod/cram/esm/rans/constants.js","../../node_modules/@gmod/cram/esm/rans/decoding.js","../../node_modules/@gmod/cram/esm/rans/d04.js","../../node_modules/@gmod/cram/esm/rans/d14.js","../../node_modules/@gmod/cram/esm/rans/frequencies.js","../../node_modules/@gmod/cram/esm/rans/index.js","../../node_modules/@gmod/cram/esm/sam.js","../../node_modules/@gmod/cram/esm/unzip.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/getBits.js","../../node_modules/crypt/crypt.js","../../node_modules/charenc/charenc.js","../../node_modules/is-buffer/index.js","../../node_modules/md5/md5.js","../../node_modules/@gmod/cram/esm/cramFile/util.js","../../node_modules/@gmod/cram/esm/cramFile/sectionParsers.js","../../node_modules/@gmod/cram/esm/cramFile/slice/decodeRecord.js","../../node_modules/@gmod/cram/esm/cramFile/slice/index.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/_base.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/beta.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/byteArrayLength.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/byteArrayStop.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/external.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/gamma.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/huffman.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/subexp.js","../../node_modules/@gmod/cram/esm/cramFile/codecs/index.js","../../node_modules/@gmod/cram/esm/cramFile/container/compressionScheme.js","../../node_modules/@gmod/cram/esm/cramFile/container/index.js","../../node_modules/@gmod/cram/esm/cramFile/file.js","../../node_modules/@gmod/cram/esm/craiIndex.js","../../node_modules/@gmod/cram/esm/indexedCramFile.js","../../node_modules/@jbrowse/plugin-alignments/esm/CramAdapter/util.js","../../node_modules/@jbrowse/plugin-alignments/esm/CramAdapter/CramSlightlyLazyFeature.js","../../node_modules/@jbrowse/plugin-alignments/esm/CramAdapter/CramAdapter.js"],"sourcesContent":["const Constants = {\n    CRAM_FLAG_PRESERVE_QUAL_SCORES: 1 << 0,\n    CRAM_FLAG_DETACHED: 1 << 1,\n    CRAM_FLAG_MATE_DOWNSTREAM: 1 << 2,\n    CRAM_FLAG_NO_SEQ: 1 << 3,\n    CRAM_FLAG_MASK: (1 << 4) - 1,\n    // mate read is reversed\n    CRAM_M_REVERSE: 1,\n    // mated read is unmapped\n    CRAM_M_UNMAP: 2,\n    //  the read is paired in sequencing, no matter whether it is mapped in a pair\n    BAM_FPAIRED: 1,\n    //  the read is mapped in a proper pair\n    BAM_FPROPER_PAIR: 2,\n    //  the read itself is unmapped; conflictive with BAM_FPROPER_PAIR\n    BAM_FUNMAP: 4,\n    //  the mate is unmapped\n    BAM_FMUNMAP: 8,\n    //  the read is mapped to the reverse strand\n    BAM_FREVERSE: 16,\n    //  the mate is mapped to the reverse strand\n    BAM_FMREVERSE: 32,\n    //  this is read1\n    BAM_FREAD1: 64,\n    //  this is read2\n    BAM_FREAD2: 128,\n    //  not primary alignment\n    BAM_FSECONDARY: 256,\n    //  QC failure\n    BAM_FQCFAIL: 512,\n    //  optical or PCR duplicate\n    BAM_FDUP: 1024,\n    //  supplementary alignment\n    BAM_FSUPPLEMENTARY: 2048,\n    BAM_CMATCH: 0,\n    BAM_CINS: 1,\n    BAM_CDEL: 2,\n    BAM_CREF_SKIP: 3,\n    BAM_CSOFT_CLIP: 4,\n    BAM_CHARD_CLIP: 5,\n    BAM_CPAD: 6,\n    BAM_CEQUAL: 7,\n    BAM_CDIFF: 8,\n    BAM_CBACK: 9,\n    BAM_CIGAR_STR: 'MIDNSHP:XB',\n    BAM_CIGAR_SHIFT: 4,\n    BAM_CIGAR_MASK: 0xf,\n    BAM_CIGAR_TYPE: 0x3c1a7,\n};\nexport default Constants;\n//# sourceMappingURL=constants.js.map","import Constants from \"./constants.js\";\nfunction decodeReadSequence(cramRecord, refRegion) {\n    // if it has no length, it has no sequence\n    if (!cramRecord.lengthOnRef && !cramRecord.readLength) {\n        return null;\n    }\n    if (cramRecord.isUnknownBases()) {\n        return null;\n    }\n    // remember: all coordinates are 1-based closed\n    const regionSeqOffset = cramRecord.alignmentStart - refRegion.start;\n    if (!cramRecord.readFeatures) {\n        return refRegion.seq\n            .slice(regionSeqOffset, regionSeqOffset + (cramRecord.lengthOnRef || 0))\n            .toUpperCase();\n    }\n    let bases = '';\n    let regionPos = regionSeqOffset;\n    let currentReadFeature = 0;\n    while (bases.length < cramRecord.readLength) {\n        if (currentReadFeature < cramRecord.readFeatures.length) {\n            const feature = cramRecord.readFeatures[currentReadFeature];\n            if (feature.code === 'Q' || feature.code === 'q') {\n                currentReadFeature += 1;\n            }\n            else if (feature.pos === bases.length + 1) {\n                // process the read feature\n                currentReadFeature += 1;\n                if (feature.code === 'b') {\n                    // specify a base pair for some reason\n                    const added = feature.data;\n                    bases += added;\n                    regionPos += added.length;\n                }\n                else if (feature.code === 'B') {\n                    // base pair and associated quality\n                    // TODO: do we need to set the quality in the qual scores?\n                    bases += feature.data[0];\n                    regionPos += 1;\n                }\n                else if (feature.code === 'X') {\n                    // base substitution\n                    bases += feature.sub;\n                    regionPos += 1;\n                }\n                else if (feature.code === 'I') {\n                    // insertion\n                    bases += feature.data;\n                }\n                else if (feature.code === 'D') {\n                    // deletion\n                    regionPos += feature.data;\n                }\n                else if (feature.code === 'i') {\n                    // insert single base\n                    bases += feature.data;\n                }\n                else if (feature.code === 'N') {\n                    // reference skip. delete some bases\n                    // do nothing\n                    // seqBases.splice(feature.pos - 1, feature.data)\n                    regionPos += feature.data;\n                }\n                else if (feature.code === 'S') {\n                    // soft clipped bases that should be present in the read seq\n                    // seqBases.splice(feature.pos - 1, 0, ...feature.data.split(''))\n                    bases += feature.data;\n                }\n                else if (feature.code === 'P') {\n                    // padding, do nothing\n                }\n                else if (feature.code === 'H') {\n                    // hard clip, do nothing\n                }\n            }\n            else if (currentReadFeature < cramRecord.readFeatures.length) {\n                // put down a chunk of sequence up to the next read feature\n                const chunk = refRegion.seq.slice(regionPos, regionPos + feature.pos - bases.length - 1);\n                bases += chunk;\n                regionPos += chunk.length;\n            }\n        }\n        else {\n            // put down a chunk of reference up to the full read length\n            const chunk = refRegion.seq.slice(regionPos, regionPos + cramRecord.readLength - bases.length);\n            bases += chunk;\n            regionPos += chunk.length;\n        }\n    }\n    return bases.toUpperCase();\n}\nconst baseNumbers = {\n    a: 0,\n    A: 0,\n    c: 1,\n    C: 1,\n    g: 2,\n    G: 2,\n    t: 3,\n    T: 3,\n    n: 4,\n    N: 4,\n};\nfunction decodeBaseSubstitution(cramRecord, refRegion, compressionScheme, readFeature) {\n    // decode base substitution code using the substitution matrix\n    const refCoord = readFeature.refPos - refRegion.start;\n    const refBase = refRegion.seq.charAt(refCoord);\n    if (refBase) {\n        readFeature.ref = refBase;\n    }\n    let baseNumber = baseNumbers[refBase];\n    if (baseNumber === undefined) {\n        baseNumber = 4;\n    }\n    const substitutionScheme = compressionScheme.substitutionMatrix[baseNumber];\n    const base = substitutionScheme[readFeature.data];\n    if (base) {\n        readFeature.sub = base;\n    }\n}\nexport const BamFlags = [\n    [0x1, 'Paired'],\n    [0x2, 'ProperlyPaired'],\n    [0x4, 'SegmentUnmapped'],\n    [0x8, 'MateUnmapped'],\n    [0x10, 'ReverseComplemented'],\n    //  the mate is mapped to the reverse strand\n    [0x20, 'MateReverseComplemented'],\n    //  this is read1\n    [0x40, 'Read1'],\n    //  this is read2\n    [0x80, 'Read2'],\n    //  not primary alignment\n    [0x100, 'Secondary'],\n    //  QC failure\n    [0x200, 'FailedQc'],\n    //  optical or PCR duplicate\n    [0x400, 'Duplicate'],\n    //  supplementary alignment\n    [0x800, 'Supplementary'],\n];\nexport const CramFlags = [\n    [0x1, 'PreservingQualityScores'],\n    [0x2, 'Detached'],\n    [0x4, 'WithMateDownstream'],\n    [0x8, 'DecodeSequenceAsStar'],\n];\nexport const MateFlags = [\n    [0x1, 'OnNegativeStrand'],\n    [0x2, 'Unmapped'],\n];\nfunction makeFlagsHelper(x) {\n    const r = {};\n    for (const [code, name] of x) {\n        r[`is${name}`] = (flags) => !!(flags & code);\n        r[`set${name}`] = (flags) => flags | code;\n    }\n    return r;\n}\nexport const BamFlagsDecoder = makeFlagsHelper(BamFlags);\nexport const CramFlagsDecoder = makeFlagsHelper(CramFlags);\nexport const MateFlagsDecoder = makeFlagsHelper(MateFlags);\n/**\n * Class of each CRAM record returned by this API.\n */\nexport default class CramRecord {\n    constructor({ flags, cramFlags, readLength, mappingQuality, lengthOnRef, qualityScores, mateRecordNumber, readBases, readFeatures, mateToUse, readGroupId, readName, sequenceId, uniqueId, templateSize, alignmentStart, tags, }) {\n        this.flags = flags;\n        this.cramFlags = cramFlags;\n        this.readLength = readLength;\n        this.mappingQuality = mappingQuality;\n        this.lengthOnRef = lengthOnRef;\n        this.qualityScores = qualityScores;\n        if (readBases) {\n            this.readBases = readBases;\n        }\n        this.readGroupId = readGroupId;\n        this.readName = readName;\n        this.sequenceId = sequenceId;\n        this.uniqueId = uniqueId;\n        this.templateSize = templateSize;\n        this.alignmentStart = alignmentStart;\n        this.tags = tags;\n        // backwards compatibility\n        if (readFeatures) {\n            this.readFeatures = readFeatures;\n        }\n        if (mateToUse) {\n            this.mate = {\n                flags: mateToUse.mateFlags,\n                readName: mateToUse.mateReadName,\n                sequenceId: mateToUse.mateSequenceId,\n                alignmentStart: mateToUse.mateAlignmentStart,\n            };\n        }\n        if (mateRecordNumber) {\n            this.mateRecordNumber = mateRecordNumber;\n        }\n    }\n    /**\n     * @returns {boolean} true if the read is paired, regardless of whether both segments are mapped\n     */\n    isPaired() {\n        return !!(this.flags & Constants.BAM_FPAIRED);\n    }\n    /** @returns {boolean} true if the read is paired, and both segments are mapped */\n    isProperlyPaired() {\n        return !!(this.flags & Constants.BAM_FPROPER_PAIR);\n    }\n    /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n    isSegmentUnmapped() {\n        return !!(this.flags & Constants.BAM_FUNMAP);\n    }\n    /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n    isMateUnmapped() {\n        return !!(this.flags & Constants.BAM_FMUNMAP);\n    }\n    /** @returns {boolean} true if the read is mapped to the reverse strand */\n    isReverseComplemented() {\n        return !!(this.flags & Constants.BAM_FREVERSE);\n    }\n    /** @returns {boolean} true if the mate is mapped to the reverse strand */\n    isMateReverseComplemented() {\n        return !!(this.flags & Constants.BAM_FMREVERSE);\n    }\n    /** @returns {boolean} true if this is read number 1 in a pair */\n    isRead1() {\n        return !!(this.flags & Constants.BAM_FREAD1);\n    }\n    /** @returns {boolean} true if this is read number 2 in a pair */\n    isRead2() {\n        return !!(this.flags & Constants.BAM_FREAD2);\n    }\n    /** @returns {boolean} true if this is a secondary alignment */\n    isSecondary() {\n        return !!(this.flags & Constants.BAM_FSECONDARY);\n    }\n    /** @returns {boolean} true if this read has failed QC checks */\n    isFailedQc() {\n        return !!(this.flags & Constants.BAM_FQCFAIL);\n    }\n    /** @returns {boolean} true if the read is an optical or PCR duplicate */\n    isDuplicate() {\n        return !!(this.flags & Constants.BAM_FDUP);\n    }\n    /** @returns {boolean} true if this is a supplementary alignment */\n    isSupplementary() {\n        return !!(this.flags & Constants.BAM_FSUPPLEMENTARY);\n    }\n    /**\n     * @returns {boolean} true if the read is detached\n     */\n    isDetached() {\n        return !!(this.cramFlags & Constants.CRAM_FLAG_DETACHED);\n    }\n    /** @returns {boolean} true if the read has a mate in this same CRAM segment */\n    hasMateDownStream() {\n        return !!(this.cramFlags & Constants.CRAM_FLAG_MATE_DOWNSTREAM);\n    }\n    /** @returns {boolean} true if the read contains qual scores */\n    isPreservingQualityScores() {\n        return !!(this.cramFlags & Constants.CRAM_FLAG_PRESERVE_QUAL_SCORES);\n    }\n    /** @returns {boolean} true if the read has no sequence bases */\n    isUnknownBases() {\n        return !!(this.cramFlags & Constants.CRAM_FLAG_NO_SEQ);\n    }\n    /**\n     * Get the original sequence of this read.\n     * @returns {String} sequence basepairs\n     */\n    getReadBases() {\n        if (!this.readBases && this._refRegion) {\n            const decoded = decodeReadSequence(this, this._refRegion);\n            if (decoded) {\n                this.readBases = decoded;\n            }\n        }\n        return this.readBases;\n    }\n    /**\n     * Get the pair orientation of a paired read. Adapted from igv.js\n     * @returns {String} of paired orientatin\n     */\n    getPairOrientation() {\n        if (!this.isSegmentUnmapped() &&\n            this.isPaired() &&\n            !this.isMateUnmapped() &&\n            this.mate &&\n            this.sequenceId === this.mate.sequenceId) {\n            const s1 = this.isReverseComplemented() ? 'R' : 'F';\n            const s2 = this.isMateReverseComplemented() ? 'R' : 'F';\n            let o1 = ' ';\n            let o2 = ' ';\n            if (this.isRead1()) {\n                o1 = '1';\n                o2 = '2';\n            }\n            else if (this.isRead2()) {\n                o1 = '2';\n                o2 = '1';\n            }\n            const tmp = [];\n            let isize = this.templateLength || this.templateSize;\n            if (isize === undefined) {\n                throw new Error('One of templateSize and templateLength must be set');\n            }\n            if (this.alignmentStart > this.mate.alignmentStart && isize > 0) {\n                isize = -isize;\n            }\n            if (isize > 0) {\n                tmp[0] = s1;\n                tmp[1] = o1;\n                tmp[2] = s2;\n                tmp[3] = o2;\n            }\n            else {\n                tmp[2] = s1;\n                tmp[3] = o1;\n                tmp[0] = s2;\n                tmp[1] = o2;\n            }\n            return tmp.join('');\n        }\n        return null;\n    }\n    /**\n     * Annotates this feature with the given reference sequence basepair\n     * information. This will add a `sub` and a `ref` item to base\n     * substitution read features given the actual substituted and reference\n     * base pairs, and will make the `getReadSequence()` method work.\n     *\n     * @param {object} refRegion\n     * @param {number} refRegion.start\n     * @param {number} refRegion.end\n     * @param {string} refRegion.seq\n     * @param {CramContainerCompressionScheme} compressionScheme\n     * @returns {undefined} nothing\n     */\n    addReferenceSequence(refRegion, compressionScheme) {\n        if (this.readFeatures) {\n            // use the reference bases to decode the bases substituted in each base\n            // substitution\n            this.readFeatures.forEach(readFeature => {\n                if (readFeature.code === 'X') {\n                    decodeBaseSubstitution(this, refRegion, compressionScheme, readFeature);\n                }\n            });\n        }\n        // if this region completely covers this read,\n        // keep a reference to it\n        if (!this.readBases &&\n            refRegion.start <= this.alignmentStart &&\n            refRegion.end >=\n                this.alignmentStart + (this.lengthOnRef || this.readLength) - 1) {\n            this._refRegion = refRegion;\n        }\n    }\n    toJSON() {\n        const data = {};\n        Object.keys(this).forEach(k => {\n            if (k.startsWith('_')) {\n                return;\n            }\n            data[k] = this[k];\n        });\n        data.readBases = this.getReadBases();\n        return data;\n    }\n}\n//# sourceMappingURL=record.js.map","/*!\n * Based on xzwasm (c) Steve Sanderson. License: MIT - https://github.com/SteveSanderson/xzwasm\n * Contains xz-embedded by Lasse Collin and Igor Pavlov. License: Public domain - https://tukaani.org/xz/embedded.html\n * and walloc (c) 2020 Igalia, S.L. License: MIT - https://github.com/wingo/walloc\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"stream/web\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"stream/web\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"xz-decompress\"] = factory(require(\"stream/web\"));\n\telse\n\t\troot[\"xz-decompress\"] = factory(root[\"stream/web\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__2__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ([\n/* 0 */,\n/* 1 */\n/***/ ((module) => {\n\nmodule.exports = \"data:application/wasm;base64,AGFzbQEAAAABOApgAX8Bf2ABfwBgAABgA39/fwF/YAABf2ACf38AYAN/f34BfmACf38Bf2AEf39/fwF/YAN/f38AAyEgAAABAgMDAwMEAQUAAgMCBgcIBwUDAAMHAQcABwcBAwkFAwEAAgYIAX8BQfCgBAsHTgUGbWVtb3J5AgAOY3JlYXRlX2NvbnRleHQACA9kZXN0cm95X2NvbnRleHQACQxzdXBwbHlfaW5wdXQACg9nZXRfbmV4dF9vdXRwdXQACwqQYCDfAgEFf0EAIQECQCAAQQdqIgJBEEkNAEEBIQEgAkEDdiIDQQJGDQBBAiEBIAJBIEkNAEEDIQEgA0EERg0AQQQhASACQTBJDQBBBSEBIANBBkYNAEEGIQEgAkHIAEkNAEEHIQEgAkHYAEkNAEEIIQEgAkGIAUkNAEEJIQEgAkGIAkkNACAAEIGAgIAAIgBBCGpBACAAGw8LAkACQCABQQJ0QcCIgIAAaiIEKAIAIgANAEEAIQACQAJAQQAoAuSIgIAAIgJFDQBBACACKAIANgLkiICAAAwBC0EAEIGAgIAAIgJFDQILIAJBgIB8cSIAIAJBCHZB/wFxIgJyIAE6AAAgACACQQh0ckGAAmohAEEAIQJBACABQQJ0QYCIgIAAaigCACIDayEFIAMhAQNAIAAgBWoiACACNgIAIAAhAiABIANqIgFBgQJJDQALIAQgADYCAAsgBCAAKAIANgIACyAAC/QHAQh/QQAoArCIgIAAIQECQAJAAkACQAJAQQAtALSIgIAARQ0AQQBBADoAtIiAgAAgAUUNAUGwiICAACECA0ACQAJAIAFBCGoiAyABKAIEIgRqIgVBCHZB/wFxIgYNACABIQIMAQsCQANAIAVBgIB8cSAGai0AAEH+AUcNAUGwiICAACEGA0AgBiIHKAIAIgYgBUcNAAsgByAFKAIANgIAIAEgBCAFKAIEakEIaiIENgIEIAcgAiACIAVGGyECIAMgBGoiBUEIdkH/AXEiBg0ACwsgAigCACECCyACKAIAIgENAAtBACgCsIiAgAAhAQsgAUUNACAAQYcCakGAfnEhCEF/IQJBsIiAgAAhBEEAIQNBsIiAgAAhBgNAIAYhBwJAIAEiBigCBCIFIABJDQAgBSACTw0AIAUhAiAHIQQgBiEDIAVBCGogCEcNACAHIQQgBSECIAYhAwwECyAGKAIAIgENAAsgAw0CDAELQbCIgIAAIQQLPwBBEHQhASAAQYgCaiEHQQAhAwJAAkBBACgCuIiAgAAiAkUNAEEAIQUgASEGDAELQQAgAUHwoISAAEH//wNqQYCAfHEiBmsiAjYCuIiAgAAgAiEFCwJAIAcgBU0NACACQQF2IgIgByAFayIHIAIgB0sbQf//A2oiB0EQdkAAQX9GDQJBAEEAKAK4iICAACAHQYCAfHEiA2o2AriIgIAACyAGRQ0BIAZB/wE6AAEgBkEAKAKwiICAADYCgAIgBkGEAmogAyAFakGAgHxxQfh9aiICNgIAIAZBgAJqIQMLIANBgIB8cSIGIANBCHZB/wFxckH/AToAACAEIAMoAgA2AgACQCACIABrQYB+cSIFDQAgAw8LIAMhAQJAIAYgBUF/cyADQQhqIgQgAmoiB2pBgIB8cUYNACAEQf//A3EhBQJAIABB9/0DSw0AIAYgBEEIdkH/AXFqQf4BOgAAIANBACgCsIiAgAA2AgAgA0GAgAQgBWsiBTYCBEEAIAM2ArCIgIAAEIOAgIAAIAZBhIIEaiACIAVrQfh9aiIFNgIAIAZBgYAEakH/AToAACAGQYCCBGohASAFIABrQYB+cSEFDAELIAIgBWogACAFakH//3tqQYCAfHFrQYCAeGohBSADIQELIAEgASgCBCAFazYCBCAFQfgBaiEGIAcgBWtBCHZB/wFxIQUCQANAIAYiB0GAfmohBiAFIgQNAUEBIQUgB0H4AUcNAAsLAkAgB0H4AUYNACACIANqIAZrQYCAfHEiBSAEakH+AToAACAFIARBCHRqIgVBACgCsIiAgAA2AgAgBSAGNgIEQQAgBTYCsIiAgAAQg4CAgAALIAEPC0EAC3wBAn8CQCAARQ0AAkAgAEGAgHxxIABBCHZB/wFxciIBLQAAIgJB/wFHDQAgAEF4aiIAQQAoArCIgIAANgIAQQAgADYCsIiAgAAgAUH+AToAAEEAQQE6ALSIgIAADwsgACACQQJ0QcCIgIAAaiICKAIANgIAIAIgADYCAAsLawECfwJAQQAoArCIgIAAIgAoAgRB/wFLDQAgAEGAgHxxIgEgAEEIdkH/AXEiAHJBCToAAEEAQQAoArCIgIAAKAIANgKwiICAACABIABBCHRyIgBBACgC5IiAgAA2AgBBACAANgLkiICAAAsLTgECfwJAIAAgAUYNACACRQ0AA0ACQCAALQAAIgMgAS0AACIERg0AQQFBfyADIARLGw8LIAFBAWohASAAQQFqIQAgAkF/aiICDQALC0EAC3gBAX8CQAJAIAAgAU8NACACRQ0BIAAhAwNAIAMgAS0AADoAACABQQFqIQEgA0EBaiEDIAJBf2oiAg0ADAILCyAAIAFNDQAgAkUNACABQX9qIQEgAEF/aiEDA0AgAyACaiABIAJqLQAAOgAAIAJBf2oiAg0ACwsgAAssAQF/AkAgAkUNACAAIQMDQCADIAE6AAAgA0EBaiEDIAJBf2oiAg0ACwsgAAt/AQF/AkACQCABIAByIAJyQQNxRQ0AIAJFDQEgACEDA0AgAyABLQAAOgAAIAFBAWohASADQQFqIQMgAkF/aiICDQAMAgsLIAJBBEkNACACQQJ2IQIgACEDA0AgAyABKAIANgIAIAFBBGohASADQQRqIQMgAkF/aiICDQALCyAAC4gBAQJ/AkBBAC0A6IiAgAANAEEAQQE6AOiIgIAAEIyAgIAAEI6AgIAAC0GggAgQgICAgAAiAEGAgAQ2AgBBAkGAgIAgEJeAgIAAIQEgAEEUakKAgICAgIDAADcCACAAQRBqIABBoIAEajYCACAAQQhqQgA3AgAgACAAQSBqNgIEIAAgATYCHCAACxUAIAAoAhwQmICAgAAgABCCgICAAAsWACAAQQxqIAE2AgAgAEEIakEANgIACxsAIAAoAhwgAEEEaiAAQQxqKAIARRCWgICAAAtUAQN/QQAhAANAQQghASAAIQIDQEEAIAJBAXFrQaCG4u1+cSACQQF2cyECIAFBf2oiAQ0ACyAAQQJ0QfCIgIAAaiACNgIAIABBAWoiAEGAAkcNAAsLTgACQCABRQ0AIAJBf3MhAgNAIAJB/wFxIAAtAABzQQJ0QfCIgIAAaigCACACQQh2cyECIABBAWohACABQX9qIgENAAsgAkF/cyECCyACC10DAX4BfwF+QgAhAANAQQghASAAIQIDQEIAIAJCAYN9QsKenLzd8pW2SYMgAkIBiIUhAiABQX9qIgENAAsgAKdBA3RB8JCAgABqIAI3AwAgAEIBfCIAQoACUg0ACwtPAAJAIAFFDQAgAkJ/hSECA0AgAkL/AYMgADEAAIWnQQN0QfCQgIAAaikDACACQgiIhSECIABBAWohACABQX9qIgENAAsgAkJ/hSECCyACC8oQAgx/An4CQAJAIAAoAiRFDQAgACgCACECDAELQQAhAiAAQQA6ACggAEIANwMAIABCADcDGCAAQcgAakEAQeQAEIaAgIAAGiAAQawBakEMNgIACyAAIAEoAgQiAzYCECAAQeAAaiEEIABByABqIQUgAEG2AWohBiAAQbABaiEHIABBqAFqIQggASgCECEJAkACQAJAAkADQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCACDgoBAgAEBQYHCAkKDwsgASgCACEKIAAoAqgBIQIgACgCrAEhCyABKAIEIQwgASgCCCENDAILIAcgACgCqAEiDGogASgCACABKAIEIgJqIAEoAgggAmsiAiAAKAKsASAMayIMIAIgDEkbIgIQh4CAgAAaIAEgASgCBCACajYCBEEAIQwgAEEAIAAoAqgBIAJqIgIgAiAAKAKsASILRhs2AqgBIAIgC0cNESAAQQE2AgACQCAHQaiIgIAAQQYQhICAgABFDQBBBSEMDBILIAZBAkEAEI2AgIAAIAAoALgBRw0QQQYhDCAGLQAADREgACAALQC3ASICNgIgIAJBBEsNEUEBIAJ0QRNxRQ0RCyABKAIEIgwgASgCCCINRg0OAkAgASgCACIKIAxqLQAAIgsNACAAIAw2AhAgASAMQQFqNgIEQQYhAgwMC0EAIQIgAEEANgKoASAAQQI2AgAgACALQQJ0QQRqIgs2AqwBIAAgCzYCQAsgByACaiAKIAxqIA0gDGsiDCALIAJrIgIgDCACSRsiAhCHgICAABogASABKAIEIAJqNgIEQQAhDCAAQQAgACgCqAEgAmoiAiACIAAoAqwBIgtGGzYCqAEgAiALRw0PIAAgAkF8aiICNgKsAUEHIQwgByACQQAQjYCAgAAgByAAKAKsASICaigAAEcNDyAAQQI2AqgBIAAtALEBIgtBP3ENDAJAAkAgC0HAAHFFDQAgACAHIAggAhCRgICAAEEBRw0RIAAgACkDCDcDMCAAKAKsASECIAAtALEBIQsMAQsgAEJ/NwMwC0J/IQ4CQCALwEF/Sg0AIAAgByAIIAIQkYCAgABBAUcNECAAKAKsASECIAApAwghDgsgACAONwM4IAIgACgCqAEiC2tBAkkNDyAAIAtBAWoiCjYCqAEgCCALakEI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AA8LIAEgA0EBaiIFNgIEAkAgASgCACADai0AACAAKQMYIAAoAgQiA62Ip0H/AXFGDQBBBw8LIAAgA0EIaiIGNgIEIAUhAyAGIAJJDQALIABBADYCBCAAQgA3AxhBAQtvAQF/QQchAQJAIABBugFqLwAAQdm0AUcNACAAQbQBakEGQQAQjYCAgAAgAEGwAWooAABHDQAgAEGAAWopAwBCAoggADUAtAFSDQAgAEG4AWotAAANAEEBQQcgACgCICAAQbkBai0AAEYbIQELIAELwAIBA38CQAJAAkAgACgCJA0AIABBADoAKCAAQQA2AgBBASECDAELAkAgACgCAEEKRw0AQQAhAwwCC0ECIQMMAQtBASEDCwJAAkADQAJAAkACQAJAIAMOAwABAwMLIAEoAgQiAyABKAIIIgRGDQQgASgCACEFAkADQCAFIANqLQAADQEgASADQQFqIgM2AgQgACAAKAIEQQFqQQNxNgIEIAQgA0YNBgwACwsCQCAAKAIERQ0AQQcPCyAAKAIkRQ0BIABBADoAKCAAQQA2AgBBASEDDAMLIABCADcDGCAAQQA2AgQgAEHIAGpBAEHkABCGgICAABogAEGsAWpBDDYCAAtBAiEDDAELIAAgARCQgICAACIDQQFHDQIgAEEKNgIAQQAhAwwACwsCQCACDQBBAA8LQQdBASAAKAIEGyEDCyADC3UBAX8CQEG4CRCAgICAACICRQ0AIAIgADYCJCACIAAgARCbgICAACIANgKwCQJAIABFDQAgAkEAOgAoIAJCADcDACACQgA3AxggAkHIAGpBAEHkABCGgICAABogAkGsAWpBDDYCACACDwsgAhCCgICAAAtBAAseAAJAIABFDQAgACgCsAkQnYCAgAAgABCCgICAAAsL3RABCn8gAEHo3QFqIQIgAEHUAGohAyAAQRxqIgRBCGohBQJAAkADQCAAKAJAIQYCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgASgCBCIHIAEoAghJDQAgBkEHRg0BDBELIAYOCQECAwQFBgcACQ4LIAAoAkwhBgwHC0EBIQYgASAHQQFqNgIEIAEoAgAgB2otAAAiB0UNCAJAAkAgB0HfAUsNACAHQQFHDQELIABBgAI7AVACQCAAKAI8DQAgACABKAIMIAEoAhAiBmo2AhggACABKAIUIAZrNgIsCyAEQgA3AgAgBUIANwIADAoLIAAtAFBFDQkMDQsgASAHQQFqNgIEIAEoAgAgB2otAAAhByAAQQI2AkAgACAHQQh0IAAoAkhqNgJIDAsLIAEgB0EBajYCBCABKAIAIAdqLQAAIQcgAEEDNgJAIAAgByAAKAJIakEBajYCSAwKCyABIAdBAWo2AgQgASgCACAHai0AACEHIABBBDYCQCAAIAdBCHQ2AkwMCQsgASAHQQFqNgIEIAEoAgAgB2otAAAhByAAIAAoAkQ2AkAgACAHIAAoAkxqQQFqNgJMDAgLIAEgB0EBajYCBEEHIQYgASgCACAHai0AACIHQeABSw0DQQAhCAJAAkAgB0EtTw0AQQAhCQwBCyAHQVNqIgcgB0H/AXFBLW4iCUEtbGshByAJQQFqIQkLIABBfyAJdEF/czYCdAJAIAdB/wFxQQlJDQAgB0F3aiIHIAdB/wFxQQluIghBCWxrIQcgCEEBaiEICyAAIAg2AnAgACAHQf8BcSIHNgJsIAggB2pBBEsNAyADQgA3AgAgA0EIakIANwIAIANBEGpBADYCACAAQX8gCHRBf3M2AnBB+AAhBwNAIAAgB2pBgAg7AQAgB0ECaiIHQeTdAUcNAAsgAEEGNgJAIABBBTYCCCAAQv////8PNwIACyAAKAJMIgpBBUkNBwJAIAAoAggiB0UNACAHQX9qIQYgASgCBCEHIAEoAgghCQNAIAkgB0YNCiABIAdBAWoiCDYCBCABKAIAIAdqLQAAIQcgACAGNgIIIAAgByAAKAIEQQh0cjYCBCAIIQcgBkF/aiIGQX9HDQALCyAAQQc2AkAgACAKQXtqIgY2AkwLIAAgACgCICIHIAEoAhQgASgCEGsiCCAAKAJIIgkgCCAJSRsiCGogACgCLCIJIAkgB2sgCEsbNgIoIAEoAggiCiABKAIEIghrIQcCQAJAAkAgACgC5N0BIgkNACAGDQFBACEGCyACIAlqIAEoAgAgCGpBKiAJayIIIAYgCWsiBiAIIAZJGyIGIAcgBiAHSRsiBxCHgICAABoCQAJAIAAoAuTdASIIIAdqIgYgACgCTEcNACACIAhqIAdqQQBBPyAGaxCGgICAABogACgC5N0BIAdqIQYMAQsCQCAGQRRLDQAgACAGNgLk3QEgASABKAIEIAdqNgIEDAMLIAZBa2ohBgsgAEEANgIQIAAgAjYCDCAAIAY2AhRBByEGIAAQmoCAgABFDQMgACgCECIIIAAoAuTdASIJIAdqSw0DIAAgACgCTCAIayIGNgJMAkAgCCAJTw0AIAAgCSAIayIHNgLk3QEgAiACIAhqIAcQhYCAgAAaDAILIABBADYC5N0BIAEgASgCBCAIIAlraiIINgIEIAEoAggiCiAIayEHCwJAIAdBFUkNACAAIAg2AhAgACABKAIANgIMIAAgCkFraiAIIAZqIAcgBkEVakkbNgIUQQchBiAAEJqAgIAARQ0DIAAoAkwiByAAKAIQIgggASgCBGsiCUkNAyABIAg2AgQgACAHIAlrIgY2AkwgASgCCCAIayIHQRRLDQELIAIgASgCACAIaiAHIAYgByAGSRsiBxCHgICAABogACAHNgLk3QEgASABKAIEIAdqNgIECyAAKAIgIgYgACgCHCIIayEHAkAgACgCPEUNAAJAIAYgACgCLEcNACAAQQA2AiALIAEoAgwgASgCEGogACgCGCAIaiAHEIeAgIAAGiAAKAIgIQYLIAAgBjYCHCABIAEoAhAgB2oiCDYCECAAIAAoAkgiBiAHazYCSAJAIAYgB0cNAEEHIQYgACgCTA0CIAAoAmgNAiAAKAIEDQIgAEEANgJADAQLQQAhBiAIIAEoAhRGDQEgASgCBCABKAIIRw0FIAAoAuTdASAAKAJMTw0FDAELAkADQCAAKAJMIghFDQFBACEGIAEoAggiCSAHTQ0CIAEoAhQiCiABKAIQIgtNDQIgACAIIAkgB2siBiAKIAtrIgkgBiAJSRsiBiAAKAIsIAAoAiAiCWsiCiAGIApJGyIGIAggBiAISRsiBms2AkwgCSAAKAIYaiABKAIAIAdqIAYQhYCAgAAaIAAgACgCICAGaiIHNgIgAkAgACgCJCAHTw0AIAAgBzYCJAsCQCAAKAI8RQ0AAkAgByAAKAIsRw0AIABBADYCIAsgASgCDCABKAIQaiABKAIAIAEoAgRqIAYQhYCAgAAaIAAoAiAhBwsgACAHNgIcIAEgASgCECAGajYCECABIAEoAgQgBmoiBzYCBAwACwsgAEEANgJADAQLIAYPCyAHwEF/Sg0BIABBATYCQCAAIAdBEHRBgID8AHE2AkgCQCAHQcABSQ0AIABBBTYCRCAAQQA6AFEMAwsgAC0AUQ0DIABBBjYCRCAHQaABSQ0CIANCADcCACADQRBqQQA2AgAgA0EIakIANwIAQfgAIQcDQCAAIAdqQYAIOwEAIAdBAmoiB0Hk3QFHDQALCyAAQQU2AgggAEL/////DzcCAAwBCyAHQQJLDQEgAEKDgICAgAE3AkAMAAsLQQcPC0EAC5wYARR/IABBGGohAQJAIABBIGooAgAiAiAAQShqKAIAIgNPDQAgAEHoAGoiBCgCAEUNACABIAQgACgCVBCegICAABogACgCKCEDIAAoAiAhAgsCQCACIANPDQAgAEHYC2ohBSAAQbwNaiEGIABB3A1qIQcgAEHoAGohCCAAQeAVaiEJIABB1ABqIQoDQCAAKAIQIgsgACgCFEsNASAAIAAoAmQiDEEFdGogACgCdCACcSINQQF0aiIOQfgAaiEPAkACQCAAKAIAIgNBgICACEkNACAAKAIEIRAMAQsgACADQQh0IgM2AgAgACALQQFqIgQ2AhAgACAAKAIEQQh0IAAoAgwgC2otAAByIhA2AgQgBCELCwJAAkAgECADQQt2IA8vAQAiEWwiBE8NACAAIAQ2AgAgDyARQYAQIBFrQQV2ajsBACACQX9qIQMCQCACDQAgACgCLCADaiEDCwJAAkAgACgCJCIRDQBBACEDDAELIAEoAgAgA2otAAAhAwsgACAAKAJwIAJxIAAoAmwiD3QgA0EIIA9rdmpBgAxsakHkHWohDgJAAkAgDEEGSw0AQQEhAwNAIA4gA0EBdCIDaiEQAkACQCAAKAIAIgRBgICACEkNACAAKAIEIQwMAQsgACAEQQh0IgQ2AgAgACAAKAIQIg9BAWo2AhAgACAAKAIEQQh0IA8gACgCDGotAAByIgw2AgQLAkACQCAMIARBC3YgEC8BACIRbCIPSQ0AIAAgDCAPazYCBCAEIA9rIQ8gA0EBciEDIBEgEUEFdmshBAwBCyARQYAQIBFrQQV2aiEECyAAIA82AgAgECAEOwEAIANBgAJJDQALIAAoAiAhAgwBCyACIAAoAlQiD0F/c2ohAwJAIAIgD0sNACAAKAIsIANqIQMLAkACQCARDQBBACESDAELIAEoAgAgA2otAAAhEgtBASEDQYACIQ8DQCAOIBJBAXQiEiAPcSITIA9qIANqQQF0aiERAkACQCAEQf///wdNDQAgBCENDAELIAAgBEEIdCINNgIAIAAgC0EBaiIENgIQIAAgEEEIdCAAKAIMIAtqLQAAciIQNgIEIAQhCwsCQAJAIBAgDUELdiARLwEAIgxsIgRPIhQNACAMQYAQIAxrQQV2aiEMDAELIAAgECAEayIQNgIEIA0gBGshBCAMIAxBBXZrIQxBACEPCyAAIAQ2AgAgESAMOwEAIA8gE3MhDyADQQF0IBRyIgNBgAJJDQALCyAAIAJBAWo2AiAgACgCGCACaiADOgAAAkAgACgCJCAAKAIgIgJPDQAgACACNgIkC0EAIQMCQCAAKAJkIgRBBEkNAAJAIARBCUsNACAEQX1qIQMMAQsgBEF6aiEDCyAAIAM2AmQMAQsgACADIARrIgM2AgAgACAQIARrIgQ2AgQgDyARIBFBBXZrOwEAIAAgDEEBdGoiEkH4A2ohDwJAAkAgA0H///8HTQ0AIAshEwwBCyAAIANBCHQiAzYCACAAIAtBAWoiEzYCECAAIARBCHQgACgCDCALai0AAHIiBDYCBAsCQAJAIAQgA0ELdiAPLwEAIhBsIhFJDQAgACADIBFrIgw2AgAgACAEIBFrIgM2AgQgDyAQIBBBBXZrOwEAIBJBkARqIQ8CQAJAIAxB////B00NACATIREMAQsgACAMQQh0Igw2AgAgACATQQFqIhE2AhAgACADQQh0IAAoAgwgE2otAAByIgM2AgQLAkACQCADIAxBC3YgDy8BACIQbCIETw0AIAAgBDYCACAPIBBBgBAgEGtBBXZqOwEAIA5B2ARqIQ8CQCAEQf///wdLDQAgACAEQQh0IgQ2AgAgACARQQFqNgIQIAAgA0EIdCAAKAIMIBFqLQAAciIDNgIECwJAIAMgBEELdiAPLwEAIhBsIhFJDQAgACAEIBFrNgIAIAAgAyARazYCBCAPIBAgEEEFdms7AQAMAgsgACARNgIAIA8gEEGAECAQa0EFdmo7AQAgAEEBNgJoIABBCUELIAAoAmRBB0kbNgJkDAMLIAAgDCAEayIMNgIAIAAgAyAEayIDNgIEIA8gECAQQQV2azsBACASQagEaiEEAkACQCAMQf///wdNDQAgESEODAELIAAgDEEIdCIMNgIAIAAgEUEBaiIONgIQIAAgA0EIdCAAKAIMIBFqLQAAciIDNgIECwJAAkAgAyAMQQt2IAQvAQAiD2wiEE8NACAAIBA2AgAgBCAPQYAQIA9rQQV2ajsBACAAKAJYIQMMAQsgACAMIBBrIhE2AgAgACADIBBrIgM2AgQgBCAPIA9BBXZrOwEAIBJBwARqIQ8CQCARQf///wdLDQAgACARQQh0IhE2AgAgACAOQQFqNgIQIAAgA0EIdCAAKAIMIA5qLQAAciIDNgIECwJAAkAgAyARQQt2IA8vAQAiEGwiBE8NACAQQYAQIBBrQQV2aiEQIAAoAlwhAwwBCyAAIAMgBGs2AgQgACgCYCEDIAAgACgCXDYCYCARIARrIQQgECAQQQV2ayEQCyAAIAQ2AgAgDyAQOwEAIAAgACgCWDYCXAsgACAAKAJUNgJYIAAgAzYCVAsgAEEIQQsgACgCZEEHSRs2AmQgACAJIA0Qn4CAgAAMAQsgACARNgIAIA8gEEGAECAQa0EFdmo7AQAgACAAKAJcNgJgIAAgACkCVDcCWCAAQQdBCiAAKAJkQQdJGzYCZCAAIAcgDRCfgICAACAKIAAoAmgiA0F+akEDIANBBkkbQQd0akGEB2ohDUEBIQMDQCANIANBAXQiA2ohEAJAAkAgACgCACIEQYCAgAhJDQAgACgCBCEMDAELIAAgBEEIdCIENgIAIAAgACgCECIPQQFqNgIQIAAgACgCBEEIdCAPIAAoAgxqLQAAciIMNgIECwJAAkAgDCAEQQt2IBAvAQAiEWwiD0kNACAAIAwgD2s2AgQgBCAPayEPIANBAXIhAyARIBFBBXZrIQQMAQsgEUGAECARa0EFdmohBAsgACAPNgIAIBAgBDsBACADQcAASQ0ACwJAIANBQGoiBEEDSw0AIAAgBDYCVAwBCyAAIANBAXFBAnIiDzYCVCAEQQF2IRACQCAEQQ1LDQAgACAPIBBBf2oiDnQiBDYCVEEBIQ8gBSAEQQF0akHAACADa0EBdGpBfmohEkEAIQwDQCASIA9BAXQiD2ohEAJAAkAgACgCACIDQYCAgAhJDQAgACgCBCENDAELIAAgA0EIdCIDNgIAIAAgACgCECIEQQFqNgIQIAAgACgCBEEIdCAEIAAoAgxqLQAAciINNgIECwJAAkAgDSADQQt2IBAvAQAiEWwiBEkNACAAIA0gBGs2AgQgACAAKAJUQQEgDHRqNgJUIAMgBGshBCAPQQFyIQ8gESARQQV2ayEDDAELIBFBgBAgEWtBBXZqIQMLIAAgBDYCACAQIAM7AQAgDiAMQQFqIgxHDQAMAgsLIBBBe2ohECAAKAIEIQQgACgCACEDA0ACQCADQf///wdLDQAgACADQQh0IgM2AgAgACAAKAIQIhFBAWo2AhAgBEEIdCARIAAoAgxqLQAAciEECyAAIANBAXYiAzYCACAAIAQgA2siBEEfdSIRIA9BAXRqQQFqIg82AlQgACARIANxIARqIgQ2AgQgEEF/aiIQDQALIAAgD0EEdDYCVEEAIQxBASEPA0AgBiAPQQF0Ig9qIRACQAJAIAAoAgAiA0GAgIAISQ0AIAAoAgQhDQwBCyAAIANBCHQiAzYCACAAIAAoAhAiBEEBajYCECAAIAAoAgRBCHQgBCAAKAIMai0AAHIiDTYCBAsCQAJAIA0gA0ELdiAQLwEAIhFsIgRJDQAgACANIARrNgIEIAAgACgCVEEBIAx0ajYCVCADIARrIQQgD0EBciEPIBEgEUEFdmshAwwBCyARQYAQIBFrQQV2aiEDCyAAIAQ2AgAgECADOwEAIAxBAWoiDEEERw0ACwsCQCABIAggACgCVBCegICAAA0AQQAPCyAAKAIgIQILIAIgACgCKEkNAAsLQQEhAwJAIAAoAgAiBEH///8HSw0AIAAgBEEIdDYCAEEBIQMgACAAKAIQIgRBAWo2AhAgACAAKAIEQQh0IAQgACgCDGotAAByNgIECyADC3ABAX8CQEGo3gEQgICAgAAiAkUNACACQTRqIAE2AgAgAkE8aiAANgIAAkACQAJAIABBf2oOAgABAgsgAiABEICAgIAAIgA2AhggAA0BIAIQgoCAgAAMAgsgAkEANgIYIAJBOGpBADYCAAsgAg8LQQAL0gEBAn9BBiECAkAgAUEnSw0AIABBMGogAUEBcUECciABQQF2QQtqdCIBNgIAAkACQCAAQTxqKAIAIgNFDQBBBCECIAEgAEE0aigCAEsNAiAAQSxqIAE2AgAgA0ECRw0AIABBOGoiAygCACABTw0AIAAgATYCOCAAKAIYEIKAgIAAIAAgACgCMBCAgICAACIBNgIYIAENAEEDIQIMAQtBACECIABBADYCQCAAQdAAakEBOgAAIABB6ABqQQA2AgAgAEHk3QFqIQMLIANBADYCAAsgAgsjAAJAIABBPGooAgBFDQAgACgCGBCCgICAAAsgABCCgICAAAvHAQEDf0EAIQMCQCAAKAIMIAJNDQAgACgCGCACTQ0AIAEgASgCACIDIAAoAhAgACgCCCIEayIFIAMgBSADSRsiBWs2AgAgBCACQX9zaiEDAkAgBCACSw0AIAAoAhQgA2ohAwsDQCAAKAIAIgIgA2otAAAhASAAIAAoAggiBEEBajYCCCACIARqIAE6AABBACADQQFqIgMgAyAAKAIURhshAyAFQX9qIgUNAAtBASEDIAAoAgwgACgCCCIFTw0AIAAgBTYCDAsgAwvoBAEGfwJAAkAgACgCACIDQYCAgAhJDQAgACgCBCEEDAELIAAgA0EIdCIDNgIAIAAgACgCECIFQQFqNgIQIAAgACgCBEEIdCAFIAAoAgxqLQAAciIENgIECwJAAkAgBCADQQt2IAEvAQAiBWwiBk8NACAAIAY2AgAgASAFQYAQIAVrQQV2ajsBACABIAJBBHRqQQRqIQdBCCEIQQIhAQwBCyAAIAMgBmsiAzYCACAAIAQgBmsiBDYCBCABIAUgBUEFdms7AQACQCADQf///wdLDQAgACADQQh0IgM2AgAgACAAKAIQIgVBAWo2AhAgACAEQQh0IAUgACgCDGotAAByIgQ2AgQLAkAgBCADQQt2IAEvAQIiBWwiBk8NACAAIAY2AgAgASAFQYAQIAVrQQV2ajsBAiABIAJBBHRqQYQCaiEHQQghCEEKIQEMAQsgACADIAZrNgIAIAAgBCAGazYCBCABIAUgBUEFdms7AQIgAUGEBGohB0GAAiEIQRIhAQsgAEHoAGogATYCAEEBIQEDQCAHIAFBAXQiAWohBAJAAkAgACgCACIDQYCAgAhJDQAgACgCBCECDAELIAAgA0EIdCIDNgIAIAAgACgCECIFQQFqNgIQIAAgACgCBEEIdCAFIAAoAgxqLQAAciICNgIECwJAAkAgAiADQQt2IAQvAQAiBmwiBUkNACAAIAIgBWs2AgQgAyAFayEFIAFBAXIhASAGIAZBBXZrIQMMAQsgBkGAECAGa0EFdmohAwsgACAFNgIAIAQgAzsBACABIAhJDQALIABB6ABqIgAgASAIayAAKAIAajYCAAsLNQEAQYAICy4IAAAAEAAAABgAAAAgAAAAKAAAADAAAABAAAAAUAAAAIAAAAAAAQAA/Td6WFoA\";\n\n/***/ }),\n/* 2 */\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__2__;\n\n/***/ })\n/******/ \t]);\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XzReadableStream: () => (/* binding */ XzReadableStream)\n/* harmony export */ });\n/* harmony import */ var _dist_native_xz_decompress_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n\n\nconst ReadableStream = globalThis.ReadableStream\n    // Node < 18 support web streams, but it's not available as a global, so we need to require it.\n    // This won't be reached in modern browsers, and bundlers will ignore due to 'browser' field in package.json:\n    || (__webpack_require__(2).ReadableStream);\n\nconst XZ_OK = 0;\nconst XZ_STREAM_END = 1;\n\nclass XzContext {\n    constructor(moduleInstance) {\n        this.exports = moduleInstance.exports;\n        this.memory = this.exports.memory;\n        this.ptr = this.exports.create_context();\n        this._refresh();\n        this.bufSize = this.mem32[0];\n        this.inStart = this.mem32[1] - this.ptr;\n        this.inEnd = this.inStart + this.bufSize;\n        this.outStart = this.mem32[4] - this.ptr;\n    }\n\n    supplyInput(sourceDataUint8Array) {\n        this._refresh();\n        const inBuffer = this.mem8.subarray(this.inStart, this.inEnd);\n        inBuffer.set(sourceDataUint8Array, 0);\n        this.exports.supply_input(this.ptr, sourceDataUint8Array.byteLength);\n        this._refresh();\n    }\n\n    getNextOutput() {\n        const result = this.exports.get_next_output(this.ptr);\n        this._refresh();\n        if (result !== XZ_OK && result !== XZ_STREAM_END) {\n            throw new Error(`get_next_output failed with error code ${result}`);\n        }\n        const outChunk = this.mem8.slice(this.outStart, this.outStart + /* outPos */ this.mem32[5]);\n        return { outChunk, finished: result === XZ_STREAM_END };\n    }\n\n    needsMoreInput() {\n        return /* inPos */ this.mem32[2] === /* inSize */ this.mem32[3];\n    }\n\n    outputBufferIsFull() {\n        return /* outPos */ this.mem32[5] === this.bufSize;\n    }\n\n    resetOutputBuffer() {\n        this.outPos = this.mem32[5] = 0;\n    }\n\n    dispose() {\n        this.exports.destroy_context(this.ptr);\n        this.exports = null;\n    }\n\n    _refresh() {\n        if (this.memory.buffer !== this.mem8?.buffer) {\n            this.mem8 = new Uint8Array(this.memory.buffer, this.ptr);\n            this.mem32 = new Uint32Array(this.memory.buffer, this.ptr);\n        }\n    }\n}\n\n// Simple mutex to serialize context creation and prevent resource exhaustion\nclass ContextMutex {\n    constructor() {\n        this.locked = false;\n        this.waitQueue = [];\n    }\n\n    async acquire() {\n        if (!this.locked) {\n            this.locked = true;\n            return;\n        }\n\n        // Wait in queue\n        return new Promise((resolve) => {\n            this.waitQueue.push(resolve);\n        });\n    }\n\n    release() {\n        if (this.waitQueue.length > 0) {\n            const next = this.waitQueue.shift();\n            next();\n        } else {\n            this.locked = false;\n        }\n    }\n}\n\nclass XzReadableStream extends ReadableStream {\n    static _moduleInstancePromise;\n    static _moduleInstance;\n    static _contextMutex = new ContextMutex();\n\n    static async _getModuleInstance() {\n        const base64Wasm = _dist_native_xz_decompress_wasm__WEBPACK_IMPORTED_MODULE_0__.replace('data:application/wasm;base64,', '');\n        const wasmBytes = Uint8Array.from(atob(base64Wasm), c => c.charCodeAt(0)).buffer;\n        const wasmOptions = {};\n        const module = await WebAssembly.instantiate(wasmBytes, wasmOptions);\n        XzReadableStream._moduleInstance = module.instance;\n    }\n\n    constructor(compressedStream) {\n        let xzContext;\n        let unconsumedInput = null;\n        const compressedReader = compressedStream.getReader();\n\n        super({\n            async start(controller) {\n                await XzReadableStream._contextMutex.acquire();\n\n                try {\n                    if (!XzReadableStream._moduleInstance) {\n                        await (XzReadableStream._moduleInstancePromise || (XzReadableStream._moduleInstancePromise = XzReadableStream._getModuleInstance()));\n                    }\n                    xzContext = new XzContext(XzReadableStream._moduleInstance);\n                } catch (error) {\n                    XzReadableStream._contextMutex.release();\n                    throw error;\n                }\n            },\n\n            async pull(controller) {\n                try {\n                    if (xzContext.needsMoreInput()) {\n                        if (unconsumedInput === null || unconsumedInput.byteLength === 0) {\n                            const { done, value } = await compressedReader.read();\n                            if (!done) {\n                                unconsumedInput = value;\n                            }\n                        }\n                        const nextInputLength = Math.min(xzContext.bufSize, unconsumedInput.byteLength);\n                        xzContext.supplyInput(unconsumedInput.subarray(0, nextInputLength));\n                        unconsumedInput = unconsumedInput.subarray(nextInputLength);\n                    }\n\n                    const nextOutputResult = xzContext.getNextOutput();\n                    controller.enqueue(nextOutputResult.outChunk);\n                    xzContext.resetOutputBuffer();\n\n                    if (nextOutputResult.finished) {\n                        xzContext.dispose();\n                        XzReadableStream._contextMutex.release();\n                        controller.close();\n                    }\n                } catch (error) {\n                    if (xzContext) {\n                        xzContext.dispose();\n                    }\n                    XzReadableStream._contextMutex.release();\n                    throw error;\n                }\n            },\n            cancel() {\n                try {\n                    if (xzContext) {\n                        xzContext.dispose();\n                    }\n                    return compressedReader.cancel();\n                } finally {\n                    XzReadableStream._contextMutex.release();\n                }\n            }\n        });\n    }\n}\n\n})();\n\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});","export class CramError extends Error {\n}\n/** Error caused by encountering a part of the CRAM spec that has not yet been implemented */\nexport class CramUnimplementedError extends Error {\n}\n/** An error caused by malformed data.  */\nexport class CramMalformedError extends CramError {\n}\n/**\n * An error caused by data being too big, exceeding a size limit.\n */\nexport class CramSizeLimitError extends CramError {\n}\n/**\n * An invalid argument was supplied to a cram-js method or object.\n */\nexport class CramArgumentError extends CramError {\n}\n//# sourceMappingURL=errors.js.map","// from https://www.xaymar.com/articles/2020/12/08/fastest-uint8array-to-hex-string-conversion-in-javascript/\n// Pre-Init\nconst LUT_HEX_4b = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n];\nconst LUT_HEX_8b = new Array(0x100);\nfor (let n = 0; n < 0x100; n++) {\n    LUT_HEX_8b[n] = `${LUT_HEX_4b[(n >>> 4) & 0xf]}${LUT_HEX_4b[n & 0xf]}`;\n}\n// End Pre-Init\nexport function toHex(buffer) {\n    let out = '';\n    for (let idx = 0, edx = buffer.length; idx < edx; idx++) {\n        out += LUT_HEX_8b[buffer[idx]];\n    }\n    return out;\n}\n//# sourceMappingURL=toHex.js.map","/*\nnode-bzip - a pure-javascript Node.JS module for decoding bzip2 data\n\nCopyright (C) 2012 Eli Skeggs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nAdapted from bzip2.js, copyright 2011 antimatter15 (antimatter15@gmail.com).\n\nBased on micro-bunzip by Rob Landley (rob@landley.net).\n\nBased on bzip2 decompression code by Julian R Seward (jseward@acm.org),\nwhich also acknowledges contributions by Mike Burrows, David Wheeler,\nPeter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,\nRobert Sedgewick, and Jon L. Bentley.\n*/\nimport { toHex } from \"./toHex.js\";\nconst BITMASK = [0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff];\nexport default class BitReader {\n    constructor(stream) {\n        this.stream = stream;\n        this.bitOffset = 0;\n        this.curByte = 0;\n        this.hasByte = false;\n    }\n    _ensureByte() {\n        if (!this.hasByte) {\n            this.curByte = this.stream.readByte();\n            this.hasByte = true;\n        }\n    }\n    /**\n     * Reads bits from the buffer\n     * @param bits Number of bits to read\n     */\n    read(bits) {\n        let result = 0;\n        while (bits > 0) {\n            this._ensureByte();\n            const remaining = 8 - this.bitOffset;\n            // if we're in a byte\n            if (bits >= remaining) {\n                result <<= remaining;\n                result |= BITMASK[remaining] & this.curByte;\n                this.hasByte = false;\n                this.bitOffset = 0;\n                bits -= remaining;\n            }\n            else {\n                result <<= bits;\n                const shift = remaining - bits;\n                result |= (this.curByte & (BITMASK[bits] << shift)) >> shift;\n                this.bitOffset += bits;\n                bits = 0;\n            }\n        }\n        return result;\n    }\n    /**\n     * Seek to an arbitrary point in the buffer (expressed in bits)\n     * @param pos Position in bits\n     */\n    seek(pos) {\n        const n_bit = pos % 8;\n        const n_byte = (pos - n_bit) / 8;\n        this.bitOffset = n_bit;\n        this.stream.seek(n_byte);\n        this.hasByte = false;\n    }\n    /**\n     * Reads 6 bytes worth of data using the read method\n     */\n    pi() {\n        const buf = new Uint8Array(6);\n        for (let i = 0; i < buf.length; i++) {\n            buf[i] = this.read(8);\n        }\n        return toHex(buf);\n    }\n}\n//# sourceMappingURL=bitreader.js.map","/* CRC32, used in Bzip2 implementation.\n * This is a port of CRC32.java from the jbzip2 implementation at\n *   https://code.google.com/p/jbzip2\n * which is:\n *   Copyright (c) 2011 Matthew Francis\n *\n *   Permission is hereby granted, free of charge, to any person\n *   obtaining a copy of this software and associated documentation\n *   files (the \"Software\"), to deal in the Software without\n *   restriction, including without limitation the rights to use,\n *   copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the\n *   Software is furnished to do so, subject to the following\n *   conditions:\n *\n *   The above copyright notice and this permission notice shall be\n *   included in all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n *   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n *   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n *   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n *   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n *   OTHER DEALINGS IN THE SOFTWARE.\n * This JavaScript implementation is:\n *   Copyright (c) 2013 C. Scott Ananian\n * with the same licensing terms as Matthew Francis' original implementation.\n */\n/**\n * A static CRC lookup table\n */\nconst crc32Lookup = new Uint32Array([\n    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b,\n    0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,\n    0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70, 0x48d0c6c7,\n    0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3,\n    0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,\n    0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef,\n    0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb,\n    0xceb42022, 0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,\n    0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0,\n    0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4,\n    0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,\n    0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08,\n    0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc,\n    0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,\n    0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050,\n    0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34,\n    0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,\n    0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56, 0x4bc510e1,\n    0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5,\n    0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,\n    0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9,\n    0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd,\n    0xcda1f604, 0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,\n    0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71,\n    0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2,\n    0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,\n    0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e,\n    0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a,\n    0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,\n    0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676,\n    0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662,\n    0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,\n    0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4,\n]);\nexport default class CRC32 {\n    /**\n     * Constructor initializes the CRC value\n     */\n    constructor() {\n        this.crc = 0xffffffff;\n    }\n    /**\n     * @return The current CRC\n     */\n    getCRC() {\n        return ~this.crc >>> 0; // return an unsigned value\n    }\n    /**\n     * Update the CRC with a single byte\n     * @param value The value to update the CRC with\n     */\n    updateCRC(value) {\n        this.crc =\n            (this.crc << 8) ^ crc32Lookup[((this.crc >>> 24) ^ value) & 0xff];\n    }\n    /**\n     * Update the CRC with a sequence of identical bytes\n     * @param value The value to update the CRC with\n     * @param count The number of bytes\n     */\n    updateCRCRun(value, count) {\n        while (count-- > 0) {\n            this.crc =\n                (this.crc << 8) ^ crc32Lookup[((this.crc >>> 24) ^ value) & 0xff];\n        }\n    }\n}\n//# sourceMappingURL=crc32.js.map","// @ts-nocheck\nexport default class Stream {\n    readByte() {\n        throw new Error('abstract method readByte() not implemented');\n    }\n    read(buffer, bufOffset, length) {\n        let bytesRead = 0;\n        while (bytesRead < length) {\n            const c = this.readByte();\n            if (c < 0) {\n                // EOF\n                return bytesRead === 0 ? -1 : bytesRead;\n            }\n            buffer[bufOffset++] = c;\n            bytesRead++;\n        }\n        return bytesRead;\n    }\n    writeByte(_byte) {\n        throw new Error('abstract method readByte() not implemented');\n    }\n    seek(new_pos) {\n        throw new Error('abstract method seek() not implemented');\n    }\n    write(buffer, bufOffset, length) {\n        let i;\n        for (i = 0; i < length; i++) {\n            this.writeByte(buffer[bufOffset++]);\n        }\n        return length;\n    }\n    flush() { }\n}\n//# sourceMappingURL=stream.js.map","// @ts-nocheck\n/*\nseek-bzip - a pure-javascript module for seeking within bzip2 data\n\nCopyright (C) 2013 C. Scott Ananian\nCopyright (C) 2012 Eli Skeggs\nCopyright (C) 2011 Kevin Kwok\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nAdapted from node-bzip, copyright 2012 Eli Skeggs.\nAdapted from bzip2.js, copyright 2011 Kevin Kwok (antimatter15@gmail.com).\n\nBased on micro-bunzip by Rob Landley (rob@landley.net).\n\nBased on bzip2 decompression code by Julian R Seward (jseward@acm.org),\nwhich also acknowledges contributions by Mike Burrows, David Wheeler,\nPeter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,\nRobert Sedgewick, and Jon L. Bentley.\n*/\nimport BitReader from \"./bitreader.js\";\nimport CRC32 from \"./crc32.js\";\nimport Stream from \"./stream.js\";\nconst MAX_HUFCODE_BITS = 20;\nconst MAX_SYMBOLS = 258;\nconst SYMBOL_RUNA = 0;\nconst SYMBOL_RUNB = 1;\nconst MIN_GROUPS = 2;\nconst MAX_GROUPS = 6;\nconst GROUP_SIZE = 50;\nconst WHOLEPI = '314159265359';\nconst SQRTPI = '177245385090';\nconst mtf = function (array, index) {\n    const src = array[index];\n    for (let i = index; i > 0; i--) {\n        array[i] = array[i - 1];\n    }\n    array[0] = src;\n    return src;\n};\nconst Err = {\n    OK: 0,\n    LAST_BLOCK: -1,\n    NOT_BZIP_DATA: -2,\n    UNEXPECTED_INPUT_EOF: -3,\n    UNEXPECTED_OUTPUT_EOF: -4,\n    DATA_ERROR: -5,\n    OUT_OF_MEMORY: -6,\n    OBSOLETE_INPUT: -7,\n    END_OF_BLOCK: -8,\n};\nconst ErrorMessages = {};\nErrorMessages[Err.LAST_BLOCK] = 'Bad file checksum';\nErrorMessages[Err.NOT_BZIP_DATA] = 'Not bzip data';\nErrorMessages[Err.UNEXPECTED_INPUT_EOF] = 'Unexpected input EOF';\nErrorMessages[Err.UNEXPECTED_OUTPUT_EOF] = 'Unexpected output EOF';\nErrorMessages[Err.DATA_ERROR] = 'Data error';\nErrorMessages[Err.OUT_OF_MEMORY] = 'Out of memory';\nErrorMessages[Err.OBSOLETE_INPUT] =\n    'Obsolete (pre 0.9.5) bzip format not supported.';\nconst _throw = function (status, optDetail) {\n    let msg = ErrorMessages[status] || 'unknown error';\n    if (optDetail) {\n        msg += ': ' + optDetail;\n    }\n    const e = new TypeError(msg);\n    e.errorCode = status;\n    throw e;\n};\nclass Bunzip {\n    constructor(inputStream, outputStream) {\n        this.writePos = this.writeCurrent = this.writeCount = 0;\n        this._start_bunzip(inputStream, outputStream);\n    }\n    _init_block() {\n        const moreBlocks = this._get_next_block();\n        if (!moreBlocks) {\n            this.writeCount = -1;\n            return false; /* no more blocks */\n        }\n        this.blockCRC = new CRC32();\n        return true;\n    }\n    /* XXX micro-bunzip uses (inputStream, inputBuffer, len) as arguments */\n    _start_bunzip(inputStream, outputStream) {\n        /* Ensure that file starts with \"BZh['1'-'9'].\" */\n        const buf = new Uint8Array(4);\n        if (inputStream.read(buf, 0, 4) !== 4 ||\n            String.fromCharCode(buf[0], buf[1], buf[2]) !== 'BZh') {\n            _throw(Err.NOT_BZIP_DATA, 'bad magic');\n        }\n        const level = buf[3] - 0x30;\n        if (level < 1 || level > 9) {\n            _throw(Err.NOT_BZIP_DATA, 'level out of range');\n        }\n        this.reader = new BitReader(inputStream);\n        /* Fourth byte (ascii '1'-'9'), indicates block size in units of 100k of\n         uncompressed data.  Allocate intermediate buffer for block. */\n        this.dbufSize = 100000 * level;\n        this.nextoutput = 0;\n        this.outputStream = outputStream;\n        this.streamCRC = 0;\n    }\n    _get_next_block() {\n        let i, j, k;\n        const reader = this.reader;\n        // this is get_next_block() function from micro-bunzip:\n        /* Read in header signature and CRC, then validate signature.\n         (last block signature means CRC is for whole file, return now) */\n        const h = reader.pi();\n        if (h === SQRTPI) {\n            // last block\n            return false; /* no more blocks */\n        }\n        if (h !== WHOLEPI) {\n            _throw(Err.NOT_BZIP_DATA);\n        }\n        this.targetBlockCRC = reader.read(32) >>> 0; // (convert to unsigned)\n        this.streamCRC =\n            (this.targetBlockCRC ^\n                ((this.streamCRC << 1) | (this.streamCRC >>> 31))) >>>\n                0;\n        /* We can add support for blockRandomised if anybody complains.  There was\n         some code for this in busybox 1.0.0-pre3, but nobody ever noticed that\n         it didn't actually work. */\n        if (reader.read(1)) {\n            _throw(Err.OBSOLETE_INPUT);\n        }\n        const origPointer = reader.read(24);\n        if (origPointer > this.dbufSize) {\n            _throw(Err.DATA_ERROR, 'initial position out of bounds');\n        }\n        /* mapping table: if some byte values are never used (encoding things\n         like ascii text), the compression code removes the gaps to have fewer\n         symbols to deal with, and writes a sparse bitfield indicating which\n         values were present.  We make a translation table to convert the symbols\n         back to the corresponding bytes. */\n        let t = reader.read(16);\n        let symToByte = new Uint8Array(256), symTotal = 0;\n        for (i = 0; i < 16; i++) {\n            if (t & (1 << (0xf - i))) {\n                const o = i * 16;\n                k = reader.read(16);\n                for (j = 0; j < 16; j++) {\n                    if (k & (1 << (0xf - j))) {\n                        symToByte[symTotal++] = o + j;\n                    }\n                }\n            }\n        }\n        /* How many different huffman coding groups does this block use? */\n        const groupCount = reader.read(3);\n        if (groupCount < MIN_GROUPS || groupCount > MAX_GROUPS) {\n            _throw(Err.DATA_ERROR);\n        }\n        /* nSelectors: Every GROUP_SIZE many symbols we select a new huffman coding\n         group.  Read in the group selector list, which is stored as MTF encoded\n         bit runs.  (MTF=Move To Front, as each value is used it's moved to the\n         start of the list.) */\n        const nSelectors = reader.read(15);\n        if (nSelectors === 0) {\n            _throw(Err.DATA_ERROR);\n        }\n        const mtfSymbol = new Uint8Array(256);\n        for (i = 0; i < groupCount; i++) {\n            mtfSymbol[i] = i;\n        }\n        const selectors = new Uint8Array(nSelectors); // was 32768...\n        for (i = 0; i < nSelectors; i++) {\n            /* Get next value */\n            for (j = 0; reader.read(1); j++) {\n                if (j >= groupCount) {\n                    _throw(Err.DATA_ERROR);\n                }\n            }\n            /* Decode MTF to get the next selector */\n            selectors[i] = mtf(mtfSymbol, j);\n        }\n        /* Read the huffman coding tables for each group, which code for symTotal\n         literal symbols, plus two run symbols (RUNA, RUNB) */\n        let symCount = symTotal + 2;\n        let groups = [], hufGroup;\n        for (j = 0; j < groupCount; j++) {\n            const length = new Uint8Array(symCount), temp = new Uint16Array(MAX_HUFCODE_BITS + 1);\n            /* Read huffman code lengths for each symbol.  They're stored in\n             a way similar to mtf; record a starting value for the first symbol,\n             and an offset from the previous value for everys symbol after that. */\n            t = reader.read(5); // lengths\n            for (i = 0; i < symCount; i++) {\n                for (;;) {\n                    if (t < 1 || t > MAX_HUFCODE_BITS) {\n                        _throw(Err.DATA_ERROR);\n                    }\n                    /* If first bit is 0, stop.  Else second bit indicates whether\n                     to increment or decrement the value. */\n                    if (!reader.read(1)) {\n                        break;\n                    }\n                    if (!reader.read(1)) {\n                        t++;\n                    }\n                    else {\n                        t--;\n                    }\n                }\n                length[i] = t;\n            }\n            /* Find largest and smallest lengths in this group */\n            var minLen, maxLen;\n            minLen = maxLen = length[0];\n            for (i = 1; i < symCount; i++) {\n                if (length[i] > maxLen) {\n                    maxLen = length[i];\n                }\n                else if (length[i] < minLen) {\n                    minLen = length[i];\n                }\n            }\n            /* Calculate permute[], base[], and limit[] tables from length[].\n             *\n             * permute[] is the lookup table for converting huffman coded symbols\n             * into decoded symbols.  base[] is the amount to subtract from the\n             * value of a huffman symbol of a given length when using permute[].\n             *\n             * limit[] indicates the largest numerical value a symbol with a given\n             * number of bits can have.  This is how the huffman codes can vary in\n             * length: each code with a value>limit[length] needs another bit.\n             */\n            hufGroup = {};\n            groups.push(hufGroup);\n            hufGroup.permute = new Uint16Array(MAX_SYMBOLS);\n            hufGroup.limit = new Uint32Array(MAX_HUFCODE_BITS + 2);\n            hufGroup.base = new Uint32Array(MAX_HUFCODE_BITS + 1);\n            hufGroup.minLen = minLen;\n            hufGroup.maxLen = maxLen;\n            /* Calculate permute[].  Concurrently, initialize temp[] and limit[]. */\n            let pp = 0;\n            for (i = minLen; i <= maxLen; i++) {\n                temp[i] = hufGroup.limit[i] = 0;\n                for (t = 0; t < symCount; t++) {\n                    if (length[t] === i) {\n                        hufGroup.permute[pp++] = t;\n                    }\n                }\n            }\n            /* Count symbols coded for at each bit length */\n            for (i = 0; i < symCount; i++) {\n                temp[length[i]]++;\n            }\n            /* Calculate limit[] (the largest symbol-coding value at each bit\n             * length, which is (previous limit<<1)+symbols at this level), and\n             * base[] (number of symbols to ignore at each bit length, which is\n             * limit minus the cumulative count of symbols coded for already). */\n            pp = t = 0;\n            for (i = minLen; i < maxLen; i++) {\n                pp += temp[i];\n                /* We read the largest possible symbol size and then unget bits\n                 after determining how many we need, and those extra bits could\n                 be set to anything.  (They're noise from future symbols.)  At\n                 each level we're really only interested in the first few bits,\n                 so here we set all the trailing to-be-ignored bits to 1 so they\n                 don't affect the value>limit[length] comparison. */\n                hufGroup.limit[i] = pp - 1;\n                pp <<= 1;\n                t += temp[i];\n                hufGroup.base[i + 1] = pp - t;\n            }\n            hufGroup.limit[maxLen + 1] =\n                Number.MAX_VALUE; /* Sentinel value for reading next sym. */\n            hufGroup.limit[maxLen] = pp + temp[maxLen] - 1;\n            hufGroup.base[minLen] = 0;\n        }\n        /* We've finished reading and digesting the block header.  Now read this\n         block's huffman coded symbols from the file and undo the huffman coding\n         and run length encoding, saving the result into dbuf[dbufCount++]=uc */\n        /* Initialize symbol occurrence counters and symbol Move To Front table */\n        const byteCount = new Uint32Array(256);\n        for (i = 0; i < 256; i++) {\n            mtfSymbol[i] = i;\n        }\n        /* Loop through compressed symbols. */\n        let runPos = 0, dbufCount = 0, selector = 0, uc;\n        const dbuf = (this.dbuf = new Uint32Array(this.dbufSize));\n        symCount = 0;\n        for (;;) {\n            /* Determine which huffman coding group to use. */\n            if (!symCount--) {\n                symCount = GROUP_SIZE - 1;\n                if (selector >= nSelectors) {\n                    _throw(Err.DATA_ERROR);\n                }\n                hufGroup = groups[selectors[selector++]];\n            }\n            /* Read next huffman-coded symbol. */\n            i = hufGroup.minLen;\n            j = reader.read(i);\n            for (;; i++) {\n                if (i > hufGroup.maxLen) {\n                    _throw(Err.DATA_ERROR);\n                }\n                if (j <= hufGroup.limit[i]) {\n                    break;\n                }\n                j = (j << 1) | reader.read(1);\n            }\n            /* Huffman decode value to get nextSym (with bounds checking) */\n            j -= hufGroup.base[i];\n            if (j < 0 || j >= MAX_SYMBOLS) {\n                _throw(Err.DATA_ERROR);\n            }\n            const nextSym = hufGroup.permute[j];\n            /* We have now decoded the symbol, which indicates either a new literal\n             byte, or a repeated run of the most recent literal byte.  First,\n             check if nextSym indicates a repeated run, and if so loop collecting\n             how many times to repeat the last literal. */\n            if (nextSym === SYMBOL_RUNA || nextSym === SYMBOL_RUNB) {\n                /* If this is the start of a new run, zero out counter */\n                if (!runPos) {\n                    runPos = 1;\n                    t = 0;\n                }\n                /* Neat trick that saves 1 symbol: instead of or-ing 0 or 1 at\n                 each bit position, add 1 or 2 instead.  For example,\n                 1011 is 1<<0 + 1<<1 + 2<<2.  1010 is 2<<0 + 2<<1 + 1<<2.\n                 You can make any bit pattern that way using 1 less symbol than\n                 the basic or 0/1 method (except all bits 0, which would use no\n                 symbols, but a run of length 0 doesn't mean anything in this\n                 context).  Thus space is saved. */\n                t += nextSym === SYMBOL_RUNA ? runPos : 2 * runPos;\n                runPos <<= 1;\n                continue;\n            }\n            /* When we hit the first non-run symbol after a run, we now know\n             how many times to repeat the last literal, so append that many\n             copies to our buffer of decoded symbols (dbuf) now.  (The last\n             literal used is the one at the head of the mtfSymbol array.) */\n            if (runPos) {\n                runPos = 0;\n                if (dbufCount + t > this.dbufSize) {\n                    _throw(Err.DATA_ERROR);\n                }\n                uc = symToByte[mtfSymbol[0]];\n                byteCount[uc] += t;\n                while (t--) {\n                    dbuf[dbufCount++] = uc;\n                }\n            }\n            /* Is this the terminating symbol? */\n            if (nextSym > symTotal) {\n                break;\n            }\n            /* At this point, nextSym indicates a new literal character.  Subtract\n             one to get the position in the MTF array at which this literal is\n             currently to be found.  (Note that the result can't be -1 or 0,\n             because 0 and 1 are RUNA and RUNB.  But another instance of the\n             first symbol in the mtf array, position 0, would have been handled\n             as part of a run above.  Therefore 1 unused mtf position minus\n             2 non-literal nextSym values equals -1.) */\n            if (dbufCount >= this.dbufSize) {\n                _throw(Err.DATA_ERROR);\n            }\n            i = nextSym - 1;\n            uc = mtf(mtfSymbol, i);\n            uc = symToByte[uc];\n            /* We have our literal byte.  Save it into dbuf. */\n            byteCount[uc]++;\n            dbuf[dbufCount++] = uc;\n        }\n        /* At this point, we've read all the huffman-coded symbols (and repeated\n         runs) for this block from the input stream, and decoded them into the\n         intermediate buffer.  There are dbufCount many decoded bytes in dbuf[].\n         Now undo the Burrows-Wheeler transform on dbuf.\n         See http://dogma.net/markn/articles/bwt/bwt.htm\n      */\n        if (origPointer < 0 || origPointer >= dbufCount) {\n            _throw(Err.DATA_ERROR);\n        }\n        /* Turn byteCount into cumulative occurrence counts of 0 to n-1. */\n        j = 0;\n        for (i = 0; i < 256; i++) {\n            k = j + byteCount[i];\n            byteCount[i] = j;\n            j = k;\n        }\n        /* Figure out what order dbuf would be in if we sorted it. */\n        for (i = 0; i < dbufCount; i++) {\n            uc = dbuf[i] & 0xff;\n            dbuf[byteCount[uc]] |= i << 8;\n            byteCount[uc]++;\n        }\n        /* Decode first byte by hand to initialize \"previous\" byte.  Note that it\n         doesn't get output, and if the first three characters are identical\n         it doesn't qualify as a run (hence writeRunCountdown=5). */\n        let pos = 0, current = 0, run = 0;\n        if (dbufCount) {\n            pos = dbuf[origPointer];\n            current = pos & 0xff;\n            pos >>= 8;\n            run = -1;\n        }\n        this.writePos = pos;\n        this.writeCurrent = current;\n        this.writeCount = dbufCount;\n        this.writeRun = run;\n        return true; /* more blocks to come */\n    }\n    /* Undo burrows-wheeler transform on intermediate buffer to produce output.\n     If start_bunzip was initialized with out_fd=-1, then up to len bytes of\n     data are written to outbuf.  Return value is number of bytes written or\n     error (all errors are negative numbers).  If out_fd!=-1, outbuf and len\n     are ignored, data is written to out_fd and return is RETVAL_OK or error.\n  */\n    _read_bunzip(outputBuffer, len) {\n        let copies, previous, outbyte;\n        /* james@jamestaylor.org: writeCount goes to -1 when the buffer is fully\n           decoded, which results in this returning RETVAL_LAST_BLOCK, also\n           equal to -1... Confusing, I'm returning 0 here to indicate no\n           bytes written into the buffer */\n        if (this.writeCount < 0) {\n            return 0;\n        }\n        const gotcount = 0;\n        let dbuf = this.dbuf, pos = this.writePos, current = this.writeCurrent;\n        let dbufCount = this.writeCount, outputsize = this.outputsize;\n        let run = this.writeRun;\n        while (dbufCount) {\n            dbufCount--;\n            previous = current;\n            pos = dbuf[pos];\n            current = pos & 0xff;\n            pos >>= 8;\n            if (run++ === 3) {\n                copies = current;\n                outbyte = previous;\n                current = -1;\n            }\n            else {\n                copies = 1;\n                outbyte = current;\n            }\n            this.blockCRC.updateCRCRun(outbyte, copies);\n            while (copies--) {\n                this.outputStream.writeByte(outbyte);\n                this.nextoutput++;\n            }\n            if (current != previous) {\n                run = 0;\n            }\n        }\n        this.writeCount = dbufCount;\n        // check CRC\n        if (this.blockCRC.getCRC() !== this.targetBlockCRC) {\n            _throw(Err.DATA_ERROR, 'Bad block CRC ' +\n                '(got ' +\n                this.blockCRC.getCRC().toString(16) +\n                ' expected ' +\n                this.targetBlockCRC.toString(16) +\n                ')');\n        }\n        return this.nextoutput;\n    }\n}\nconst coerceInputStream = function (input) {\n    if ('readByte' in input) {\n        return input;\n    }\n    const inputStream = new Stream();\n    inputStream.pos = 0;\n    inputStream.readByte = function () {\n        return input[this.pos++];\n    };\n    inputStream.seek = function (pos) {\n        this.pos = pos;\n    };\n    inputStream.eof = function () {\n        return this.pos >= input.length;\n    };\n    return inputStream;\n};\nconst coerceOutputStream = function (output) {\n    const outputStream = new Stream();\n    let resizeOk = true;\n    if (output) {\n        if (typeof output === 'number') {\n            outputStream.buffer = new Uint8Array(output);\n            resizeOk = false;\n        }\n        else if ('writeByte' in output) {\n            return output;\n        }\n        else {\n            outputStream.buffer = output;\n            resizeOk = false;\n        }\n    }\n    else {\n        outputStream.buffer = new Uint8Array(16384);\n    }\n    outputStream.pos = 0;\n    outputStream.writeByte = function (_byte) {\n        if (resizeOk && this.pos >= this.buffer.length) {\n            const newBuffer = new Uint8Array(this.buffer.length * 2);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n        }\n        this.buffer[this.pos++] = _byte;\n    };\n    outputStream.getBuffer = function () {\n        // trim buffer\n        if (this.pos !== this.buffer.length) {\n            if (!resizeOk) {\n                throw new TypeError('outputsize does not match decoded input');\n            }\n            const newBuffer = new Uint8Array(this.pos);\n            newBuffer.set(this.buffer.slice(0, this.pos));\n            this.buffer = newBuffer;\n        }\n        return this.buffer;\n    };\n    outputStream._coerced = true;\n    return outputStream;\n};\n/* Static helper functions */\n// 'input' can be a stream or a buffer\n// 'output' can be a stream or a buffer or a number (buffer size)\nexport function decode(input, output, multistream) {\n    // make a stream from a buffer, if necessary\n    const inputStream = coerceInputStream(input);\n    const outputStream = coerceOutputStream(output);\n    const bz = new Bunzip(inputStream, outputStream);\n    while (true) {\n        if ('eof' in inputStream && inputStream.eof()) {\n            break;\n        }\n        if (bz._init_block()) {\n            bz._read_bunzip();\n        }\n        else {\n            const targetStreamCRC = bz.reader.read(32) >>> 0; // (convert to unsigned)\n            if (targetStreamCRC !== bz.streamCRC) {\n                _throw(Err.DATA_ERROR, 'Bad stream CRC ' +\n                    '(got ' +\n                    bz.streamCRC.toString(16) +\n                    ' expected ' +\n                    targetStreamCRC.toString(16) +\n                    ')');\n            }\n            if (multistream && 'eof' in inputStream && !inputStream.eof()) {\n                // note that start_bunzip will also resync the bit reader to next byte\n                bz._start_bunzip(inputStream, outputStream);\n            }\n            else {\n                break;\n            }\n        }\n    }\n    if ('getBuffer' in outputStream) {\n        return outputStream.getBuffer();\n    }\n}\nexport default Bunzip;\n//# sourceMappingURL=index.js.map","// @ts-nocheck\n/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// An arithmetic coder, based on Eugene Shelwien's reimplementation of\n// Michael Schindler range coder.\n//\n// Order-0 byte stream of ~/scratch/data/q40b\n// C:              3.1s decode  (approx same vs 32-bit and 64-bit)\n// Arith_sh.js     6.7s decode  (32-bit with carries)\n// Arith.js      317.0s decode  (64-bit no carries); int64 crippling it.\n// ----------------------------------------------------------------------\n// Arithmetic (range) coder\nexport default class RangeCoder {\n    constructor(src) {\n        this.low = 0;\n        this.range = 0xffffffff;\n        this.code = 0;\n        this.FFnum = 0;\n        this.carry = 0;\n        this.cache = 0;\n    }\n    RangeStartDecode(src) {\n        for (let i = 0; i < 5; i++) {\n            this.code = (this.code << 8) + src.ReadByte();\n        }\n        this.code &= 0xffffffff;\n        this.code >>>= 0; // force to be +ve int\n    }\n    RangeGetFrequency(tot_freq) {\n        this.range = Math.floor(this.range / tot_freq);\n        // return this.code / this.range;\n        return Math.floor(this.code / this.range);\n        // Conceptual scenario; return freq only and don't modify range yet\n        // return Math.floor(this.code / (Math.floor(this.range / tot_freq)));\n    }\n    RangeDecode(src, sym_low, sym_freq, tot_freq) {\n        // Conceptually we divide range here, but in practice we cached it earlier\n        // this.range = Math.floor(this.range / tot_freq);\n        this.code -= sym_low * this.range;\n        this.range *= sym_freq;\n        while (this.range < 1 << 24) {\n            this.range *= 256;\n            this.code = this.code * 256 + src.ReadByte();\n        }\n    }\n    RangeShiftLow(dst) {\n        // We know range is < (1<<24) as we got here.  We already have a\n        // cached copy of 8 bits from low.  Is this correct, or does it need\n        // fixing?  Possible scenarios.\n        // 1. Low < 0xff000000 thus low+range < 0xffffffff and cache\n        //    cannot possibly change.  Output cache and as many ffs as needed.\n        // 2. We already detected an overflow in RangeEncode, setting carry.\n        //    In this case output cached byte + 1 and any 00s needed.\n        // 3. Neither case - range is low but we haven't yet detected if we're\n        //    XXffffff or XY000000 scenario.  Increase counter for ff/00s.\n        if ((this.low < 0xff000000) | this.carry) {\n            // cached byte if no overflow, byte+1 otherwise\n            dst.WriteByte(this.cache + this.carry);\n            // Flush any tracked FFs (no carry) or 00s (carry).\n            while (this.FFnum) {\n                dst.WriteByte(this.carry - 1);\n                this.FFnum--;\n            }\n            // Take a copy of top byte ready for next flush\n            this.cache = this.low >>> 24;\n            this.carry = 0;\n        }\n        else {\n            this.FFnum++; // keep track of number of trailing ff/00 bytes to write\n        }\n        this.low <<= 8;\n        this.low >>>= 0; // force to be +ve int\n    }\n    RangeEncode(dst, sym_low, sym_freq, tot_freq) {\n        const old_low = this.low;\n        this.range = Math.floor(this.range / tot_freq);\n        this.low += sym_low * this.range;\n        this.low >>>= 0; // Truncate to +ve int so we can spot overflow\n        this.range *= sym_freq;\n        // \"low + sym*range < old_low\" means we overflow; set carry.\n        // NB: can this.low < old_low occur twice before range < (1<<24)?\n        // We claim not, but prove it!\n        if (this.low < old_low) {\n            if (this.carry != 0) {\n                console.log('ERROR: Multiple carry');\n            }\n            this.carry = 1;\n        }\n        // Renormalise if range gets too small\n        while (this.range < 1 << 24) {\n            this.range *= 256;\n            this.RangeShiftLow(dst);\n        }\n    }\n    RangeFinishEncode(dst) {\n        for (let i = 0; i < 5; i++) {\n            this.RangeShiftLow(dst);\n        }\n    }\n}\n//# sourceMappingURL=arith_sh.js.map","/* eslint-disable no-var */\n// @ts-nocheck\n/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// An adaptive probability model for encoding and decoding of symbols\n// within a given alphabet, using the range coder to get/put the\n// compressed data.\nconst MAX_FREQ = (1 << 16) - 17;\nconst STEP = 16;\nexport default class ByteModel {\n    constructor(max_sym = 256) {\n        this.total_freq = max_sym;\n        this.max_sym = max_sym - 1;\n        this.S = [];\n        this.F = [];\n        for (let i = 0; i <= this.max_sym; i++) {\n            this.S[i] = i;\n            this.F[i] = 1;\n        }\n    }\n    ModelDecode(src, rc) {\n        // Find symbol\n        const freq = rc.RangeGetFrequency(this.total_freq);\n        // Linear scan to find cumulative frequency 'freq'\n        let acc = 0;\n        let x = 0;\n        while (acc + this.F[x] <= freq) {\n            acc += this.F[x++];\n        }\n        //\tfor (var acc = 0; (acc += this.F[x]) <= freq; x++)\n        //\t    ;\n        //\tacc -= this.F[x];\n        // Update range coder\n        rc.RangeDecode(src, acc, this.F[x], this.total_freq);\n        // Update model\n        this.F[x] += STEP;\n        this.total_freq += STEP;\n        if (this.total_freq > MAX_FREQ) {\n            this.ModelRenormalise();\n        }\n        // Keep symbols approximately frequency sorted\n        const sym = this.S[x];\n        if (x > 0 && this.F[x] > this.F[x - 1]) {\n            let tmp = this.F[x];\n            this.F[x] = this.F[x - 1];\n            this.F[x - 1] = tmp;\n            tmp = this.S[x];\n            this.S[x] = this.S[x - 1];\n            this.S[x - 1] = tmp;\n        }\n        return sym;\n    }\n    ModelRenormalise() {\n        // Halve all the frequencies, being careful not to hit zero\n        this.total_freq = 0;\n        for (let i = 0; i <= this.max_sym; i++) {\n            this.F[i] -= Math.floor(this.F[i] / 2);\n            this.total_freq += this.F[i];\n        }\n    }\n    ModelEncode(dst, rc, sym) {\n        // Find cumulative frequency\n        let acc = 0;\n        for (var x = 0; this.S[x] != sym; x++) {\n            acc += this.F[x];\n        }\n        // Encode\n        rc.RangeEncode(dst, acc, this.F[x], this.total_freq);\n        // Update model\n        this.F[x] += STEP;\n        this.total_freq += STEP;\n        if (this.total_freq > MAX_FREQ) {\n            // FIXME x2\n            this.ModelRenormalise();\n        }\n        // Keep symbols approximately frequency sorted\n        var sym = this.S[x];\n        if (x > 0 && this.F[x] > this.F[x - 1]) {\n            let tmp = this.F[x];\n            this.F[x] = this.F[x - 1];\n            this.F[x - 1] = tmp;\n            tmp = this.S[x];\n            this.S[x] = this.S[x - 1];\n            this.S[x - 1] = tmp;\n        }\n    }\n}\n//# sourceMappingURL=byte_model.js.map","// @ts-nocheck\n/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// Turn a buffer into a fake stream with get / put commands.\n// This enables up to closely match the published pseudocode.\nexport default class IOStream {\n    constructor(buf, start_pos = 0, size = 0) {\n        if (size !== 0) {\n            this.buf = new Uint8Array(size);\n            this.length = size;\n        }\n        else {\n            this.buf = buf;\n            this.length = buf.length;\n        }\n        this.dataView = new DataView(this.buf.buffer);\n        this.pos = start_pos;\n    }\n    // ----------\n    // Reading\n    EOF() {\n        return this.pos >= this.length;\n    }\n    ReadData(len) {\n        const A = this.buf.slice(this.pos, this.pos + len);\n        this.pos += len;\n        return A;\n    }\n    ReadByte() {\n        const b = this.buf[this.pos];\n        this.pos++;\n        return b;\n    }\n    ReadChar() {\n        const b = this.buf[this.pos];\n        this.pos++;\n        return String.fromCharCode(b);\n    }\n    ReadUint16() {\n        let i = this.ReadByte();\n        i |= this.ReadByte() << 8;\n        return i;\n    }\n    ReadUint32() {\n        const i = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return i;\n    }\n    // nul terminated string\n    ReadString() {\n        let s = '';\n        let b;\n        do {\n            b = this.buf[this.pos++];\n            if (b) {\n                s += String.fromCharCode(b);\n            }\n        } while (b);\n        return s;\n    }\n    ReadUint7() {\n        // Variable sized unsigned integers\n        let i = 0;\n        let c;\n        do {\n            c = this.ReadByte();\n            i = (i << 7) | (c & 0x7f);\n        } while (c & 0x80);\n        return i;\n    }\n    ReadITF8() {\n        let i = this.buf[this.pos];\n        this.pos++;\n        // process.stderr.write(\"i=\"+i+\"\\n\");\n        if (i >= 0xf0) {\n            // 1111xxxx => +4 bytes\n            i = (i & 0x0f) << 28;\n            i +=\n                (this.buf[this.pos + 0] << 20) +\n                    (this.buf[this.pos + 1] << 12) +\n                    (this.buf[this.pos + 2] << 4) +\n                    (this.buf[this.pos + 3] >> 4);\n            this.pos += 4;\n            // process.stderr.write(\"  4i=\"+i+\"\\n\");\n        }\n        else if (i >= 0xe0) {\n            // 1110xxxx => +3 bytes\n            i = (i & 0x0f) << 24;\n            i +=\n                (this.buf[this.pos + 0] << 16) +\n                    (this.buf[this.pos + 1] << 8) +\n                    (this.buf[this.pos + 2] << 0);\n            this.pos += 3;\n            // process.stderr.write(\"  3i=\"+i+\"\\n\");\n        }\n        else if (i >= 0xc0) {\n            // 110xxxxx => +2 bytes\n            i = (i & 0x1f) << 16;\n            i += (this.buf[this.pos + 0] << 8) + (this.buf[this.pos + 1] << 0);\n            this.pos += 2;\n            // process.stderr.write(\"  2i=\"+i+\"\\n\");\n        }\n        else if (i >= 0x80) {\n            // 10xxxxxx => +1 bytes\n            i = (i & 0x3f) << 8;\n            i += this.buf[this.pos];\n            this.pos++;\n        }\n        else {\n            // 0xxxxxxx => +0 bytes\n        }\n        return i;\n    }\n}\n//# sourceMappingURL=iostream.js.map","/* eslint-disable no-var */\n// @ts-nocheck\n/*\n * Copyright (c) 2019,2020 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport { decode } from \"../seek-bzip/index.js\";\nimport RangeCoder from \"./arith_sh.js\";\nimport ByteModel from \"./byte_model.js\";\nimport IOStream from \"./iostream.js\";\nconst ARITH_ORDER = 1;\nconst ARITH_EXT = 4;\nconst ARITH_STRIPE = 8;\nconst ARITH_NOSIZE = 16;\nconst ARITH_CAT = 32;\nconst ARITH_RLE = 64;\nconst ARITH_PACK = 128;\nexport default class RangeCoderGen {\n    decode(src) {\n        this.stream = new IOStream(src);\n        return this.decodeStream(this.stream);\n    }\n    decodeStream(stream, n_out = 0) {\n        const flags = this.stream.ReadByte();\n        if (!(flags & ARITH_NOSIZE)) {\n            n_out = this.stream.ReadUint7();\n        }\n        let e_len = n_out;\n        const order = flags & ARITH_ORDER;\n        // 4-way recursion\n        if (flags & ARITH_STRIPE) {\n            return this.decodeStripe(this.stream, n_out);\n        }\n        // Meta data\n        if (flags & ARITH_PACK) {\n            var P;\n            [P, e_len] = this.decodePackMeta(this.stream);\n        }\n        // NOP, useful for tiny blocks\n        if (flags & ARITH_CAT) {\n            var data = this.decodeCat(this.stream, e_len);\n        }\n        // Entropy decode\n        else if (flags & ARITH_EXT) {\n            var data = this.decodeExt(this.stream, e_len);\n        }\n        else if (flags & ARITH_RLE) {\n            var data = order\n                ? this.decodeRLE1(this.stream, e_len)\n                : this.decodeRLE0(this.stream, e_len);\n        }\n        else {\n            var data = order\n                ? this.decode1(this.stream, e_len)\n                : this.decode0(this.stream, e_len);\n        }\n        // Transforms\n        if (flags & ARITH_PACK) {\n            data = this.decodePack(data, P, n_out);\n        }\n        return data;\n    }\n    // ----------------------------------------------------------------------\n    // Order-0 codec\n    decode0(stream, n_out) {\n        const output = new Uint8Array(n_out);\n        let max_sym = stream.ReadByte();\n        if (max_sym == 0) {\n            max_sym = 256;\n        }\n        const byte_model = new ByteModel(max_sym);\n        const rc = new RangeCoder(stream);\n        rc.RangeStartDecode(stream);\n        for (let i = 0; i < n_out; i++) {\n            output[i] = byte_model.ModelDecode(stream, rc);\n        }\n        return output;\n    }\n    // ----------------------------------------------------------------------\n    // Order-1 codec\n    decode1(stream, n_out) {\n        const output = new Uint8Array(n_out);\n        let max_sym = stream.ReadByte();\n        if (max_sym == 0) {\n            max_sym = 256;\n        }\n        const byte_model = new Array(max_sym);\n        for (var i = 0; i < max_sym; i++) {\n            byte_model[i] = new ByteModel(max_sym);\n        }\n        const rc = new RangeCoder(stream);\n        rc.RangeStartDecode(stream);\n        let last = 0;\n        for (var i = 0; i < n_out; i++) {\n            output[i] = byte_model[last].ModelDecode(stream, rc);\n            last = output[i];\n        }\n        return output;\n    }\n    // ----------------------------------------------------------------------\n    // External codec\n    decodeExt(stream, n_out) {\n        return decode(stream.buf.slice(stream.pos));\n    }\n    // ----------------------------------------------------------------------\n    // Order-0 RLE codec\n    decodeRLE0(stream, n_out) {\n        const output = new Uint8Array(n_out);\n        let max_sym = stream.ReadByte();\n        if (max_sym == 0) {\n            max_sym = 256;\n        }\n        const model_lit = new ByteModel(max_sym);\n        const model_run = new Array(258);\n        for (var i = 0; i <= 257; i++) {\n            model_run[i] = new ByteModel(4);\n        }\n        const rc = new RangeCoder(stream);\n        rc.RangeStartDecode(stream);\n        var i = 0;\n        while (i < n_out) {\n            output[i] = model_lit.ModelDecode(stream, rc);\n            let part = model_run[output[i]].ModelDecode(stream, rc);\n            let run = part;\n            let rctx = 256;\n            while (part == 3) {\n                part = model_run[rctx].ModelDecode(stream, rc);\n                rctx = 257;\n                run += part;\n            }\n            for (let j = 1; j <= run; j++) {\n                output[i + j] = output[i];\n            }\n            i += run + 1;\n        }\n        return output;\n    }\n    // ----------------------------------------------------------------------\n    // Order-1 RLE codec\n    decodeRLE1(stream, n_out) {\n        const output = new Uint8Array(n_out);\n        let max_sym = stream.ReadByte();\n        if (max_sym == 0) {\n            max_sym = 256;\n        }\n        const model_lit = new Array(max_sym);\n        for (var i = 0; i < max_sym; i++) {\n            model_lit[i] = new ByteModel(max_sym);\n        }\n        const model_run = new Array(258);\n        for (var i = 0; i <= 257; i++) {\n            model_run[i] = new ByteModel(4);\n        }\n        const rc = new RangeCoder(stream);\n        rc.RangeStartDecode(stream);\n        let last = 0;\n        var i = 0;\n        while (i < n_out) {\n            output[i] = model_lit[last].ModelDecode(stream, rc);\n            last = output[i];\n            let part = model_run[output[i]].ModelDecode(stream, rc);\n            let run = part;\n            let rctx = 256;\n            while (part == 3) {\n                part = model_run[rctx].ModelDecode(stream, rc);\n                rctx = 257;\n                run += part;\n            }\n            for (let j = 1; j <= run; j++) {\n                output[i + j] = output[i];\n            }\n            i += run + 1;\n        }\n        return output;\n    }\n    // ----------------------------------------------------------------------\n    // Pack method\n    decodePackMeta(stream) {\n        this.nsym = stream.ReadByte();\n        const M = new Array(this.nsym);\n        for (let i = 0; i < this.nsym; i++) {\n            M[i] = stream.ReadByte();\n        }\n        const e_len = stream.ReadUint7(); // Could be derived data from nsym and n_out\n        return [M, e_len];\n    }\n    decodePack(data, M, len) {\n        const out = new Uint8Array(len);\n        if (this.nsym <= 1) {\n            // Constant value\n            for (var i = 0; i < len; i++) {\n                out[i] = M[0];\n            }\n        }\n        else if (this.nsym <= 2) {\n            // 1 bit per value\n            for (var i = 0, j = 0; i < len; i++) {\n                if (i % 8 == 0) {\n                    var v = data[j++];\n                }\n                out[i] = M[v & 1];\n                v >>= 1;\n            }\n        }\n        else if (this.nsym <= 4) {\n            // 2 bits per value\n            for (var i = 0, j = 0; i < len; i++) {\n                if (i % 4 == 0) {\n                    var v = data[j++];\n                }\n                out[i] = M[v & 3];\n                v >>= 2;\n            }\n        }\n        else if (this.nsym <= 16) {\n            // 4 bits per value\n            for (var i = 0, j = 0; i < len; i++) {\n                if (i % 2 == 0) {\n                    var v = data[j++];\n                }\n                out[i] = M[v & 15];\n                v >>= 4;\n            }\n        }\n        else {\n            // 8 bits per value: NOP\n            return data;\n        }\n        return out;\n    }\n    // Compute M array and return meta-data stream\n    packMeta(src) {\n        const stream = new IOStream('', 0, 1024);\n        // Count symbols\n        const M = new Array(256);\n        for (var i = 0; i < src.length; i++) {\n            M[src[i]] = 1;\n        }\n        // Write Map\n        for (var nsym = 0, i = 0; i < 256; i++) {\n            if (M[i]) {\n                M[i] = ++nsym;\n            }\n        } // map to 1..N\n        stream.WriteByte(nsym);\n        // FIXME: add check for nsym > 16?\n        // Or just accept it as an inefficient waste of time.\n        for (var i = 0; i < 256; i++) {\n            if (M[i]) {\n                stream.WriteByte(i); // adjust to 0..N-1\n                M[i]--;\n            }\n        }\n        return [stream, M, nsym];\n    }\n    decodeStripe(stream, len) {\n        const N = stream.ReadByte();\n        // Retrieve lengths\n        const clen = new Array(N);\n        const ulen = new Array(N);\n        for (var j = 0; j < N; j++) {\n            clen[j] = stream.ReadUint7();\n        }\n        // Decode streams\n        const T = new Array(N);\n        for (var j = 0; j < N; j++) {\n            ulen[j] = Math.floor(len / N) + (len % N > j);\n            T[j] = this.decodeStream(stream, ulen[j]);\n        }\n        // Transpose\n        const out = new Uint8Array(len);\n        for (var j = 0; j < N; j++) {\n            for (let i = 0; i < ulen[j]; i++) {\n                out[i * N + j] = T[j][i];\n            }\n        }\n        return out;\n    }\n    // ----------------------------------------------------------------------\n    // Cat method\n    decodeCat(stream, len) {\n        const out = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            out[i] = stream.ReadByte();\n        }\n        return out;\n    }\n}\n//# sourceMappingURL=arith_gen.js.map","/* eslint-disable no-var */\n// @ts-nocheck\n/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport RangeCoder from \"./arith_sh.js\";\nimport ByteModel from \"./byte_model.js\";\nimport IOStream from \"./iostream.js\";\n// ----------------------------------------------------------------------\n// Main arithmetic entry function: decodes a compressed src and\n// returns the uncompressed buffer.\nfunction read_array(src, tab, size) {\n    let j = 0; // array value\n    let z = 0; // array index: tab[j]\n    let last = -1;\n    // Remove first level of run-length encoding\n    const R = new Array(1024); // runs\n    while (z < size) {\n        const run = src.ReadByte();\n        R[j++] = run;\n        z += run;\n        if (run == last) {\n            let copy = src.ReadByte();\n            z += run * copy;\n            while (copy--) {\n                R[j++] = run;\n            }\n        }\n        last = run;\n    }\n    // Now expand runs in R to tab, noting 255 is max run\n    let i = 0;\n    j = 0;\n    z = 0;\n    while (z < size) {\n        let run_len = 0;\n        do {\n            var part = R[j++];\n            run_len += part;\n        } while (part == 255);\n        while (run_len--) {\n            tab[z++] = i;\n        }\n        i++;\n    }\n}\nconst QMAX = 256;\nconst FLAG_DEDUP = 2;\nconst FLAG_FLEN = 4;\nconst FLAG_SEL = 8; // whether selector is used in context\nconst FLAG_QMAP = 16;\nconst FLAG_PTAB = 32;\nconst FLAG_DTAB = 64;\nconst FLAG_QTAB = 128;\nconst GFLAG_MULTI_PARAM = 1;\nconst GFLAG_HAVE_STAB = 2;\nconst GFLAG_DO_REV = 4;\n// Compute a new context from our current state and qual q\nfunction fqz_update_ctx(params, state, q) {\n    let last = params.context;\n    state.qctx = (state.qctx << params.qshift) + params.qtab[q]; // >>> 0\n    last += (state.qctx & ((1 << params.qbits) - 1)) << params.qloc; // >>> 0\n    if (params.do_pos) {\n        last += params.ptab[Math.min(state.p, 1023)] << params.ploc;\n    }\n    if (params.do_delta) {\n        last += params.dtab[Math.min(state.delta, 255)] << params.dloc;\n        // Is it better to use q here or qtab[q]?\n        // If qtab[q] we can map eg [a-z0-9A-Z]->0 ,->1 and have\n        // delta being a token number count into comma separated lists?\n        state.delta += state.prevq != q ? 1 : 0;\n        state.prevq = q;\n    }\n    if (params.do_sel) {\n        last += state.s << params.sloc;\n    }\n    state.p--;\n    return last & 0xffff;\n}\nfunction decode_fqz_single_param(src) {\n    const p = {}; // params\n    // Load FQZ parameters\n    p.context = src.ReadUint16();\n    p.pflags = src.ReadByte();\n    p.do_dedup = p.pflags & FLAG_DEDUP;\n    p.fixed_len = p.pflags & FLAG_FLEN;\n    p.do_sel = p.pflags & FLAG_SEL;\n    p.do_qmap = p.pflags & FLAG_QMAP;\n    p.do_pos = p.pflags & FLAG_PTAB;\n    p.do_delta = p.pflags & FLAG_DTAB;\n    p.do_qtab = p.pflags & FLAG_QTAB;\n    p.max_sym = src.ReadByte();\n    let x = src.ReadByte();\n    p.qbits = x >> 4;\n    p.qshift = x & 15;\n    x = src.ReadByte();\n    p.qloc = x >> 4;\n    p.sloc = x & 15;\n    x = src.ReadByte();\n    p.ploc = x >> 4;\n    p.dloc = x & 15;\n    // Qual map, eg to \"unbin\" Illumina qualities\n    p.qmap = new Array(256);\n    if (p.pflags & FLAG_QMAP) {\n        for (var i = 0; i < p.max_sym; i++) {\n            p.qmap[i] = src.ReadByte();\n        }\n    }\n    else {\n        // Useful optimisation to speed up main loop\n        for (var i = 0; i < 256; i++) {\n            p.qmap[i] = i;\n        } // NOP\n    }\n    // Read tables\n    p.qtab = new Array(1024);\n    if (p.qbits > 0 && p.pflags & FLAG_QTAB) {\n        read_array(src, p.qtab, 256);\n    }\n    else {\n        // Useful optimisation to speed up main loop\n        for (var i = 0; i < 256; i++) {\n            p.qtab[i] = i;\n        } // NOP\n    }\n    p.ptab = new Array(1024);\n    if (p.pflags & FLAG_PTAB) {\n        read_array(src, p.ptab, 1024);\n    }\n    p.dtab = new Array(256);\n    if (p.pflags & FLAG_DTAB) {\n        read_array(src, p.dtab, 256);\n    }\n    return p;\n}\nfunction decode_fqz_params(src) {\n    const gparams = {\n        max_sym: 0,\n    };\n    // Check fqz format version\n    const vers = src.ReadByte();\n    if (vers != 5) {\n        console.error('Invalid FQZComp version number');\n        return;\n    }\n    const gflags = src.ReadByte();\n    const nparam = gflags & GFLAG_MULTI_PARAM ? src.ReadByte() : 1;\n    let max_sel = gflags.nparam > 1 ? gflags.nparam - 1 : 0; // Note max_sel, not num_sel\n    const stab = new Array(256);\n    if (gflags & GFLAG_HAVE_STAB) {\n        max_sel = src.ReadByte();\n        read_array(src, stab, 256);\n    }\n    else {\n        for (var i = 0; i < nparam; i++) {\n            stab[i] = i;\n        }\n        for (; i < 256; i++) {\n            stab[i] = nparam - 1;\n        }\n    }\n    gparams.do_rev = gflags & GFLAG_DO_REV;\n    gparams.stab = stab;\n    gparams.max_sel = max_sel;\n    gparams.params = new Array(gparams.nparam);\n    for (let p = 0; p < nparam; p++) {\n        gparams.params[p] = decode_fqz_single_param(src);\n        if (gparams.max_sym < gparams.params[p].max_sym) {\n            gparams.max_sym = gparams.params[p].max_sym;\n        }\n    }\n    return gparams;\n}\nfunction fqz_create_models(gparams) {\n    const model = {};\n    model.qual = new Array(1 << 16);\n    for (var i = 0; i < 1 << 16; i++) {\n        model.qual[i] = new ByteModel(gparams.max_sym + 1);\n    } // +1 as max value not num. values\n    model.len = new Array(4);\n    for (var i = 0; i < 4; i++) {\n        model.len[i] = new ByteModel(256);\n    }\n    model.rev = new ByteModel(2);\n    model.dup = new ByteModel(2);\n    if (gparams.max_sel > 0) {\n        model.sel = new ByteModel(gparams.max_sel + 1);\n    } // +1 as max value not num. values\n    return model;\n}\n// Initialise a new record, updating state.\n// Returns 1 if dup, otherwise 0\nfunction decode_fqz_new_record(src, rc, gparams, model, state, rev) {\n    // Parameter selector\n    state.s = gparams.max_sel > 0 ? model.sel.ModelDecode(src, rc) : 0;\n    state.x = gparams.stab[state.s];\n    const params = gparams.params[state.x];\n    // Reset contexts at the start of each new record\n    if (params.fixed_len >= 0) {\n        // Not fixed or fixed but first record\n        var len = model.len[0].ModelDecode(src, rc);\n        len |= model.len[1].ModelDecode(src, rc) << 8;\n        len |= model.len[2].ModelDecode(src, rc) << 16;\n        len |= model.len[3].ModelDecode(src, rc) << 24;\n        if (params.fixed_len > 0) {\n            params.fixed_len = -len;\n        }\n    }\n    else {\n        len = -params.fixed_len;\n    }\n    state.len = len;\n    if (gparams.do_rev) {\n        rev[state.rec] = model.rev.ModelDecode(src, rc);\n    }\n    state.is_dup = 0;\n    if (params.pflags & FLAG_DEDUP) {\n        if (model.dup.ModelDecode(src, rc)) {\n            state.is_dup = 1;\n        }\n    }\n    state.p = len; // number of remaining bytes in this record\n    state.delta = 0;\n    state.qctx = 0;\n    state.prevq = 0;\n    state.rec++;\n}\nfunction decode_fqz(src, q_lens) {\n    // Decode parameter block\n    const n_out = src.ReadUint7();\n    const gparams = decode_fqz_params(src);\n    if (!gparams) {\n        return;\n    }\n    var params = gparams.params;\n    const rev = new Array(q_lens.length);\n    // Create initial models\n    const model = fqz_create_models(gparams);\n    // Create our entropy encoder and output buffers\n    const rc = new RangeCoder(src);\n    rc.RangeStartDecode(src);\n    const output = new Uint8Array(n_out);\n    // Internal FQZ state\n    const state = {\n        qctx: 0, // Qual-only sub-context\n        prevq: 0, // Previous quality value\n        delta: 0, // Running delta (q vs prevq)\n        p: 0, // Number of bases left in current record\n        s: 0, // Current parameter selector value (0 if unused)\n        x: 0, // \"stab\" tabulated copy of s\n        len: 0, // Length of current string\n        is_dup: 0, // This string is a duplicate of last\n        rec: 0, // Record number\n    };\n    // The main decode loop itself\n    let i = 0; // position in output buffer\n    while (i < n_out) {\n        if (state.p == 0) {\n            decode_fqz_new_record(src, rc, gparams, model, state, rev);\n            if (state.is_dup > 0) {\n                if (model.dup.ModelDecode(src, rc)) {\n                    // Duplicate of last line\n                    for (let x = 0; x < len; x++) {\n                        output[i + x] = output[i + x - state.len];\n                    }\n                    i += state.len;\n                    state.p = 0;\n                    continue;\n                }\n            }\n            q_lens.push(state.len);\n            var params = gparams.params[state.x];\n            var last = params.context;\n        }\n        // Decode the current quality (possibly mapped via qmap)\n        const Q = model.qual[last].ModelDecode(src, rc);\n        // if (params.do_qmap)\n        //    output[i++] = params.qmap[Q];\n        // else\n        //    output[i++] = Q\n        output[i++] = params.qmap[Q]; // optimised version of above\n        last = fqz_update_ctx(params, state, Q);\n    }\n    if (gparams.do_rev) {\n        reverse_qualities(output, n_out, rev, q_lens);\n    }\n    return output;\n}\nfunction reverse_qualities(qual, qual_len, rev, len) {\n    let rec = 0;\n    let i = 0;\n    while (i < qual_len) {\n        if (rev[rec]) {\n            let j = 0;\n            let k = len[rec] - 1;\n            while (j < k) {\n                const tmp = qual[i + j];\n                qual[i + j] = qual[i + k];\n                qual[i + k] = tmp;\n                j++;\n                k--;\n            }\n        }\n        i += len[rec++];\n    }\n}\nexport function decode(src, q_lens) {\n    const stream = new IOStream(src);\n    return decode_fqz(stream, q_lens);\n}\n//# sourceMappingURL=fqzcomp.js.map","/* eslint-disable no-var */\n// @ts-nocheck\n/*\n * Copyright (c) 2019,2020 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport IOStream from \"./iostream.js\";\n// ----------------------------------------------------------------------\n// rANS primitives itself\n//\n// RansGet* is decoder side\nfunction RansGetCumulativeFreq(R, bits) {\n    return R & ((1 << bits) - 1);\n}\nfunction RansGetSymbolFromFreq(C, f) {\n    // NOTE: Inefficient.\n    // In practice we would implement this via a precomputed\n    // lookup table C2S[f]; see RansBuildC2S below.\n    let s = 0;\n    while (f >= C[s + 1]) {\n        s++;\n    }\n    // console.error(f, C, s)\n    return s;\n}\nfunction RansBuildC2S(C, bits) {\n    const max = 1 << bits;\n    const C2S = new Array(max);\n    let s = 0;\n    for (let f = 0; f < max; f++) {\n        while (f >= C[s + 1]) {\n            s++;\n        }\n        C2S[f] = s;\n    }\n    return C2S;\n}\nfunction RansAdvanceStep(R, c, f, bits) {\n    return f * (R >> bits) + (R & ((1 << bits) - 1)) - c;\n}\nfunction RansRenorm(src, R) {\n    if (R < 1 << 15) {\n        R = (R << 16) + src.ReadUint16();\n    }\n    return R;\n}\nfunction DecodeRLEMeta(src, N) {\n    const u_meta_len = src.ReadUint7();\n    const rle_len = src.ReadUint7();\n    // Decode RLE lengths\n    if (u_meta_len & 1) {\n        var rle_meta = src.ReadData((u_meta_len - 1) / 2);\n    }\n    else {\n        const comp_meta_len = src.ReadUint7();\n        var rle_meta = src.ReadData(comp_meta_len);\n        rle_meta = RansDecode0(new IOStream(rle_meta), u_meta_len / 2, N);\n    }\n    // Decode list of symbols for which RLE lengths are applied\n    var rle_meta = new IOStream(rle_meta);\n    const L = new Array(256);\n    let n = rle_meta.ReadByte();\n    if (n == 0) {\n        n = 256;\n    }\n    for (let i = 0; i < n; i++) {\n        L[rle_meta.ReadByte()] = 1;\n    }\n    return [L, rle_meta, rle_len];\n}\nfunction DecodeRLE(buf, L, rle_meta, len) {\n    const src = new IOStream(buf);\n    const out = new Uint8Array(len);\n    // Expand up buf+meta to out; i = buf index, j = out index\n    let j = 0;\n    for (let i = 0; j < len; i++) {\n        const sym = buf[i];\n        if (L[sym]) {\n            const run = rle_meta.ReadUint7();\n            for (let r = 0; r <= run; r++) {\n                out[j++] = sym;\n            }\n        }\n        else {\n            out[j++] = sym;\n        }\n    }\n    return out;\n}\n// Pack meta data is the number and value of distinct symbols plus\n// the length of the packed byte stream.\nfunction DecodePackMeta(src) {\n    const nsym = src.ReadByte();\n    const P = new Array(nsym);\n    for (let i = 0; i < nsym; i++) {\n        P[i] = src.ReadByte();\n    }\n    const len = src.ReadUint7();\n    return [P, nsym, len];\n}\n// Extract bits from src producing output of length len.\n// Nsym is number of distinct symbols used.\nfunction DecodePack(data, P, nsym, len) {\n    const out = new Uint8Array(len);\n    let j = 0;\n    // Constant value\n    if (nsym <= 1) {\n        for (var i = 0; i < len; i++) {\n            out[i] = P[0];\n        }\n    }\n    // 1 bit per value\n    else if (nsym <= 2) {\n        for (i = 0; i < len; i++) {\n            if (i % 8 == 0) {\n                var v = data[j++];\n            }\n            out[i] = P[v & 1];\n            v >>= 1;\n        }\n    }\n    // 2 bits per value\n    else if (nsym <= 4) {\n        for (i = 0; i < len; i++) {\n            if (i % 4 == 0) {\n                var v = data[j++];\n            }\n            out[i] = P[v & 3];\n            v >>= 2;\n        }\n    }\n    // 4 bits per value\n    else if (nsym <= 16) {\n        for (i = 0; i < len; i++) {\n            if (i % 2 == 0) {\n                var v = data[j++];\n            }\n            out[i] = P[v & 15];\n            v >>= 4;\n        }\n    }\n    return out;\n}\nfunction RansDecodeStripe(src, len) {\n    const N = src.ReadByte();\n    // Retrieve lengths\n    const clen = new Array(N);\n    const ulen = new Array(N);\n    for (var j = 0; j < N; j++) {\n        clen[j] = src.ReadUint7();\n    }\n    // Decode streams\n    const T = new Array(N);\n    for (var j = 0; j < N; j++) {\n        ulen[j] = Math.floor(len / N) + (len % N > j);\n        T[j] = RansDecodeStream(src, ulen[j]);\n    }\n    // Transpose\n    const out = new Uint8Array(len);\n    for (var j = 0; j < N; j++) {\n        for (let i = 0; i < ulen[j]; i++) {\n            out[i * N + j] = T[j][i];\n        }\n    }\n    return out;\n}\n// ----------------------------------------------------------------------\n// Main rANS entry function: decodes a compressed src and\n// returns the uncompressed buffer.\nexport function decode(src) {\n    const stream = new IOStream(src);\n    return RansDecodeStream(stream, 0);\n}\nfunction RansDecodeStream(stream, n_out) {\n    const format = stream.ReadByte();\n    const order = format & 1;\n    const x32 = format & 4;\n    const stripe = format & 8;\n    const nosz = format & 16;\n    const cat = format & 32;\n    const rle = format & 64;\n    const pack = format & 128;\n    const Nway = x32 ? 32 : 4;\n    if (!nosz) {\n        n_out = stream.ReadUint7();\n    }\n    // N-way interleaving\n    if (stripe) {\n        return RansDecodeStripe(stream, n_out);\n    }\n    // Bit packing\n    if (pack) {\n        var pack_len = n_out;\n        var [P, nsym, n_out] = DecodePackMeta(stream);\n    }\n    // Run length encoding\n    if (rle) {\n        var rle_len = n_out;\n        var [L, rle_meta, n_out] = DecodeRLEMeta(stream, Nway);\n    }\n    // Uncompress data (all, packed or run literals)\n    if (cat) {\n        var buf = stream.ReadData(n_out);\n    }\n    else if (order == 0) {\n        var buf = RansDecode0(stream, n_out, Nway);\n    }\n    else {\n        var buf = RansDecode1(stream, n_out, Nway);\n    }\n    // Apply expansion transforms\n    if (rle) {\n        buf = DecodeRLE(buf, L, rle_meta, rle_len);\n    }\n    if (pack) {\n        buf = DecodePack(buf, P, nsym, pack_len);\n    }\n    return buf;\n}\n// ----------------------------------------------------------------------\n// Order-0 decoder\nfunction ReadAlphabet(src) {\n    const A = new Array(256);\n    for (let i = 0; i < 256; i++) {\n        A[i] = 0;\n    }\n    let rle = 0;\n    let sym = src.ReadByte();\n    let last_sym = sym;\n    do {\n        A[sym] = 1;\n        if (rle > 0) {\n            rle--;\n            sym++;\n        }\n        else {\n            sym = src.ReadByte();\n            if (sym == last_sym + 1) {\n                rle = src.ReadByte();\n            }\n        }\n        last_sym = sym;\n    } while (sym != 0);\n    return A;\n}\n// Decode a single table of order-0 frequencies,\n// filling out the F and C arrays.\nfunction ReadFrequencies0(src, F, C) {\n    // Initialise; not in the specification - implicit?\n    for (var i = 0; i < 256; i++) {\n        F[i] = 0;\n    }\n    // Fetch alphabet\n    const A = ReadAlphabet(src);\n    // Fetch frequencies for the symbols listed in our alphabet\n    for (var i = 0; i < 256; i++) {\n        if (A[i] > 0) {\n            F[i] = src.ReadUint7();\n        }\n    }\n    NormaliseFrequencies0_Shift(F, 12);\n    // Compute C[] from F[]\n    C[0] = 0;\n    for (var i = 0; i <= 255; i++) {\n        C[i + 1] = C[i] + F[i];\n    }\n}\nfunction RansDecode0(src, nbytes, N) {\n    // Decode frequencies\n    const F = new Array(256);\n    const C = new Array(256);\n    ReadFrequencies0(src, F, C);\n    // Fast lookup to avoid slow RansGetSymbolFromFreq\n    const C2S = RansBuildC2S(C, 12);\n    // Initialise rANS state\n    const R = new Array(N);\n    for (var i = 0; i < N; i++) {\n        R[i] = src.ReadUint32();\n    }\n    // Main decode loop\n    const output = new Uint8Array(nbytes);\n    for (var i = 0; i < nbytes; i++) {\n        const ix = i & (N - 1); // equiv to i%N as N is power of 2\n        const f = RansGetCumulativeFreq(R[ix], 12);\n        const s = C2S[f]; // Equiv to RansGetSymbolFromFreq(C, f);\n        output[i] = s;\n        R[ix] = RansAdvanceStep(R[ix], C[s], F[s], 12);\n        R[ix] = RansRenorm(src, R[ix]);\n    }\n    // Main decode loop\n    return output;\n}\nfunction NormaliseFrequencies0_Shift(F, bits) {\n    // Compute total and number of bits to shift by\n    let tot = 0;\n    for (var i = 0; i < 256; i++) {\n        tot += F[i];\n    }\n    if (tot == 0 || tot == 1 << bits) {\n        return;\n    }\n    let shift = 0;\n    while (tot < 1 << bits) {\n        tot *= 2;\n        shift++;\n    }\n    // Scale total of frequencies to (1<<bits)\n    for (var i = 0; i < 256; i++) {\n        F[i] <<= shift;\n    }\n}\n// ----------------------------------------------------------------------\n// Order-1 decoder\n// Decode a table of order-1 frequencies,\n// filling out the F and C arrays.\nfunction ReadFrequencies1(src, F, C, shift) {\n    // Initialise; not in the specification - implicit?\n    for (var i = 0; i < 256; i++) {\n        F[i] = new Array(256);\n        C[i] = new Array(256);\n        for (var j = 0; j < 256; j++) {\n            F[i][j] = 0;\n        }\n    }\n    // Fetch alphabet\n    const A = ReadAlphabet(src);\n    // Read F[]\n    for (var i = 0; i < 256; i++) {\n        if (!A[i]) {\n            continue;\n        }\n        let run = 0;\n        for (var j = 0; j < 256; j++) {\n            if (!A[j]) {\n                continue;\n            }\n            if (run > 0) {\n                run--;\n            }\n            else {\n                F[i][j] = src.ReadUint7();\n                if (F[i][j] == 0) {\n                    run = src.ReadByte();\n                }\n            }\n        }\n        NormaliseFrequencies0_Shift(F[i], shift);\n        // Compute C[] from F[]\n        C[i][0] = 0;\n        for (var j = 0; j < 256; j++) {\n            C[i][j + 1] = C[i][j] + F[i][j];\n        }\n    }\n}\nfunction RansDecode1(src, nbytes, N) {\n    // FIXME: this bit is missing from the RansDecode0 pseudocode.\n    var comp = src.ReadByte();\n    const shift = comp >> 4;\n    var freq_src = src;\n    if (comp & 1) {\n        const ulen = src.ReadUint7();\n        const clen = src.ReadUint7();\n        var comp = new IOStream(src.ReadData(clen));\n        var freq_src = new IOStream(RansDecode0(comp, ulen, 4));\n    }\n    // Decode frequencies\n    const F = new Array(256);\n    const C = new Array(256);\n    ReadFrequencies1(freq_src, F, C, shift);\n    // Fast lookup to avoid slow RansGetSymbolFromFreq\n    const C2S = new Array(256);\n    for (var i = 0; i < 256; i++ // Could do only for symbols in alphabet?\n    ) {\n        C2S[i] = RansBuildC2S(C[i], shift);\n    }\n    // Initialise rANS state\n    const R = new Array(N);\n    const L = new Array(N);\n    for (var j = 0; j < N; j++) {\n        R[j] = src.ReadUint32();\n        L[j] = 0;\n    }\n    // Main decode loop\n    const output = new Uint8Array(nbytes);\n    const nbytesx = Math.floor(nbytes / N);\n    for (var i = 0; i < nbytesx; i++) {\n        for (var j = 0; j < N; j++) {\n            var f = RansGetCumulativeFreq(R[j], shift);\n            // var s = RansGetSymbolFromFreq(C[L[j]], f);\n            var s = C2S[L[j]][f]; // Precomputed version of above\n            output[i + j * nbytesx] = s;\n            R[j] = RansAdvanceStep(R[j], C[L[j]][s], F[L[j]][s], shift);\n            R[j] = RansRenorm(src, R[j]);\n            L[j] = s;\n        }\n    }\n    // Now deal with the remainder if buffer size is not a multiple of N,\n    // using the last rANS state exclusively.  (It'd have been nice to have\n    // designed this to just act as if we kept going with a bail out.)\n    i = N * i;\n    while (i < nbytes) {\n        var f = RansGetCumulativeFreq(R[N - 1], shift);\n        var s = RansGetSymbolFromFreq(C[L[N - 1]], f);\n        output[i++] = s;\n        R[N - 1] = RansAdvanceStep(R[N - 1], C[L[N - 1]][s], F[L[N - 1]][s], shift);\n        R[N - 1] = RansRenorm(src, R[N - 1]);\n        L[N - 1] = s;\n    }\n    return output;\n}\n//# sourceMappingURL=rans4x16.js.map","function sum(array) {\n    let sum = 0;\n    for (const entry of array) {\n        sum += entry.length;\n    }\n    return sum;\n}\nexport function concatUint8Array(args) {\n    const mergedArray = new Uint8Array(sum(args));\n    let offset = 0;\n    for (const entry of args) {\n        mergedArray.set(entry, offset);\n        offset += entry.length;\n    }\n    return mergedArray;\n}\n//# sourceMappingURL=util.js.map","/* eslint-disable no-var */\n// @ts-nocheck\n/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// Name tokeniser\n//\n// This is a reference implementation designed to match the\n// written specification as closely as possible.  It is *NOT*\n// an efficient implementation, but see comments below.\nimport { concatUint8Array } from \"../util.js\";\nimport arith_gen from \"./arith_gen.js\";\nimport IOStream from \"./iostream.js\";\nimport * as rans from \"./rans4x16.js\";\nconst arith = new arith_gen();\nconst TOK_TYPE = 0;\nconst TOK_STRING = 1;\nconst TOK_CHAR = 2;\nconst TOK_DIGITS0 = 3;\nconst TOK_DZLEN = 4;\nconst TOK_DUP = 5;\nconst TOK_DIFF = 6;\nconst TOK_DIGITS = 7;\nconst TOK_DELTA = 8;\nconst TOK_DELTA0 = 9;\nconst TOK_MATCH = 10;\nconst TOK_NOP = 11;\nconst TOK_END = 12;\n// ----------------------------------------------------------------------\n// Token byte streams\nfunction DecodeTokenByteStreams(src, in_size, use_arith, nnames) {\n    let t = -1;\n    const B = new Array(256);\n    while (!src.EOF()) {\n        const ttype = src.ReadByte();\n        const tok_new = ttype & 128;\n        const tok_dup = ttype & 64;\n        const type = ttype & 63;\n        if (tok_new) {\n            t++;\n            B[t] = new Array(13);\n        }\n        if (type != TOK_TYPE && tok_new) {\n            const M = new Array(nnames - 1).fill(TOK_MATCH);\n            B[t][TOK_TYPE] = new IOStream(concatUint8Array([new Uint8Array(type), M]));\n        }\n        if (tok_dup) {\n            const dup_pos = src.ReadByte();\n            const dup_type = src.ReadByte();\n            B[t][type] = new IOStream(B[dup_pos][dup_type].buf);\n        }\n        else {\n            const clen = src.ReadUint7();\n            const data = src.ReadData(clen);\n            B[t][type] = use_arith ? arith.decode(data) : rans.decode(data);\n            B[t][type] = new IOStream(B[t][type]);\n        }\n    }\n    return B;\n}\n// ----------------------------------------------------------------------\n// Token decode\nfunction LeftPadNumber(val, len) {\n    let str = val + '';\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\nfunction DecodeSingleName(B, N, T, n) {\n    let type = B[0][TOK_TYPE].ReadByte();\n    const dist = B[0][type].ReadUint32();\n    const m = n - dist;\n    if (type == TOK_DUP) {\n        N[n] = N[m];\n        T[n] = T[m];\n        return N[n];\n    }\n    let t = 1;\n    N[n] = '';\n    T[n] = new Array(256);\n    do {\n        type = B[t][TOK_TYPE].ReadByte();\n        switch (type) {\n            case TOK_CHAR:\n                T[n][t] = B[t][TOK_CHAR].ReadChar();\n                break;\n            case TOK_STRING:\n                T[n][t] = B[t][TOK_STRING].ReadString();\n                break;\n            case TOK_DIGITS:\n                T[n][t] = B[t][TOK_DIGITS].ReadUint32();\n                break;\n            case TOK_DIGITS0:\n                var d = B[t][TOK_DIGITS0].ReadUint32();\n                var l = B[t][TOK_DZLEN].ReadByte();\n                T[n][t] = LeftPadNumber(d, l);\n                break;\n            case TOK_DELTA:\n                T[n][t] = (T[m][t] >> 0) + B[t][TOK_DELTA].ReadByte();\n                break;\n            case TOK_DELTA0:\n                var d = (T[m][t] >> 0) + B[t][TOK_DELTA0].ReadByte();\n                var l = T[m][t].length;\n                T[n][t] = LeftPadNumber(d, l);\n                break;\n            case TOK_MATCH:\n                T[n][t] = T[m][t];\n                break;\n            default:\n                T[n][t] = '';\n                break;\n        }\n        N[n] += T[n][t++];\n    } while (type != TOK_END);\n    return N[n];\n}\n// ----------------------------------------------------------------------\n// Main tokeniser decode entry function: decodes a compressed src and\n// returns the uncompressed buffer.\nexport function decode(src, len, separator) {\n    var src = new IOStream(src);\n    const ulen = src.ReadUint32();\n    const nnames = src.ReadUint32();\n    const use_arith = src.ReadByte();\n    const B = DecodeTokenByteStreams(src, len, use_arith, nnames);\n    const N = new Array(nnames);\n    const T = new Array(nnames);\n    let str = '';\n    if (separator === undefined) {\n        separator = '\\n';\n    }\n    for (let i = 0; i < nnames; i++) {\n        str += DecodeSingleName(B, N, T, i) + separator;\n    }\n    return str;\n}\n//# sourceMappingURL=tok3.js.map","// @ts-nocheck\n//\n/*\n * Copyright (c) 2020 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// This is an interface to the htscodecs reference implementation of\n// the CRAM 3.1 codecs.\n// This JavaScript file is not part of the reference implementation\n// and is simply and interface to get a consistent interface for cram-js.\nimport arith from \"./arith_gen.js\";\nimport * as fqzcomp from \"./fqzcomp.js\";\nimport * as r4x8 from \"./rans.js\";\nimport * as r4x16 from \"./rans4x16.js\";\nimport * as tok3 from \"./tok3.js\";\nexport function r4x8_uncompress(inputBuffer) {\n    return r4x8.decode(inputBuffer);\n}\nexport function r4x16_uncompress(inputBuffer) {\n    return r4x16.decode(inputBuffer);\n}\nexport function arith_uncompress(inputBuffer) {\n    // fix by @cmdcolin for CRAM 3.1\n    // xref https://github.com/jkbonfield/htscodecs/pull/1/files\n    return new arith().decode(inputBuffer);\n}\nexport function fqzcomp_uncompress(inputBuffer) {\n    const q_lens = [];\n    return fqzcomp.decode(inputBuffer, q_lens);\n}\nexport function tok3_uncompress(inputBuffer) {\n    // Returns in string form instead of buffer\n    const out = tok3.decode(inputBuffer, 0, '\\0');\n    return Uint8Array.from(Array.from(out).map(letter => letter.charCodeAt(0)));\n}\n//# sourceMappingURL=index.js.map","import { LocalFile, RemoteFile } from 'generic-filehandle2';\nfunction open(maybeUrl, maybePath, maybeFilehandle) {\n    if (maybeFilehandle) {\n        return maybeFilehandle;\n    }\n    if (maybeUrl) {\n        return new RemoteFile(maybeUrl);\n    }\n    if (maybePath) {\n        return new LocalFile(maybePath);\n    }\n    throw new Error('no url, path, or filehandle provided, cannot open');\n}\nexport { open };\nexport { LocalFile, RemoteFile } from 'generic-filehandle2';\n//# sourceMappingURL=io.js.map","const TF_SHIFT = 12;\nconst TOTFREQ = 1 << TF_SHIFT;\nconst RANS_BYTE_L = 1 << 23;\nexport { RANS_BYTE_L, TF_SHIFT, TOTFREQ };\n//# sourceMappingURL=constants.js.map","// @ts-nocheck\nimport { CramMalformedError } from \"../errors.js\";\nimport { RANS_BYTE_L } from \"./constants.js\";\nclass FC {\n    // int F, C;\n    constructor() {\n        this.F = undefined;\n        this.C = undefined;\n    }\n}\nclass AriDecoder {\n    // final FC[] fc = new FC[256];\n    // byte[] R;\n    constructor() {\n        this.fc = new Array(256);\n        for (let i = 0; i < this.fc.length; i += 1) {\n            this.fc[i] = new FC();\n        }\n        this.R = null;\n    }\n}\nclass DecodingSymbol {\n    // int start; // Start of range.\n    // int freq; // Symbol frequency.\n    constructor() {\n        this.start = undefined;\n        this.freq = undefined;\n    }\n}\n// Initialize a decoder symbol to start \"start\" and frequency \"freq\"\nfunction symbolInit(sym, start, freq) {\n    if (!(start <= 1 << 16)) {\n        throw new CramMalformedError('assertion failed: start <= 1<<16');\n    }\n    if (!(freq <= (1 << 16) - start)) {\n        throw new CramMalformedError('assertion failed: freq <= 1<<16');\n    }\n    sym.start = start;\n    sym.freq = freq;\n}\n// Advances in the bit stream by \"popping\" a single symbol with range start\n// \"start\" and frequency \"freq\". All frequencies are assumed to sum to\n// \"1 << scaleBits\".\n// No renormalization or output happens.\n/* private static int */ function advanceStep(\n/* final int */ r, \n/* final int */ start, \n/* final int */ freq, \n/* final int */ scaleBits) {\n    /* final int */ const mask = (1 << scaleBits) - 1;\n    // s, x = D(x)\n    return freq * (r >> scaleBits) + (r & mask) - start;\n}\n// Equivalent to RansDecAdvanceStep that takes a symbol.\n/* static int  */ function advanceSymbolStep(\n/* final int */ r, \n/* final RansDecSymbol */ sym, \n/* final int */ scaleBits) {\n    return advanceStep(r, sym.start, sym.freq, scaleBits);\n}\n// Returns the current cumulative frequency (map it to a symbol yourself!)\n/* static int */ function get(/* final int */ r, /* final int */ scaleBits) {\n    return r & ((1 << scaleBits) - 1);\n}\n// Advances in the bit stream by \"popping\" a single symbol with range start\n// \"start\" and frequency \"freq\". All frequencies are assumed to sum to\n// \"1 << scaleBits\",\n// and the resulting bytes get written to ptr (which is updated).\n/* private static int */ function advance(\n/* int */ r, \n/* final ByteBuffer */ pptr, \n/* final int */ start, \n/* final int */ freq, \n/* final int */ scaleBits) {\n    /* final int */ const mask = (1 << scaleBits) - 1;\n    // s, x = D(x)\n    r = freq * (r >> scaleBits) + (r & mask) - start;\n    // re-normalize\n    if (r < RANS_BYTE_L) {\n        do {\n            /* final int */ const b = 0xff & pptr.get();\n            r = (r << 8) | b;\n        } while (r < RANS_BYTE_L);\n    }\n    return r;\n}\n// Equivalent to RansDecAdvance that takes a symbol.\n/*  static int */ function advanceSymbol(\n/* final int */ r, \n/* final ByteBuffer */ pptr, \n/* final RansDecSymbol */ sym, \n/* final int */ scaleBits) {\n    return advance(r, pptr, sym.start, sym.freq, scaleBits);\n}\n// Re-normalize.\n/*  static int */ function renormalize(\n/* int */ r, \n/* final ByteBuffer */ pptr) {\n    // re-normalize\n    if (r < RANS_BYTE_L) {\n        do {\n            r = (r << 8) | (0xff & pptr.get());\n        } while (r < RANS_BYTE_L);\n    }\n    return r;\n}\nexport default {\n    FC,\n    AriDecoder,\n    DecodingSymbol,\n    symbolInit,\n    advanceStep,\n    advanceSymbolStep,\n    get,\n    advanceSymbol,\n    renormalize,\n};\n//# sourceMappingURL=decoding.js.map","// @ts-nocheck\nimport { CramMalformedError } from \"../errors.js\";\nimport { TF_SHIFT } from \"./constants.js\";\nimport Decoding from \"./decoding.js\";\nexport default function uncompress(\n/* ByteBuffer */ input, \n/* Decoding.AriDecoder */ D, \n/* Decoding.Symbol[] */ syms, \n/* ByteBuffer */ out) {\n    let rans0 = input.getInt();\n    let rans1 = input.getInt();\n    let rans2 = input.getInt();\n    let rans3 = input.getInt();\n    const /* int */ outputSize = out.remaining();\n    const /* int */ outputEnd = outputSize & ~3;\n    for (let i = 0; i < outputEnd; i += 4) {\n        const /* byte */ c0 = D.R[Decoding.get(rans0, TF_SHIFT)];\n        const /* byte */ c1 = D.R[Decoding.get(rans1, TF_SHIFT)];\n        const /* byte */ c2 = D.R[Decoding.get(rans2, TF_SHIFT)];\n        const /* byte */ c3 = D.R[Decoding.get(rans3, TF_SHIFT)];\n        out.putAt(i, c0);\n        out.putAt(i + 1, c1);\n        out.putAt(i + 2, c2);\n        out.putAt(i + 3, c3);\n        rans0 = Decoding.advanceSymbolStep(rans0, syms[0xff & c0], TF_SHIFT);\n        rans1 = Decoding.advanceSymbolStep(rans1, syms[0xff & c1], TF_SHIFT);\n        rans2 = Decoding.advanceSymbolStep(rans2, syms[0xff & c2], TF_SHIFT);\n        rans3 = Decoding.advanceSymbolStep(rans3, syms[0xff & c3], TF_SHIFT);\n        rans0 = Decoding.renormalize(rans0, input);\n        rans1 = Decoding.renormalize(rans1, input);\n        rans2 = Decoding.renormalize(rans2, input);\n        rans3 = Decoding.renormalize(rans3, input);\n    }\n    out.setPosition(outputEnd);\n    let /* byte */ c;\n    switch (outputSize & 3) {\n        case 0:\n            break;\n        case 1:\n            c = D.R[Decoding.get(rans0, TF_SHIFT)];\n            Decoding.advanceSymbol(rans0, input, syms[0xff & c], TF_SHIFT);\n            out.put(c);\n            break;\n        case 2:\n            c = D.R[Decoding.get(rans0, TF_SHIFT)];\n            Decoding.advanceSymbol(rans0, input, syms[0xff & c], TF_SHIFT);\n            out.put(c);\n            c = D.R[Decoding.get(rans1, TF_SHIFT)];\n            Decoding.advanceSymbol(rans1, input, syms[0xff & c], TF_SHIFT);\n            out.put(c);\n            break;\n        case 3:\n            c = D.R[Decoding.get(rans0, TF_SHIFT)];\n            Decoding.advanceSymbol(rans0, input, syms[0xff & c], TF_SHIFT);\n            out.put(c);\n            c = D.R[Decoding.get(rans1, TF_SHIFT)];\n            Decoding.advanceSymbol(rans1, input, syms[0xff & c], TF_SHIFT);\n            out.put(c);\n            c = D.R[Decoding.get(rans2, TF_SHIFT)];\n            Decoding.advanceSymbol(rans2, input, syms[0xff & c], TF_SHIFT);\n            out.put(c);\n            break;\n        default:\n            throw new CramMalformedError('invalid output size encountered during rANS decoding');\n    }\n    out.setPosition(0);\n}\n//# sourceMappingURL=d04.js.map","// @ts-nocheck\nimport { TF_SHIFT } from \"./constants.js\";\nimport Decoding from \"./decoding.js\";\nexport default function uncompress(\n/* ByteBuffer */ input, \n/* ByteBuffer */ output, \n/* Decoding.AriDecoder[] */ D, \n/* Decoding.Symbol[][] */ syms) {\n    const /* int */ outputSize = output.remaining();\n    let rans0 = input.getInt();\n    let rans1 = input.getInt();\n    let rans2 = input.getInt();\n    let rans7 = input.getInt();\n    const /* int */ isz4 = outputSize >> 2;\n    let /* int */ i0 = 0;\n    let /* int */ i1 = isz4;\n    let /* int */ i2 = 2 * isz4;\n    let /* int */ i7 = 3 * isz4;\n    let /* int */ l0 = 0;\n    let /* int */ l1 = 0;\n    let /* int */ l2 = 0;\n    let /* int */ l7 = 0;\n    for (; i0 < isz4; i0 += 1, i1 += 1, i2 += 1, i7 += 1) {\n        const /* int */ c0 = 0xff & D[l0].R[Decoding.get(rans0, TF_SHIFT)];\n        const /* int */ c1 = 0xff & D[l1].R[Decoding.get(rans1, TF_SHIFT)];\n        const /* int */ c2 = 0xff & D[l2].R[Decoding.get(rans2, TF_SHIFT)];\n        const /* int */ c7 = 0xff & D[l7].R[Decoding.get(rans7, TF_SHIFT)];\n        output.putAt(i0, c0);\n        output.putAt(i1, c1);\n        output.putAt(i2, c2);\n        output.putAt(i7, c7);\n        rans0 = Decoding.advanceSymbolStep(rans0, syms[l0][c0], TF_SHIFT);\n        rans1 = Decoding.advanceSymbolStep(rans1, syms[l1][c1], TF_SHIFT);\n        rans2 = Decoding.advanceSymbolStep(rans2, syms[l2][c2], TF_SHIFT);\n        rans7 = Decoding.advanceSymbolStep(rans7, syms[l7][c7], TF_SHIFT);\n        rans0 = Decoding.renormalize(rans0, input);\n        rans1 = Decoding.renormalize(rans1, input);\n        rans2 = Decoding.renormalize(rans2, input);\n        rans7 = Decoding.renormalize(rans7, input);\n        l0 = c0;\n        l1 = c1;\n        l2 = c2;\n        l7 = c7;\n    }\n    // Remainder\n    for (; i7 < outputSize; i7 += 1) {\n        const /* int */ c7 = 0xff & D[l7].R[Decoding.get(rans7, TF_SHIFT)];\n        output.putAt(i7, c7);\n        rans7 = Decoding.advanceSymbol(rans7, input, syms[l7][c7], TF_SHIFT);\n        l7 = c7;\n    }\n}\n//# sourceMappingURL=d14.js.map","// @ts-nocheck\nimport { CramMalformedError } from \"../errors.js\";\nimport { TOTFREQ } from \"./constants.js\";\nimport Decoding from \"./decoding.js\";\nfunction assert(result) {\n    if (!result) {\n        throw new CramMalformedError('assertion failed');\n    }\n}\nexport function readStatsO0(\n/* ByteBuffer */ cp, \n/* Decoding.AriDecoder */ decoder, \n/* Decoding.RansDecSymbol[] */ syms) {\n    // Pre-compute reverse lookup of frequency.\n    let rle = 0;\n    let x = 0;\n    let j = cp.get() & 0xff;\n    do {\n        if (decoder.fc[j] == null) {\n            decoder.fc[j] = new Decoding.FC();\n        }\n        decoder.fc[j].F = cp.get() & 0xff;\n        if (decoder.fc[j].F >= 128) {\n            decoder.fc[j].F &= ~128;\n            decoder.fc[j].F = ((decoder.fc[j].F & 127) << 8) | (cp.get() & 0xff);\n        }\n        decoder.fc[j].C = x;\n        Decoding.symbolInit(syms[j], decoder.fc[j].C, decoder.fc[j].F);\n        /* Build reverse lookup table */\n        if (!decoder.R) {\n            decoder.R = new Array(TOTFREQ);\n        }\n        decoder.R.fill(j, x, x + decoder.fc[j].F);\n        x += decoder.fc[j].F;\n        if (rle === 0 && j + 1 === (0xff & cp.getByteAt(cp.position()))) {\n            j = cp.get() & 0xff;\n            rle = cp.get() & 0xff;\n        }\n        else if (rle !== 0) {\n            rle -= 1;\n            j += 1;\n        }\n        else {\n            j = cp.get() & 0xff;\n        }\n    } while (j !== 0);\n    assert(x < TOTFREQ);\n}\nexport function readStatsO1(\n/* ByteBuffer */ cp, \n/*  Decoding.AriDecoder[] */ D, \n/* Decoding.RansDecSymbol[][] */ syms) {\n    let rlei = 0;\n    let i = 0xff & cp.get();\n    do {\n        let rlej = 0;\n        let x = 0;\n        let j = 0xff & cp.get();\n        if (D[i] == null) {\n            D[i] = new Decoding.AriDecoder();\n        }\n        do {\n            if (D[i].fc[j] == null) {\n                D[i].fc[j] = new Decoding.FC();\n            }\n            D[i].fc[j].F = 0xff & cp.get();\n            if (D[i].fc[j].F >= 128) {\n                D[i].fc[j].F &= ~128;\n                D[i].fc[j].F = ((D[i].fc[j].F & 127) << 8) | (0xff & cp.get());\n            }\n            D[i].fc[j].C = x;\n            if (D[i].fc[j].F === 0) {\n                D[i].fc[j].F = TOTFREQ;\n            }\n            if (syms[i][j] == null) {\n                syms[i][j] = new Decoding.RansDecSymbol();\n            }\n            Decoding.symbolInit(syms[i][j], D[i].fc[j].C, D[i].fc[j].F);\n            /* Build reverse lookup table */\n            if (D[i].R == null) {\n                D[i].R = new Array(TOTFREQ);\n            }\n            D[i].R.fill(j, x, x + D[i].fc[j].F);\n            x += D[i].fc[j].F;\n            assert(x <= TOTFREQ);\n            if (rlej === 0 && j + 1 === (0xff & cp.getByteAt(cp.position()))) {\n                j = 0xff & cp.get();\n                rlej = 0xff & cp.get();\n            }\n            else if (rlej !== 0) {\n                rlej -= 1;\n                j += 1;\n            }\n            else {\n                j = 0xff & cp.get();\n            }\n        } while (j !== 0);\n        if (rlei === 0 && i + 1 === (0xff & cp.getByteAt(cp.position()))) {\n            i = 0xff & cp.get();\n            rlei = 0xff & cp.get();\n        }\n        else if (rlei !== 0) {\n            rlei -= 1;\n            i += 1;\n        }\n        else {\n            i = 0xff & cp.get();\n        }\n    } while (i !== 0);\n}\n//# sourceMappingURL=frequencies.js.map","// @ts-nocheck\nimport { CramMalformedError } from \"../errors.js\";\nimport D04 from \"./d04.js\";\nimport D14 from \"./d14.js\";\nimport Decoding from \"./decoding.js\";\nimport { readStatsO0, readStatsO1 } from \"./frequencies.js\";\n// const /* int */ ORDER_BYTE_LENGTH = 1\n// const /* int */ COMPRESSED_BYTE_LENGTH = 4\nconst /* int */ RAW_BYTE_LENGTH = 4;\n// const /* int */ PREFIX_BYTE_LENGTH =\n//   ORDER_BYTE_LENGTH + COMPRESSED_BYTE_LENGTH + RAW_BYTE_LENGTH\n// enum ORDER {\n//     ZERO, ONE;\n//     static ORDER fromInt(const /* int */ value) {\n//         try {\n//             return ORDER.values()[value];\n//         } catch (const ArrayIndexOutOfBoundsException e) {\n//             throw new RuntimeException(\"Unknown rANS order: \" + value);\n//         }\n//     }\n// }\n// static ByteBuffer compress(const ByteBuffer input, const ORDER order, const ByteBuffer out) {\n//     if (input.remaining() == 0)\n//         return EMPTY_BUFFER;\n//     if (input.remaining() < 4)\n//         return encode_order0_way4(input, out);\n//     switch (order) {\n//         case ZERO:\n//             return encode_order0_way4(input, out);\n//         case ONE:\n//             return encode_order1_way4(input, out);\n//         default:\n//             throw new RuntimeException(\"Unknown rANS order: \" + order);\n//     }\n// }\n// static /* ByteBuffer */ allocateIfNeeded(/* const int */ in_size,\n//                                            /* const ByteBuffer */ out_buf) {\n//     const /* int */ compressedSize = (/* int */) (1.05 * in_size + 257 * 257 * 3 + 4);\n//     if (out_buf == null)\n//         return ByteBuffer.allocate(compressedSize);\n//     if (out_buf.remaining() < compressedSize)\n//         throw new RuntimeException(\"Insufficient buffer size.\");\n//     out_buf.order(ByteOrder.LITTLE_ENDIAN);\n//     return out_buf;\n// }\n// static ByteBuffer encode_order0_way4(const ByteBuffer input,\n//                                              ByteBuffer out_buf) {\n//     const /* int */ in_size = input.remaining();\n//     out_buf = allocateIfNeeded(in_size, out_buf);\n//     const /* int */ freqTableStart = PREFIX_BYTE_LENGTH;\n//     out_buf.position(freqTableStart);\n//     const /* int */[] F = Frequencies.calcFrequencies_o0(in);\n//     const RansEncSymbol[] syms = Frequencies.buildSyms_o0(F);\n//     const ByteBuffer cp = out_buf.slice();\n//     const /* int */ frequencyTable_size = Frequencies.writeFrequencies_o0(cp, F);\n//     input.rewind();\n//     const /* int */ compressedBlob_size = E04.compress(input, syms, cp);\n//     finalizeCompressed(0, out_buf, in_size, frequencyTable_size,\n//             compressedBlob_size);\n//     return out_buf;\n// }\n// static ByteBuffer encode_order1_way4(const ByteBuffer input,\n//                                              ByteBuffer out_buf) {\n//     const /* int */ in_size = input.remaining();\n//     out_buf = allocateIfNeeded(in_size, out_buf);\n//     const /* int */ freqTableStart = PREFIX_BYTE_LENGTH;\n//     out_buf.position(freqTableStart);\n//     const /* int */[][] F = Frequencies.calcFrequencies_o1(in);\n//     const RansEncSymbol[][] syms = Frequencies.buildSyms_o1(F);\n//     const ByteBuffer cp = out_buf.slice();\n//     const /* int */ frequencyTable_size = Frequencies.writeFrequencies_o1(cp, F);\n//     input.rewind();\n//     const /* int */ compressedBlob_size = E14.compress(input, syms, cp);\n//     finalizeCompressed(1, out_buf, in_size, frequencyTable_size,\n//             compressedBlob_size);\n//     return out_buf;\n// }\n// static void finalizeCompressed(const /* int */ order, const ByteBuffer out_buf,\n//                                        const /* int */ in_size, const /* int */ frequencyTable_size, const /* int */ compressedBlob_size) {\n//     out_buf.limit(PREFIX_BYTE_LENGTH + frequencyTable_size\n//             + compressedBlob_size);\n//     out_buf.put(0, (byte) order);\n//     out_buf.order(ByteOrder.LITTLE_ENDIAN);\n//     const /* int */ compressedSizeOffset = ORDER_BYTE_LENGTH;\n//     out_buf.putInt(compressedSizeOffset, frequencyTable_size\n//             + compressedBlob_size);\n//     const /* int */ rawSizeOffset = ORDER_BYTE_LENGTH + COMPRESSED_BYTE_LENGTH;\n//     out_buf.putInt(rawSizeOffset, in_size);\n//     out_buf.rewind();\n// }\nfunction uncompressOrder0Way4(\n/* const ByteBuffer  */ input, \n/* const ByteBuffer  */ out) {\n    // input.order(ByteOrder.LITTLE_ENDIAN);\n    const D = new Decoding.AriDecoder();\n    const syms = new Array(256);\n    for (let i = 0; i < syms.length; i += 1) {\n        syms[i] = new Decoding.DecodingSymbol();\n    }\n    readStatsO0(input, D, syms);\n    D04(input, D, syms, out);\n    return out;\n}\nfunction uncompressOrder1Way4(\n/* const ByteBuffer */ input, \n/* const ByteBuffer */ output) {\n    const D = new Array(256);\n    for (let i = 0; i < D.length; i += 1) {\n        D[i] = new Decoding.AriDecoder();\n    }\n    const /* Decoding.RansDecSymbol[][]  */ syms = new Array(256);\n    for (let i = 0; i < syms.length; i += 1) {\n        syms[i] = new Array(256);\n        for (let j = 0; j < syms[i].length; j += 1) {\n            syms[i][j] = new Decoding.DecodingSymbol();\n        }\n    }\n    readStatsO1(input, D, syms);\n    D14(input, output, D, syms);\n    return output;\n}\n/* compat layer to make a node buffer act like a java ByteBuffer */\nclass ByteBuffer {\n    constructor(nodeBuffer, initialInputPosition = 0) {\n        this._buffer = nodeBuffer;\n        this._dataView = new DataView(nodeBuffer.buffer);\n        this._position = initialInputPosition;\n        this.length = nodeBuffer.length;\n    }\n    get() {\n        const b = this._buffer[this._position];\n        this._position += 1;\n        return b;\n    }\n    getByte() {\n        return this.get();\n    }\n    getByteAt(position) {\n        return this._buffer[position];\n    }\n    position() {\n        return this._position;\n    }\n    put(val) {\n        this._buffer[this._position] = val;\n        this._position += 1;\n        return val;\n    }\n    putAt(position, val) {\n        this._buffer[position] = val;\n        return val;\n    }\n    setPosition(pos) {\n        this._position = pos;\n        return pos;\n    }\n    getInt() {\n        const i = this._dataView.getInt32(this._position, true);\n        this._position += 4;\n        return i;\n    }\n    remaining() {\n        return this._buffer.length - this._position;\n    }\n}\n// static /* const */ ByteBuffer EMPTY_BUFFER = ByteBuffer.allocate(0);\nexport default function uncompress(inputBuffer, outputBuffer, initialInputPosition = 0) {\n    if (inputBuffer.length === 0) {\n        outputBuffer.fill(0);\n        return outputBuffer;\n    }\n    const input = new ByteBuffer(inputBuffer, initialInputPosition);\n    // input.order(ByteOrder.LITTLE_ENDIAN);\n    const order = input.get();\n    if (order !== 0 && order !== 1) {\n        throw new CramMalformedError(`Invalid rANS order ${order}`);\n    }\n    const /* int */ inputSize = input.getInt();\n    if (inputSize !== input.remaining() - RAW_BYTE_LENGTH) {\n        throw new CramMalformedError('Incorrect input length.');\n    }\n    const /* int */ outputSize = input.getInt();\n    const output = new ByteBuffer(outputBuffer || new Uint8Array(outputSize));\n    // TODO output.limit(outputSize)\n    if (output.length < outputSize) {\n        throw new CramMalformedError(`Output buffer too small to fit ${outputSize} bytes.`);\n    }\n    switch (order) {\n        case 0:\n            return uncompressOrder0Way4(input, output);\n        case 1:\n            return uncompressOrder1Way4(input, output);\n        default:\n            throw new CramMalformedError(`Invalid rANS order: ${order}`);\n    }\n}\n//# sourceMappingURL=index.js.map","export function parseHeaderText(text) {\n    const lines = text.split(/\\r?\\n/);\n    const data = [];\n    for (const line of lines) {\n        const [tag, ...fields] = line.split(/\\t/);\n        if (tag) {\n            data.push({\n                tag: tag.slice(1),\n                data: fields.map(f => {\n                    const r = f.indexOf(':');\n                    return r !== -1\n                        ? {\n                            tag: f.slice(0, r),\n                            value: f.slice(r + 1),\n                        }\n                        : // @CO lines are not comma separated.\n                            // See \"samtools view -H c2\\#pad.3.0.cram\"\n                            // so, just store value tag and value itself\n                            {\n                                tag: f,\n                                value: '',\n                            };\n                }),\n            });\n        }\n    }\n    return data;\n}\n//# sourceMappingURL=sam.js.map","import * as pkg from 'pako';\nconst { inflate } = pkg;\nexport function unzip(input) {\n    return inflate(input);\n}\n//# sourceMappingURL=unzip.js.map","export class CramBufferOverrunError extends Error {\n}\nexport function getBits(data, cursor, numBits) {\n    let val = 0;\n    if (cursor.bytePosition + (7 - cursor.bitPosition + numBits) / 8 >\n        data.length) {\n        throw new CramBufferOverrunError('read error during decoding. the file seems to be truncated.');\n    }\n    for (let dlen = numBits; dlen; dlen--) {\n        // get the next `dlen` bits in the input, put them in val\n        val <<= 1;\n        val |= (data[cursor.bytePosition] >> cursor.bitPosition) & 1;\n        cursor.bitPosition -= 1;\n        if (cursor.bitPosition < 0) {\n            cursor.bytePosition += 1;\n        }\n        cursor.bitPosition &= 7;\n    }\n    return val;\n}\n//# sourceMappingURL=getBits.js.map","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import md5 from 'md5';\nexport const TWO_PWR_16_DBL = 1 << 16;\nexport const TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nexport const TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nexport const TWO_PWR_24_DBL = 1 << 24;\nexport const TWO_PWR_56_DBL = TWO_PWR_24_DBL * TWO_PWR_32_DBL;\nexport function itf8Size(v) {\n    if (!(v & ~0x7f)) {\n        return 1;\n    }\n    if (!(v & ~0x3fff)) {\n        return 2;\n    }\n    if (!(v & ~0x1fffff)) {\n        return 3;\n    }\n    if (!(v & ~0xfffffff)) {\n        return 4;\n    }\n    return 5;\n}\nexport function parseItf8(buffer, initialOffset) {\n    let offset = initialOffset;\n    const countFlags = buffer[offset];\n    let result;\n    // Single byte value (0xxxxxxx)\n    if (countFlags < 0x80) {\n        result = countFlags;\n        offset += 1;\n    }\n    // Two byte value (10xxxxxx)\n    else if (countFlags < 0xc0) {\n        result = ((countFlags & 0x3f) << 8) | buffer[offset + 1];\n        offset += 2;\n    }\n    // Three byte value (110xxxxx)\n    else if (countFlags < 0xe0) {\n        result =\n            ((countFlags & 0x1f) << 16) |\n                (buffer[offset + 1] << 8) |\n                buffer[offset + 2];\n        offset += 3;\n    }\n    // Four byte value (1110xxxx)\n    else if (countFlags < 0xf0) {\n        result =\n            ((countFlags & 0x0f) << 24) |\n                (buffer[offset + 1] << 16) |\n                (buffer[offset + 2] << 8) |\n                buffer[offset + 3];\n        offset += 4;\n    }\n    // Five byte value (11110xxx)\n    else {\n        result =\n            ((countFlags & 0x0f) << 28) |\n                (buffer[offset + 1] << 20) |\n                (buffer[offset + 2] << 12) |\n                (buffer[offset + 3] << 4) |\n                (buffer[offset + 4] & 0x0f);\n        offset += 5;\n    }\n    return [result, offset - initialOffset];\n}\nexport function parseLtf8(buffer, initialOffset) {\n    let offset = initialOffset;\n    const countFlags = buffer[offset];\n    let value;\n    // Single byte value < 0x80\n    if (countFlags < 0x80) {\n        value = countFlags;\n        offset += 1;\n    }\n    // Two byte value < 0xC0\n    else if (countFlags < 0xc0) {\n        value = ((countFlags << 8) | buffer[offset + 1]) & 0x3fff;\n        offset += 2;\n    }\n    // Three byte value < 0xE0\n    else if (countFlags < 0xe0) {\n        value =\n            ((countFlags & 0x3f) << 16) |\n                (buffer[offset + 1] << 8) |\n                buffer[offset + 2];\n        offset += 3;\n    }\n    // Four byte value < 0xF0\n    else if (countFlags < 0xf0) {\n        value =\n            ((countFlags & 0x1f) << 24) |\n                (buffer[offset + 1] << 16) |\n                (buffer[offset + 2] << 8) |\n                buffer[offset + 3];\n        offset += 4;\n    }\n    // Five byte value < 0xF8\n    else if (countFlags < 0xf8) {\n        value =\n            (buffer[offset] & 0x0f) * TWO_PWR_32_DBL +\n                ((buffer[offset + 1] << 24) |\n                    (buffer[offset + 2] << 16) |\n                    (buffer[offset + 3] << 8) |\n                    buffer[offset + 4]);\n        offset += 5;\n    }\n    // Six byte value < 0xFC\n    else if (countFlags < 0xfc) {\n        value =\n            (((buffer[offset] & 0x07) << 8) | buffer[offset + 1]) * TWO_PWR_32_DBL +\n                ((buffer[offset + 2] << 24) |\n                    (buffer[offset + 3] << 16) |\n                    (buffer[offset + 4] << 8) |\n                    buffer[offset + 5]);\n        offset += 6;\n    }\n    // Seven byte value < 0xFE\n    else if (countFlags < 0xfe) {\n        value =\n            (((buffer[offset] & 0x03) << 16) |\n                (buffer[offset + 1] << 8) |\n                buffer[offset + 2]) *\n                TWO_PWR_32_DBL +\n                ((buffer[offset + 3] << 24) |\n                    (buffer[offset + 4] << 16) |\n                    (buffer[offset + 5] << 8) |\n                    buffer[offset + 6]);\n        offset += 7;\n    }\n    // Eight byte value < 0xFF\n    else if (countFlags < 0xff) {\n        value =\n            ((buffer[offset + 1] << 24) |\n                (buffer[offset + 2] << 16) |\n                (buffer[offset + 3] << 8) |\n                buffer[offset + 4]) *\n                TWO_PWR_32_DBL +\n                ((buffer[offset + 5] << 24) |\n                    (buffer[offset + 6] << 16) |\n                    (buffer[offset + 7] << 8) |\n                    buffer[offset + 8]);\n        offset += 8;\n    }\n    // Nine byte value\n    else {\n        value =\n            buffer[offset + 1] * TWO_PWR_56_DBL +\n                ((buffer[offset + 2] << 24) |\n                    (buffer[offset + 3] << 16) |\n                    (buffer[offset + 4] << 8) |\n                    buffer[offset + 5]) *\n                    TWO_PWR_32_DBL +\n                ((buffer[offset + 6] << 24) |\n                    (buffer[offset + 7] << 16) |\n                    (buffer[offset + 8] << 8) |\n                    buffer[offset + 9]);\n        offset += 9;\n    }\n    return [value, offset - initialOffset];\n}\nexport function parseItem(buffer, parser, startBufferPosition = 0, startFilePosition = 0) {\n    const { offset, value } = parser(buffer, startBufferPosition);\n    return {\n        ...value,\n        _endPosition: offset + startFilePosition,\n        _size: offset - startBufferPosition,\n    };\n}\nexport function tinyMemoize(_class, methodName) {\n    const method = _class.prototype[methodName];\n    const memoAttrName = `_memo_${methodName}`;\n    _class.prototype[methodName] = function _tinyMemoized() {\n        if (!(memoAttrName in this)) {\n            const res = method.call(this);\n            this[memoAttrName] = res;\n            Promise.resolve(res).catch(() => {\n                delete this[memoAttrName];\n            });\n        }\n        return this[memoAttrName];\n    };\n}\nexport function sequenceMD5(seq) {\n    return md5(seq.toUpperCase().replaceAll(/[^\\u0021-\\u007e]/g, ''));\n}\n//# sourceMappingURL=util.js.map","import { parseItf8, parseLtf8 } from \"./util.js\";\nexport function cramFileDefinition() {\n    return {\n        parser: (b, _startOffset = 0) => {\n            const dataView = new DataView(b.buffer, b.byteOffset, b.length);\n            const decoder = new TextDecoder('utf8');\n            let offset = 0;\n            const magic = decoder.decode(b.subarray(offset, offset + 4));\n            offset += 4;\n            const majorVersion = dataView.getUint8(offset);\n            offset += 1;\n            const minorVersion = dataView.getUint8(offset);\n            offset += 1;\n            const fileId = decoder\n                .decode(b.subarray(offset, offset + 20))\n                .replaceAll('\\0', '');\n            offset += 20;\n            return {\n                value: {\n                    magic,\n                    majorVersion,\n                    minorVersion,\n                    fileId,\n                },\n                offset,\n            };\n        },\n        maxLength: 26,\n    };\n}\nexport function cramBlockHeader() {\n    const parser = (buffer, _startOffset = 0) => {\n        const b = buffer;\n        const dataView = new DataView(b.buffer, b.byteOffset, b.length);\n        let offset = 0;\n        const d = dataView.getUint8(offset);\n        const compressionMethod = [\n            'raw',\n            'gzip',\n            'bzip2',\n            'lzma',\n            'rans',\n            'rans4x16',\n            'arith',\n            'fqzcomp',\n            'tok3',\n        ][d];\n        if (!compressionMethod) {\n            throw new Error(`compression method number ${d} not implemented`);\n        }\n        offset += 1;\n        const c = dataView.getUint8(offset);\n        const contentType = [\n            'FILE_HEADER',\n            'COMPRESSION_HEADER',\n            'MAPPED_SLICE_HEADER',\n            'UNMAPPED_SLICE_HEADER', // < only used in cram v1\n            'EXTERNAL_DATA',\n            'CORE_DATA',\n        ][c];\n        if (!contentType) {\n            throw new Error(`invalid block content type id ${c}`);\n        }\n        offset += 1;\n        const [contentId, newOffset1] = parseItf8(buffer, offset);\n        offset += newOffset1;\n        const [compressedSize, newOffset2] = parseItf8(buffer, offset);\n        offset += newOffset2;\n        const [uncompressedSize, newOffset3] = parseItf8(buffer, offset);\n        offset += newOffset3;\n        return {\n            offset,\n            value: {\n                uncompressedSize,\n                compressedSize,\n                contentId,\n                contentType: contentType,\n                compressionMethod: compressionMethod,\n            },\n        };\n    };\n    return { parser, maxLength: 17 };\n}\nexport function cramBlockCrc32() {\n    return {\n        parser: (buffer, offset) => {\n            const b = buffer;\n            const dataView = new DataView(b.buffer, b.byteOffset, b.length);\n            const crc32 = dataView.getUint32(offset, true);\n            offset += 4;\n            return {\n                offset,\n                value: {\n                    crc32,\n                },\n            };\n        },\n        maxLength: 4,\n    };\n}\nfunction makeTagSet(buffer, stringStart, stringEnd) {\n    const decoder = new TextDecoder('utf8');\n    const str = decoder.decode(buffer.subarray(stringStart, stringEnd));\n    const tags = [];\n    for (let i = 0; i < str.length; i += 3) {\n        tags.push(str.slice(i, i + 3));\n    }\n    return tags;\n}\nexport function cramTagDictionary() {\n    return {\n        parser: (buffer, offset) => {\n            const [size, newOffset1] = parseItf8(buffer, offset);\n            offset += newOffset1;\n            const subbuf = buffer.subarray(offset, offset + size);\n            offset += size;\n            const tagSets = [];\n            let stringStart = 0;\n            let i = 0;\n            for (; i < subbuf.length; i++) {\n                if (!subbuf[i]) {\n                    tagSets.push(makeTagSet(subbuf, stringStart, i));\n                    stringStart = i + 1;\n                }\n            }\n            if (i > stringStart) {\n                tagSets.push(makeTagSet(subbuf, stringStart, i));\n            }\n            return {\n                value: {\n                    size,\n                    ents: tagSets,\n                },\n                offset,\n            };\n        },\n    };\n}\nexport function cramPreservationMap() {\n    return {\n        parser: (buffer, offset) => {\n            const b = buffer;\n            const dataView = new DataView(b.buffer, b.byteOffset, b.length);\n            const [mapSize, newOffset1] = parseItf8(buffer, offset);\n            offset += newOffset1;\n            const [mapCount, newOffset2] = parseItf8(buffer, offset);\n            offset += newOffset2;\n            const ents = [];\n            for (let i = 0; i < mapCount; i++) {\n                const key = String.fromCharCode(buffer[offset]) +\n                    String.fromCharCode(buffer[offset + 1]);\n                offset += 2;\n                if (key === 'MI' ||\n                    key === 'UI' ||\n                    key === 'PI' ||\n                    key === 'RN' ||\n                    key === 'AP' ||\n                    key === 'RR') {\n                    ents.push({\n                        key,\n                        value: !!dataView.getUint8(offset),\n                    });\n                    offset += 1;\n                }\n                else if (key === 'SM') {\n                    ents.push({\n                        key,\n                        value: [\n                            dataView.getUint8(offset),\n                            dataView.getUint8(offset + 1),\n                            dataView.getUint8(offset + 2),\n                            dataView.getUint8(offset + 3),\n                            dataView.getUint8(offset + 4),\n                        ],\n                    });\n                    offset += 5;\n                }\n                else if (key === 'TD') {\n                    const { offset: offsetRet, value } = cramTagDictionary().parser(buffer, offset);\n                    ents.push({ key, value: value.ents });\n                    offset = offsetRet;\n                }\n                else {\n                    throw new Error(`unknown key ${key}`);\n                }\n            }\n            return {\n                value: {\n                    mapSize,\n                    mapCount,\n                    ents,\n                },\n                offset,\n            };\n        },\n    };\n}\nfunction formatMap(data) {\n    const map = {};\n    for (const { key, value } of data.ents) {\n        if (map[key]) {\n            console.warn(`duplicate key ${key} in map`);\n        }\n        map[key] = value;\n    }\n    return map;\n}\nexport function isMappedSliceHeader(header) {\n    return typeof header.refSeqId === 'number';\n}\n// assemble a section parser for the unmapped slice header, with slight\n// variations depending on the major version of the cram file\nfunction cramUnmappedSliceHeader(majorVersion) {\n    let maxLength = 0;\n    maxLength += 5;\n    maxLength += 9;\n    maxLength += 5 * 2;\n    maxLength += 16;\n    const parser = (buffer, offset) => {\n        const [numRecords, newOffset1] = parseItf8(buffer, offset);\n        offset += newOffset1;\n        let recordCounter = 0;\n        // recordCounter is itf8 in a CRAM v2 file, absent in CRAM v1\n        if (majorVersion >= 3) {\n            const [rc, newOffset2] = parseLtf8(buffer, offset);\n            offset += newOffset2;\n            recordCounter = rc;\n        }\n        else if (majorVersion === 2) {\n            const [rc, newOffset2] = parseItf8(buffer, offset);\n            offset += newOffset2;\n            recordCounter = rc;\n        }\n        else {\n            console.warn('recordCounter=0');\n        }\n        const [numBlocks, newOffset3] = parseItf8(buffer, offset);\n        offset += newOffset3;\n        const [numContentIds, newOffset4] = parseItf8(buffer, offset);\n        offset += newOffset4;\n        const contentIds = [];\n        for (let i = 0; i < numContentIds; i++) {\n            const [id, newOffset5] = parseItf8(buffer, offset);\n            offset += newOffset5;\n            contentIds.push(id);\n        }\n        // the md5 sum is missing in cram v1\n        let md5;\n        if (majorVersion >= 2) {\n            md5 = [...buffer.subarray(offset, offset + 16)];\n            offset += 16;\n        }\n        return {\n            value: {\n                recordCounter,\n                md5,\n                contentIds,\n                numContentIds,\n                numBlocks,\n                numRecords,\n            },\n            offset,\n        };\n    };\n    return {\n        parser,\n        maxLength: (numContentIds) => maxLength + numContentIds * 5,\n    };\n}\n// assembles a section parser for the unmapped slice header, with slight\n// variations depending on the major version of the cram file\nfunction cramMappedSliceHeader(majorVersion) {\n    let maxLength = 0;\n    maxLength += 5 * 4; // EL0\n    maxLength += 9; // EL1\n    maxLength += 5 * 3; // EL2 ITF8s\n    maxLength += 16; // MD5\n    return {\n        parser: (buffer, offset) => {\n            // L0\n            const [refSeqId, newOffset1] = parseItf8(buffer, offset);\n            offset += newOffset1;\n            const [refSeqStart, newOffset2] = parseItf8(buffer, offset);\n            offset += newOffset2;\n            const [refSeqSpan, newOffset3] = parseItf8(buffer, offset);\n            offset += newOffset3;\n            const [numRecords, newOffset4] = parseItf8(buffer, offset);\n            offset += newOffset4;\n            // EL0\n            // L1\n            let recordCounter = 0;\n            if (majorVersion >= 3) {\n                const [rc, newOffset5] = parseLtf8(buffer, offset);\n                offset += newOffset5;\n                recordCounter = rc;\n            }\n            else if (majorVersion === 2) {\n                const [rc, newOffset5] = parseItf8(buffer, offset);\n                offset += newOffset5;\n                recordCounter = rc;\n            }\n            else {\n                console.warn('majorVersion is <2, recordCounter set to 0');\n            }\n            // EL1\n            // L2\n            const [numBlocks, newOffset6] = parseItf8(buffer, offset);\n            offset += newOffset6;\n            const [numContentIds, newOffset7] = parseItf8(buffer, offset);\n            offset += newOffset7;\n            const contentIds = [];\n            for (let i = 0; i < numContentIds; i++) {\n                const [id, newOffset5] = parseItf8(buffer, offset);\n                offset += newOffset5;\n                contentIds.push(id);\n            }\n            const [refBaseBlockId, newOffset8] = parseItf8(buffer, offset);\n            offset += newOffset8;\n            // EL2\n            // the md5 sum is missing in cram v1\n            let md5;\n            if (majorVersion >= 2) {\n                md5 = [...buffer.subarray(offset, offset + 16)];\n                offset += 16;\n            }\n            return {\n                value: {\n                    md5,\n                    numBlocks,\n                    numRecords,\n                    numContentIds,\n                    refSeqSpan,\n                    refSeqId,\n                    refSeqStart,\n                    recordCounter,\n                    refBaseBlockId,\n                    contentIds,\n                },\n                offset,\n            };\n        },\n        maxLength: (numContentIds) => maxLength + numContentIds * 5,\n    };\n}\nfunction cramEncoding() {\n    return {\n        parser: (buffer, offset) => cramEncodingSub(buffer, offset),\n    };\n}\nfunction cramEncodingSub(buffer, offset) {\n    const b = buffer;\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length);\n    const [codecId, newOffset1] = parseItf8(buffer, offset);\n    offset += newOffset1;\n    const [parametersBytes, newOffset2] = parseItf8(buffer, offset);\n    offset += newOffset2;\n    const parameters = {};\n    if (codecId === 0) {\n        // NULL\n    }\n    else if (codecId === 1) {\n        // EXTERNAL\n        const [bc, newOffset3] = parseItf8(buffer, offset);\n        parameters.blockContentId = bc;\n        offset += newOffset3;\n    }\n    else if (codecId === 2) {\n        // GOLUMB\n        const [off, newOffset3] = parseItf8(buffer, offset);\n        parameters.offset = off;\n        offset += newOffset3;\n        const [M2, newOffset4] = parseItf8(buffer, offset);\n        parameters.M = M2;\n        offset += newOffset4;\n    }\n    else if (codecId === 3) {\n        // HUFFMAN_INT\n        const val = parseItf8(buffer, offset);\n        const numCodes = val[0];\n        offset += val[1];\n        const symbols = [];\n        for (let i = 0; i < numCodes; i++) {\n            const code = parseItf8(buffer, offset);\n            symbols.push(code[0]);\n            offset += code[1];\n        }\n        parameters.symbols = symbols;\n        const val2 = parseItf8(buffer, offset);\n        const numLengths = val[0];\n        parameters.numLengths = numLengths;\n        parameters.numCodes = numCodes;\n        parameters.numLengths = numLengths;\n        offset += val2[1];\n        const bitLengths = [];\n        for (let i = 0; i < numLengths; i++) {\n            const len = parseItf8(buffer, offset);\n            offset += len[1];\n            bitLengths.push(len[0]);\n        }\n        parameters.bitLengths = bitLengths;\n    }\n    else if (codecId === 4) {\n        // BYTE_ARRAY_LEN\n        const { value: lengthsEncoding, offset: newOffset1 } = cramEncodingSub(buffer, offset);\n        parameters.lengthsEncoding = lengthsEncoding;\n        offset = newOffset1;\n        const { value: valuesEncoding, offset: newOffset2 } = cramEncodingSub(buffer, offset);\n        parameters.valuesEncoding = valuesEncoding;\n        offset = newOffset2;\n    }\n    else if (codecId === 5) {\n        // BYTE_ARRAY_STOP\n        parameters.stopByte = dataView.getUint8(offset);\n        offset += 1;\n        const [blockContentId, newOffset1] = parseItf8(buffer, offset);\n        parameters.blockContentId = blockContentId;\n        offset += newOffset1;\n    }\n    else if (codecId === 6) {\n        // BETA\n        const [off, newOffset1] = parseItf8(buffer, offset);\n        parameters.offset = off;\n        offset += newOffset1;\n        const [len, newOffset2] = parseItf8(buffer, offset);\n        parameters.length = len;\n        offset += newOffset2;\n    }\n    else if (codecId === 7) {\n        // SUBEXP\n        const [off, newOffset1] = parseItf8(buffer, offset);\n        parameters.offset = off;\n        offset += newOffset1;\n        const [K, newOffset2] = parseItf8(buffer, offset);\n        parameters.K = K;\n        offset += newOffset2;\n    }\n    else if (codecId === 8) {\n        // GOLOMB_RICE\n        const [off, newOffset1] = parseItf8(buffer, offset);\n        parameters.offset = off;\n        offset += newOffset1;\n        const [l2m, newOffset2] = parseItf8(buffer, offset);\n        parameters.log2m = l2m;\n        offset += newOffset2;\n    }\n    else if (codecId === 9) {\n        // GAMMA\n        const [off, newOffset1] = parseItf8(buffer, offset);\n        parameters.offset = off;\n        offset += newOffset1;\n    }\n    else {\n        throw new Error(`unknown codecId ${codecId}`);\n    }\n    return {\n        value: {\n            codecId,\n            parametersBytes,\n            parameters,\n        },\n        offset,\n    };\n}\nfunction cramDataSeriesEncodingMap() {\n    return {\n        parser: (buffer, offset) => {\n            const [mapSize, newOffset1] = parseItf8(buffer, offset);\n            offset += newOffset1;\n            const [mapCount, newOffset2] = parseItf8(buffer, offset);\n            offset += newOffset2;\n            const ents = [];\n            for (let i = 0; i < mapCount; i++) {\n                const key = String.fromCharCode(buffer[offset]) +\n                    String.fromCharCode(buffer[offset + 1]);\n                offset += 2;\n                const { value, offset: newOffset4 } = cramEncodingSub(buffer, offset);\n                offset = newOffset4;\n                ents.push({ key, value });\n            }\n            return {\n                value: {\n                    mapSize,\n                    ents,\n                    mapCount,\n                },\n                offset,\n            };\n        },\n    };\n}\nfunction cramTagEncodingMap() {\n    return {\n        parser: (buffer, offset) => {\n            const [mapSize, newOffset1] = parseItf8(buffer, offset);\n            offset += newOffset1;\n            const [mapCount, newOffset2] = parseItf8(buffer, offset);\n            offset += newOffset2;\n            const ents = [];\n            for (let i = 0; i < mapCount; i++) {\n                const [k0, newOffset3] = parseItf8(buffer, offset);\n                offset += newOffset3;\n                const key = String.fromCharCode((k0 >> 16) & 0xff) +\n                    String.fromCharCode((k0 >> 8) & 0xff) +\n                    String.fromCharCode(k0 & 0xff);\n                const { value, offset: newOffset4 } = cramEncodingSub(buffer, offset);\n                offset = newOffset4;\n                ents.push({ key, value });\n            }\n            return {\n                value: {\n                    mapSize,\n                    ents,\n                    mapCount,\n                },\n                offset,\n            };\n        },\n    };\n}\nfunction cramCompressionHeader() {\n    return {\n        parser: (buffer, offset) => {\n            // TODO: if we want to support CRAM v1, we will need to refactor\n            // compression header into 2 parts to parse the landmarks, like the\n            // container header\n            const { value: preservation, offset: newOffset1 } = cramPreservationMap().parser(buffer, offset);\n            offset = newOffset1;\n            const { value: dataSeriesEncoding, offset: newOffset2 } = cramDataSeriesEncodingMap().parser(buffer, offset);\n            offset = newOffset2;\n            const { value: tagEncoding, offset: newOffset3 } = cramTagEncodingMap().parser(buffer, offset);\n            offset = newOffset3;\n            return {\n                value: {\n                    dataSeriesEncoding: formatMap(dataSeriesEncoding),\n                    preservation: formatMap(preservation),\n                    tagEncoding: formatMap(tagEncoding),\n                },\n                offset,\n            };\n        },\n    };\n}\nfunction cramContainerHeader1(majorVersion) {\n    let maxLength = 4;\n    maxLength += 5 * 4;\n    maxLength += 9;\n    maxLength += 9;\n    maxLength += 5 + 5;\n    return {\n        maxLength,\n        parser: (buffer, offset) => {\n            const b = buffer;\n            const dataView = new DataView(b.buffer, b.byteOffset, b.length);\n            // byte size of the container data (blocks)\n            const length = dataView.getInt32(offset, true);\n            offset += 4;\n            // reference sequence identifier:\n            // -1 for unmapped reads,\n            // -2 for multiple reference sequences\n            const [refSeqId, newOffset1] = parseItf8(buffer, offset);\n            offset += newOffset1;\n            const [refSeqStart, newOffset2] = parseItf8(buffer, offset);\n            offset += newOffset2;\n            const [alignmentSpan, newOffset3] = parseItf8(buffer, offset);\n            offset += newOffset3;\n            const [numRecords, newOffset4] = parseItf8(buffer, offset);\n            offset += newOffset4;\n            let recordCounter = 0;\n            if (majorVersion >= 3) {\n                const [rc, newOffset5] = parseLtf8(buffer, offset);\n                recordCounter = rc;\n                offset += newOffset5;\n            }\n            else if (majorVersion === 2) {\n                const [rc, newOffset5] = parseItf8(buffer, offset);\n                recordCounter = rc;\n                offset += newOffset5;\n            }\n            else {\n                console.warn('setting recordCounter=0');\n            }\n            let numBases;\n            if (majorVersion > 1) {\n                const [n, newOffset5] = parseLtf8(buffer, offset);\n                numBases = n;\n                offset += newOffset5;\n            }\n            const [numBlocks, newOffset6] = parseItf8(buffer, offset);\n            offset += newOffset6;\n            const [numLandmarks, newOffset7] = parseItf8(buffer, offset);\n            offset += newOffset7;\n            return {\n                value: {\n                    length,\n                    refSeqId,\n                    refSeqStart,\n                    alignmentSpan,\n                    numBlocks,\n                    numLandmarks,\n                    numBases,\n                    recordCounter,\n                    numRecords,\n                },\n                offset,\n            };\n        },\n    };\n}\nfunction cramContainerHeader2(majorVersion) {\n    return {\n        parser: (buffer, offset) => {\n            const b = buffer;\n            const dataView = new DataView(b.buffer, b.byteOffset, b.length);\n            const [numLandmarks, newOffset1] = parseItf8(buffer, offset);\n            offset += newOffset1;\n            const landmarks = [];\n            for (let i = 0; i < numLandmarks; i++) {\n                const [landmark, newOffset2] = parseItf8(buffer, offset);\n                offset += newOffset2;\n                landmarks.push(landmark);\n            }\n            let crc32;\n            if (majorVersion >= 3) {\n                crc32 = dataView.getUint32(offset, true);\n                offset += 4;\n            }\n            return {\n                value: {\n                    ...(crc32 === undefined ? {} : { crc32 }),\n                    numLandmarks,\n                    landmarks,\n                },\n                offset,\n            };\n        },\n        maxLength: (numLandmarks) => 5 + 5 * numLandmarks + 4,\n    };\n}\nexport function getSectionParsers(majorVersion) {\n    return {\n        cramFileDefinition: cramFileDefinition(),\n        cramBlockHeader: cramBlockHeader(),\n        cramBlockCrc32: cramBlockCrc32(),\n        cramDataSeriesEncodingMap: cramDataSeriesEncodingMap(),\n        cramTagEncodingMap: cramTagEncodingMap(),\n        cramCompressionHeader: cramCompressionHeader(),\n        cramEncoding: cramEncoding(),\n        cramUnmappedSliceHeader: cramUnmappedSliceHeader(majorVersion),\n        cramMappedSliceHeader: cramMappedSliceHeader(majorVersion),\n        cramContainerHeader1: cramContainerHeader1(majorVersion),\n        cramContainerHeader2: cramContainerHeader2(majorVersion),\n    };\n}\n//# sourceMappingURL=sectionParsers.js.map","import { CramMalformedError } from \"../../errors.js\";\nimport { BamFlagsDecoder, CramFlagsDecoder, MateFlagsDecoder, } from \"../record.js\";\nimport { isMappedSliceHeader } from \"../sectionParsers.js\";\n/**\n * given a Buffer, read a string up to the first null character\n * @private\n */\nfunction readNullTerminatedString(buffer) {\n    let r = '';\n    for (let i = 0; i < buffer.length && buffer[i] !== 0; i++) {\n        r += String.fromCharCode(buffer[i]);\n    }\n    return r;\n}\n/**\n * parse a BAM tag's array value from a binary buffer\n * @private\n */\nfunction parseTagValueArray(buffer) {\n    const arrayType = String.fromCharCode(buffer[0]);\n    const dataView = new DataView(buffer.buffer);\n    const littleEndian = true;\n    const length = dataView.getUint32(1, littleEndian);\n    const array = new Array(length);\n    buffer = buffer.slice(5);\n    if (arrayType === 'c') {\n        const arr = new Int8Array(buffer.buffer);\n        for (let i = 0; i < length; i++) {\n            array[i] = arr[i];\n        }\n    }\n    else if (arrayType === 'C') {\n        const arr = new Uint8Array(buffer.buffer);\n        for (let i = 0; i < length; i++) {\n            array[i] = arr[i];\n        }\n    }\n    else if (arrayType === 's') {\n        const arr = new Int16Array(buffer.buffer);\n        for (let i = 0; i < length; i++) {\n            array[i] = arr[i];\n        }\n    }\n    else if (arrayType === 'S') {\n        const arr = new Uint16Array(buffer.buffer);\n        for (let i = 0; i < length; i++) {\n            array[i] = arr[i];\n        }\n    }\n    else if (arrayType === 'i') {\n        const arr = new Int32Array(buffer.buffer);\n        for (let i = 0; i < length; i++) {\n            array[i] = arr[i];\n        }\n    }\n    else if (arrayType === 'I') {\n        const arr = new Uint32Array(buffer.buffer);\n        for (let i = 0; i < length; i++) {\n            array[i] = arr[i];\n        }\n    }\n    else if (arrayType === 'f') {\n        const arr = new Float32Array(buffer.buffer);\n        for (let i = 0; i < length; i++) {\n            array[i] = arr[i];\n        }\n    }\n    else {\n        throw new Error(`unknown type: ${arrayType}`);\n    }\n    return array;\n}\nfunction parseTagData(tagType, buffer) {\n    if (tagType === 'Z') {\n        return readNullTerminatedString(buffer);\n    }\n    if (tagType === 'A') {\n        return String.fromCharCode(buffer[0]);\n    }\n    if (tagType === 'I') {\n        return new Uint32Array(buffer.buffer)[0];\n    }\n    if (tagType === 'i') {\n        return new Int32Array(buffer.buffer)[0];\n    }\n    if (tagType === 's') {\n        return new Int16Array(buffer.buffer)[0];\n    }\n    if (tagType === 'S') {\n        return new Uint16Array(buffer.buffer)[0];\n    }\n    if (tagType === 'c') {\n        return new Int8Array(buffer.buffer)[0];\n    }\n    if (tagType === 'C') {\n        return buffer[0];\n    }\n    if (tagType === 'f') {\n        return new Float32Array(buffer.buffer)[0];\n    }\n    if (tagType === 'H') {\n        return Number.parseInt(readNullTerminatedString(buffer).replace(/^0x/, ''), 16);\n    }\n    if (tagType === 'B') {\n        return parseTagValueArray(buffer);\n    }\n    throw new CramMalformedError(`Unrecognized tag type ${tagType}`);\n}\nfunction decodeReadFeatures(alignmentStart, readFeatureCount, decodeDataSeries, compressionScheme, majorVersion) {\n    let currentReadPos = 0;\n    let currentRefPos = alignmentStart - 1;\n    const readFeatures = new Array(readFeatureCount);\n    function decodeRFData([type, dataSeriesName]) {\n        const data = decodeDataSeries(dataSeriesName);\n        if (type === 'character') {\n            return String.fromCharCode(data);\n        }\n        else if (type === 'string') {\n            let r = '';\n            for (let i = 0; i < data.byteLength; i++) {\n                r += String.fromCharCode(data[i]);\n            }\n            return r;\n        }\n        else if (type === 'numArray') {\n            return Array.from(data);\n        }\n        // else if (type === 'number') {\n        //   return data[0]\n        // }\n        return data;\n    }\n    for (let i = 0; i < readFeatureCount; i++) {\n        const code = String.fromCharCode(decodeDataSeries('FC'));\n        const readPosDelta = decodeDataSeries('FP');\n        // map of operator name -> data series name\n        const data1Schema = {\n            B: ['character', 'BA'],\n            S: ['string', majorVersion > 1 ? 'SC' : 'IN'], // IN if cram v1, SC otherwise\n            X: ['number', 'BS'],\n            D: ['number', 'DL'],\n            I: ['string', 'IN'],\n            i: ['character', 'BA'],\n            b: ['string', 'BB'],\n            q: ['numArray', 'QQ'],\n            Q: ['number', 'QS'],\n            H: ['number', 'HC'],\n            P: ['number', 'PD'],\n            N: ['number', 'RS'],\n        }[code];\n        if (!data1Schema) {\n            throw new CramMalformedError(`invalid read feature code \"${code}\"`);\n        }\n        let data = decodeRFData(data1Schema);\n        // if this is a tag with two data items, make the data an array and add the second item\n        const data2Schema = { B: ['number', 'QS'] }[code];\n        if (data2Schema) {\n            data = [data, decodeRFData(data2Schema)];\n        }\n        currentReadPos += readPosDelta;\n        const pos = currentReadPos;\n        currentRefPos += readPosDelta;\n        const refPos = currentRefPos;\n        // for gapping features, adjust the reference position for read features that follow\n        if (code === 'D' || code === 'N') {\n            currentRefPos += data;\n        }\n        else if (code === 'I' || code === 'S') {\n            currentRefPos -= data.length;\n        }\n        else if (code === 'i') {\n            currentRefPos -= 1;\n        }\n        readFeatures[i] = { code, pos, refPos, data };\n    }\n    return readFeatures;\n}\nexport default function decodeRecord(slice, decodeDataSeries, compressionScheme, sliceHeader, coreDataBlock, blocksByContentId, cursors, majorVersion, recordNumber) {\n    let flags = decodeDataSeries('BF');\n    // note: the C data type of compressionFlags is byte in cram v1 and int32 in\n    // cram v2+, but that does not matter for us here in javascript land.\n    const cramFlags = decodeDataSeries('CF');\n    if (!isMappedSliceHeader(sliceHeader.parsedContent)) {\n        throw new Error('slice header not mapped');\n    }\n    const sequenceId = majorVersion > 1 && sliceHeader.parsedContent.refSeqId === -2\n        ? decodeDataSeries('RI')\n        : sliceHeader.parsedContent.refSeqId;\n    const readLength = decodeDataSeries('RL');\n    // if APDelta, will calculate the true start in a second pass\n    let alignmentStart = decodeDataSeries('AP');\n    if (compressionScheme.APdelta) {\n        alignmentStart = alignmentStart + cursors.lastAlignmentStart;\n    }\n    cursors.lastAlignmentStart = alignmentStart;\n    const readGroupId = decodeDataSeries('RG');\n    let readName;\n    if (compressionScheme.readNamesIncluded) {\n        readName = readNullTerminatedString(decodeDataSeries('RN'));\n    }\n    let mateToUse;\n    let templateSize;\n    let mateRecordNumber;\n    // mate record\n    if (CramFlagsDecoder.isDetached(cramFlags)) {\n        // note: the MF is a byte in 1.0, int32 in 2+, but once again this doesn't\n        // matter for javascript\n        const mateFlags = decodeDataSeries('MF');\n        let mateReadName;\n        if (!compressionScheme.readNamesIncluded) {\n            mateReadName = readNullTerminatedString(decodeDataSeries('RN'));\n            readName = mateReadName;\n        }\n        const mateSequenceId = decodeDataSeries('NS');\n        const mateAlignmentStart = decodeDataSeries('NP');\n        if (mateFlags || mateSequenceId > -1) {\n            mateToUse = {\n                mateFlags,\n                mateSequenceId,\n                mateAlignmentStart,\n                mateReadName,\n            };\n        }\n        templateSize = decodeDataSeries('TS');\n        // set mate unmapped if needed\n        if (MateFlagsDecoder.isUnmapped(mateFlags)) {\n            flags = BamFlagsDecoder.setMateUnmapped(flags);\n        }\n        // set mate reversed if needed\n        if (MateFlagsDecoder.isOnNegativeStrand(mateFlags)) {\n            flags = BamFlagsDecoder.setMateReverseComplemented(flags);\n        }\n        // detachedCount++\n    }\n    else if (CramFlagsDecoder.isWithMateDownstream(cramFlags)) {\n        mateRecordNumber = decodeDataSeries('NF') + recordNumber + 1;\n    }\n    // TODO: the aux tag parsing will have to be refactored if we want to support\n    // cram v1\n    const TLindex = decodeDataSeries('TL');\n    if (TLindex < 0) {\n        /* TODO: check nTL: TLindex >= compressionHeader.tagEncoding.size */\n        throw new CramMalformedError('invalid TL index');\n    }\n    const tags = {};\n    // TN = tag names\n    const TN = compressionScheme.getTagNames(TLindex);\n    const ntags = TN.length;\n    for (let i = 0; i < ntags; i++) {\n        const tagId = TN[i];\n        const tagName = tagId.slice(0, 2);\n        const tagType = tagId.slice(2, 3);\n        const tagData = compressionScheme\n            .getCodecForTag(tagId)\n            .decode(slice, coreDataBlock, blocksByContentId, cursors);\n        tags[tagName] =\n            tagData === undefined\n                ? undefined\n                : typeof tagData === 'number'\n                    ? tagData\n                    : parseTagData(tagType, tagData);\n    }\n    let readFeatures;\n    let lengthOnRef;\n    let mappingQuality;\n    let qualityScores;\n    let readBases = undefined;\n    if (!BamFlagsDecoder.isSegmentUnmapped(flags)) {\n        // reading read features\n        const readFeatureCount = decodeDataSeries('FN');\n        if (readFeatureCount) {\n            readFeatures = decodeReadFeatures(alignmentStart, readFeatureCount, decodeDataSeries, compressionScheme, majorVersion);\n        }\n        // compute the read's true span on the reference sequence, and the end\n        // coordinate of the alignment on the reference\n        lengthOnRef = readLength;\n        if (readFeatures) {\n            for (const { code, data } of readFeatures) {\n                if (code === 'D' || code === 'N') {\n                    lengthOnRef += data;\n                }\n                else if (code === 'I' || code === 'S') {\n                    lengthOnRef = lengthOnRef - data.length;\n                }\n                else if (code === 'i') {\n                    lengthOnRef = lengthOnRef - 1;\n                }\n            }\n        }\n        if (Number.isNaN(lengthOnRef)) {\n            console.warn(`${readName || `${sequenceId}:${alignmentStart}`} record has invalid read features`);\n            lengthOnRef = readLength;\n        }\n        // mapping quality\n        mappingQuality = decodeDataSeries('MQ');\n        if (CramFlagsDecoder.isPreservingQualityScores(cramFlags)) {\n            qualityScores = new Array(readLength);\n            for (let i = 0; i < qualityScores.length; i++) {\n                qualityScores[i] = decodeDataSeries('QS');\n            }\n        }\n    }\n    else if (CramFlagsDecoder.isDecodeSequenceAsStar(cramFlags)) {\n        readBases = null;\n        qualityScores = null;\n    }\n    else {\n        const bases = new Array(readLength);\n        for (let i = 0; i < bases.length; i++) {\n            bases[i] = decodeDataSeries('BA');\n        }\n        readBases = String.fromCharCode(...bases);\n        if (CramFlagsDecoder.isPreservingQualityScores(cramFlags)) {\n            qualityScores = new Array(readLength);\n            for (let i = 0; i < bases.length; i++) {\n                qualityScores[i] = decodeDataSeries('QS');\n            }\n        }\n    }\n    return {\n        readLength,\n        sequenceId,\n        cramFlags,\n        flags,\n        alignmentStart,\n        readGroupId,\n        readName,\n        mateToUse,\n        templateSize,\n        mateRecordNumber,\n        readFeatures,\n        lengthOnRef,\n        mappingQuality,\n        qualityScores,\n        readBases,\n        tags,\n    };\n}\n//# sourceMappingURL=decodeRecord.js.map","import { CramArgumentError, CramMalformedError } from \"../../errors.js\";\nimport { CramBufferOverrunError } from \"../codecs/getBits.js\";\nimport Constants from \"../constants.js\";\nimport decodeRecord from \"./decodeRecord.js\";\nimport CramRecord from \"../record.js\";\nimport { getSectionParsers, isMappedSliceHeader, } from \"../sectionParsers.js\";\nimport { parseItem, sequenceMD5, tinyMemoize } from \"../util.js\";\n/**\n * Try to estimate the template length from a bunch of interrelated\n * multi-segment reads.\n */\nfunction calculateMultiSegmentMatedTemplateLength(allRecords, _currentRecordNumber, thisRecord) {\n    function getAllMatedRecords(startRecord) {\n        const records = [startRecord];\n        if (startRecord.mateRecordNumber !== undefined &&\n            startRecord.mateRecordNumber >= 0) {\n            const mateRecord = allRecords[startRecord.mateRecordNumber];\n            if (!mateRecord) {\n                throw new CramMalformedError('intra-slice mate record not found, this file seems malformed');\n            }\n            records.push(...getAllMatedRecords(mateRecord));\n        }\n        return records;\n    }\n    const matedRecords = getAllMatedRecords(thisRecord);\n    const starts = matedRecords.map(r => r.alignmentStart);\n    const ends = matedRecords.map(r => r.alignmentStart + r.readLength - 1);\n    const estimatedTemplateLength = Math.max(...ends) - Math.min(...starts) + 1;\n    if (estimatedTemplateLength >= 0) {\n        matedRecords.forEach(r => {\n            if (r.templateLength !== undefined) {\n                throw new CramMalformedError('mate pair group has some members that have template lengths already, this file seems malformed');\n            }\n            r.templateLength = estimatedTemplateLength;\n        });\n    }\n}\n/**\n * Attempt to calculate the `templateLength` for a pair of intra-slice paired\n * reads. Ported from htslib. Algorithm is imperfect.\n */\nfunction calculateIntraSliceMatePairTemplateLength(thisRecord, mateRecord) {\n    // this just estimates the template length by using the simple (non-gapped)\n    // end coordinate of each read, because gapping in the alignment doesn't mean\n    // the template is longer or shorter\n    const start = Math.min(thisRecord.alignmentStart, mateRecord.alignmentStart);\n    const end = Math.max(thisRecord.alignmentStart + thisRecord.readLength - 1, mateRecord.alignmentStart + mateRecord.readLength - 1);\n    const lengthEstimate = end - start + 1;\n    thisRecord.templateLength = lengthEstimate;\n    mateRecord.templateLength = lengthEstimate;\n}\n/**\n * establishes a mate-pair relationship between two records in the same slice.\n * CRAM compresses mate-pair relationships between records in the same slice\n * down into just one record having the index in the slice of its mate\n */\nfunction associateIntraSliceMate(allRecords, currentRecordNumber, thisRecord, mateRecord) {\n    const complicatedMultiSegment = !!(mateRecord.mate ||\n        (mateRecord.mateRecordNumber !== undefined &&\n            mateRecord.mateRecordNumber !== currentRecordNumber));\n    // Deal with lossy read names\n    if (!thisRecord.readName) {\n        thisRecord.readName = String(thisRecord.uniqueId);\n        mateRecord.readName = thisRecord.readName;\n    }\n    thisRecord.mate = {\n        sequenceId: mateRecord.sequenceId,\n        alignmentStart: mateRecord.alignmentStart,\n        uniqueId: mateRecord.uniqueId,\n    };\n    if (mateRecord.readName) {\n        thisRecord.mate.readName = mateRecord.readName;\n    }\n    // the mate record might have its own mate pointer, if this is some kind of\n    // multi-segment (more than paired) scheme, so only relate that one back to this one\n    // if it does not have any other relationship\n    if (!mateRecord.mate && mateRecord.mateRecordNumber === undefined) {\n        mateRecord.mate = {\n            sequenceId: thisRecord.sequenceId,\n            alignmentStart: thisRecord.alignmentStart,\n            uniqueId: thisRecord.uniqueId,\n        };\n        if (thisRecord.readName) {\n            mateRecord.mate.readName = thisRecord.readName;\n        }\n    }\n    // make sure the proper flags and cramFlags are set on both records\n    // paired\n    thisRecord.flags |= Constants.BAM_FPAIRED;\n    // set mate unmapped if needed\n    if (mateRecord.flags & Constants.BAM_FUNMAP) {\n        thisRecord.flags |= Constants.BAM_FMUNMAP;\n        // thisRecord.templateLength = 0\n    }\n    if (thisRecord.flags & Constants.BAM_FUNMAP) {\n        // thisRecord.templateLength = 0\n        mateRecord.flags |= Constants.BAM_FMUNMAP;\n    }\n    // set mate reversed if needed\n    if (mateRecord.flags & Constants.BAM_FREVERSE) {\n        thisRecord.flags |= Constants.BAM_FMREVERSE;\n    }\n    if (thisRecord.flags & Constants.BAM_FREVERSE) {\n        mateRecord.flags |= Constants.BAM_FMREVERSE;\n    }\n    if (thisRecord.templateLength === undefined) {\n        if (complicatedMultiSegment) {\n            calculateMultiSegmentMatedTemplateLength(allRecords, currentRecordNumber, thisRecord);\n        }\n        else {\n            calculateIntraSliceMatePairTemplateLength(thisRecord, mateRecord);\n        }\n    }\n    // delete this last because it's used by the\n    // complicated template length estimation\n    thisRecord.mateRecordNumber = undefined;\n}\nexport default class CramSlice {\n    constructor(container, containerPosition, sliceSize) {\n        this.container = container;\n        this.containerPosition = containerPosition;\n        this.sliceSize = sliceSize;\n        this.file = container.file;\n    }\n    // memoize\n    async getHeader() {\n        // fetch and parse the slice header\n        const { majorVersion } = await this.file.getDefinition();\n        const sectionParsers = getSectionParsers(majorVersion);\n        const containerHeader = await this.container.getHeader();\n        const header = await this.file.readBlock(containerHeader._endPosition + this.containerPosition);\n        if (header.contentType === 'MAPPED_SLICE_HEADER') {\n            const content = parseItem(header.content, sectionParsers.cramMappedSliceHeader.parser, 0, containerHeader._endPosition);\n            return { ...header, parsedContent: content };\n        }\n        else if (header.contentType === 'UNMAPPED_SLICE_HEADER') {\n            const content = parseItem(header.content, sectionParsers.cramUnmappedSliceHeader.parser, 0, containerHeader._endPosition);\n            return { ...header, parsedContent: content };\n        }\n        else {\n            throw new CramMalformedError(`error reading slice header block, invalid content type ${header.contentType}`);\n        }\n    }\n    // memoize\n    async getBlocks() {\n        const header = await this.getHeader();\n        // read all the blocks into memory and store them\n        let blockPosition = header._endPosition;\n        const blocks = new Array(header.parsedContent.numBlocks);\n        for (let i = 0; i < blocks.length; i++) {\n            const block = await this.file.readBlock(blockPosition);\n            blocks[i] = block;\n            blockPosition = blocks[i]._endPosition;\n        }\n        return blocks;\n    }\n    // no memoize\n    async getCoreDataBlock() {\n        const blocks = await this.getBlocks();\n        return blocks[0];\n    }\n    // memoize\n    async _getBlocksContentIdIndex() {\n        const blocks = await this.getBlocks();\n        const blocksByContentId = {};\n        blocks.forEach(block => {\n            if (block.contentType === 'EXTERNAL_DATA') {\n                blocksByContentId[block.contentId] = block;\n            }\n        });\n        return blocksByContentId;\n    }\n    async getBlockByContentId(id) {\n        const blocksByContentId = await this._getBlocksContentIdIndex();\n        return blocksByContentId[id];\n    }\n    async getReferenceRegion() {\n        // read the slice header\n        const decoder = new TextDecoder('utf8');\n        const sliceHeader = (await this.getHeader()).parsedContent;\n        if (!isMappedSliceHeader(sliceHeader)) {\n            throw new Error('slice header not mapped');\n        }\n        if (sliceHeader.refSeqId < 0) {\n            return undefined;\n        }\n        const compressionScheme = await this.container.getCompressionScheme();\n        if (compressionScheme === undefined) {\n            throw new Error('compression scheme undefined');\n        }\n        if (sliceHeader.refBaseBlockId >= 0) {\n            const refBlock = await this.getBlockByContentId(sliceHeader.refBaseBlockId);\n            if (!refBlock) {\n                throw new CramMalformedError('embedded reference specified, but reference block does not exist');\n            }\n            // TODO: we do not read anything named 'span'\n            // if (sliceHeader.span > refBlock.uncompressedSize) {\n            //   throw new CramMalformedError('Embedded reference is too small')\n            // }\n            // TODO verify\n            return {\n                // @ts-expect-error\n                seq: decoder.decode(refBlock.data),\n                start: sliceHeader.refSeqStart,\n                end: sliceHeader.refSeqStart + sliceHeader.refSeqSpan - 1,\n                span: sliceHeader.refSeqSpan,\n            };\n        }\n        if (compressionScheme.referenceRequired ||\n            this.file.fetchReferenceSequenceCallback) {\n            if (!this.file.fetchReferenceSequenceCallback) {\n                throw new Error('reference sequence not embedded, and seqFetch callback not provided, cannot fetch reference sequence');\n            }\n            const seq = await this.file.fetchReferenceSequenceCallback(sliceHeader.refSeqId, sliceHeader.refSeqStart, sliceHeader.refSeqStart + sliceHeader.refSeqSpan - 1);\n            if (seq.length !== sliceHeader.refSeqSpan) {\n                throw new CramArgumentError('seqFetch callback returned a reference sequence of the wrong length');\n            }\n            return {\n                seq,\n                start: sliceHeader.refSeqStart,\n                end: sliceHeader.refSeqStart + sliceHeader.refSeqSpan - 1,\n                span: sliceHeader.refSeqSpan,\n            };\n        }\n        return undefined;\n    }\n    getAllRecords() {\n        return this.getRecords(() => true);\n    }\n    async _fetchRecords() {\n        const { majorVersion } = await this.file.getDefinition();\n        const compressionScheme = await this.container.getCompressionScheme();\n        if (compressionScheme === undefined) {\n            throw new Error('compression scheme undefined');\n        }\n        const sliceHeader = await this.getHeader();\n        const blocksByContentId = await this._getBlocksContentIdIndex();\n        // check MD5 of reference if available\n        if (majorVersion > 1 &&\n            this.file.options.checkSequenceMD5 &&\n            isMappedSliceHeader(sliceHeader.parsedContent) &&\n            sliceHeader.parsedContent.refSeqId >= 0 &&\n            sliceHeader.parsedContent.md5?.join('') !== '0000000000000000') {\n            const refRegion = await this.getReferenceRegion();\n            if (refRegion) {\n                const { seq, start, end } = refRegion;\n                const seqMd5 = sequenceMD5(seq);\n                const storedMd5 = sliceHeader.parsedContent.md5\n                    ?.map(byte => (byte < 16 ? '0' : '') + byte.toString(16))\n                    .join('');\n                if (seqMd5 !== storedMd5) {\n                    throw new CramMalformedError(`MD5 checksum reference mismatch for ref ${sliceHeader.parsedContent.refSeqId} pos ${start}..${end}. recorded MD5: ${storedMd5}, calculated MD5: ${seqMd5}`);\n                }\n            }\n        }\n        // tracks the read position within the block. codec.decode() methods\n        // advance the byte and bit positions in the cursor as they decode\n        // data note that we are only decoding a single block here, the core\n        // data block\n        const coreDataBlock = await this.getCoreDataBlock();\n        const cursors = {\n            lastAlignmentStart: isMappedSliceHeader(sliceHeader.parsedContent)\n                ? sliceHeader.parsedContent.refSeqStart\n                : 0,\n            coreBlock: { bitPosition: 7, bytePosition: 0 },\n            externalBlocks: {\n                map: new Map(),\n                getCursor(contentId) {\n                    let r = this.map.get(contentId);\n                    if (r === undefined) {\n                        r = { bitPosition: 7, bytePosition: 0 };\n                        this.map.set(contentId, r);\n                    }\n                    return r;\n                },\n            },\n        };\n        const decodeDataSeries = (dataSeriesName) => {\n            const codec = compressionScheme.getCodecForDataSeries(dataSeriesName);\n            if (!codec) {\n                throw new CramMalformedError(`no codec defined for ${dataSeriesName} data series`);\n            }\n            return codec.decode(this, coreDataBlock, blocksByContentId, cursors);\n        };\n        const records = new Array(sliceHeader.parsedContent.numRecords);\n        for (let i = 0; i < records.length; i += 1) {\n            try {\n                const init = decodeRecord(this, decodeDataSeries, compressionScheme, sliceHeader, coreDataBlock, blocksByContentId, cursors, majorVersion, i);\n                records[i] = new CramRecord({\n                    ...init,\n                    uniqueId: sliceHeader.contentPosition +\n                        sliceHeader.parsedContent.recordCounter +\n                        i +\n                        1,\n                });\n            }\n            catch (e) {\n                if (e instanceof CramBufferOverrunError) {\n                    console.warn('read attempted beyond end of buffer, file seems truncated.');\n                    break;\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        // interpret `recordsToNextFragment` attributes to make standard `mate`\n        // objects\n        //\n        // Resolve mate pair cross-references between records in this slice\n        for (let i = 0; i < records.length; i += 1) {\n            const r = records[i];\n            // check for !!r added after removal  of \"stat\" file size check: found\n            // some undefined entries\n            if (r) {\n                const { mateRecordNumber } = r;\n                if (mateRecordNumber !== undefined &&\n                    mateRecordNumber >= 0 &&\n                    records[mateRecordNumber]) {\n                    associateIntraSliceMate(records, i, r, records[mateRecordNumber]);\n                }\n            }\n        }\n        return records;\n    }\n    async getRecords(filterFunction) {\n        // fetch the features if necessary, using the file-level feature cache\n        const cacheKey = this.container.filePosition + this.containerPosition;\n        let recordsPromise = this.file.featureCache.get(cacheKey.toString());\n        if (!recordsPromise) {\n            recordsPromise = this._fetchRecords();\n            this.file.featureCache.set(cacheKey.toString(), recordsPromise);\n        }\n        const unfiltered = await recordsPromise;\n        const records = unfiltered.filter(filterFunction);\n        // if we can fetch reference sequence, add the reference sequence to the records\n        if (records.length && this.file.fetchReferenceSequenceCallback) {\n            const sliceHeader = await this.getHeader();\n            if (isMappedSliceHeader(sliceHeader.parsedContent) &&\n                (sliceHeader.parsedContent.refSeqId >= 0 || // single-ref slice\n                    sliceHeader.parsedContent.refSeqId === -2) // multi-ref slice\n            ) {\n                const singleRefId = sliceHeader.parsedContent.refSeqId >= 0\n                    ? sliceHeader.parsedContent.refSeqId\n                    : undefined;\n                const compressionScheme = await this.container.getCompressionScheme();\n                if (compressionScheme === undefined) {\n                    throw new Error('compression scheme undefined');\n                }\n                const refRegions = {};\n                // iterate over the records to find the spans of the reference\n                // sequences we need to fetch\n                for (const record of records) {\n                    const seqId = singleRefId !== undefined ? singleRefId : record.sequenceId;\n                    let refRegion = refRegions[seqId];\n                    if (!refRegion) {\n                        refRegion = {\n                            id: seqId,\n                            start: record.alignmentStart,\n                            end: Number.NEGATIVE_INFINITY,\n                            seq: null,\n                        };\n                        refRegions[seqId] = refRegion;\n                    }\n                    const end = record.alignmentStart +\n                        (record.lengthOnRef || record.readLength) -\n                        1;\n                    if (end > refRegion.end) {\n                        refRegion.end = end;\n                    }\n                    if (record.alignmentStart < refRegion.start) {\n                        refRegion.start = record.alignmentStart;\n                    }\n                }\n                // fetch the `seq` for all of the ref regions\n                await Promise.all(Object.values(refRegions).map(async (refRegion) => {\n                    if (refRegion.id !== -1 &&\n                        refRegion.start <= refRegion.end &&\n                        this.file.fetchReferenceSequenceCallback) {\n                        refRegion.seq = await this.file.fetchReferenceSequenceCallback(refRegion.id, refRegion.start, refRegion.end);\n                    }\n                }));\n                // now decorate all the records with them\n                for (const record of records) {\n                    const seqId = singleRefId !== undefined ? singleRefId : record.sequenceId;\n                    const refRegion = refRegions[seqId];\n                    if (refRegion?.seq) {\n                        const seq = refRegion.seq;\n                        record.addReferenceSequence({ ...refRegion, seq }, compressionScheme);\n                    }\n                }\n            }\n        }\n        return records;\n    }\n}\n// memoize several methods in the class for performance\n'getHeader getBlocks _getBlocksContentIdIndex'.split(' ').forEach(method => {\n    tinyMemoize(CramSlice, method);\n});\n//# sourceMappingURL=index.js.map","// codec base class\nexport default class CramCodec {\n    constructor(parameters, dataType) {\n        this.parameters = parameters;\n        this.dataType = dataType;\n    }\n}\n//# sourceMappingURL=_base.js.map","import CramCodec from \"./_base.js\";\nimport { getBits } from \"./getBits.js\";\nimport { CramUnimplementedError } from \"../../errors.js\";\nexport default class BetaCodec extends CramCodec {\n    constructor(parameters, dataType) {\n        super(parameters, dataType);\n        if (this.dataType !== 'int') {\n            throw new CramUnimplementedError(`${this.dataType} decoding not yet implemented by BETA codec`);\n        }\n    }\n    decode(_slice, coreDataBlock, _blocksByContentId, cursors) {\n        const fromBits = getBits(coreDataBlock.content, cursors.coreBlock, this.parameters.length);\n        return fromBits - this.parameters.offset;\n    }\n}\n//# sourceMappingURL=beta.js.map","import CramCodec from \"./_base.js\";\nimport { tinyMemoize } from \"../util.js\";\nexport default class ByteArrayStopCodec extends CramCodec {\n    constructor(parameters, dataType, instantiateCodec) {\n        super(parameters, dataType);\n        this.instantiateCodec = instantiateCodec;\n    }\n    decode(slice, coreDataBlock, blocksByContentId, cursors) {\n        const lengthCodec = this._getLengthCodec();\n        const arrayLength = lengthCodec.decode(slice, coreDataBlock, blocksByContentId, cursors) || 0;\n        const dataCodec = this._getDataCodec();\n        const data = new Uint8Array(arrayLength);\n        for (let i = 0; i < arrayLength; i += 1) {\n            data[i] =\n                dataCodec.decode(slice, coreDataBlock, blocksByContentId, cursors) || 0;\n        }\n        return data;\n    }\n    // memoize\n    _getLengthCodec() {\n        const encodingParams = this.parameters.lengthsEncoding;\n        return this.instantiateCodec(encodingParams, 'int');\n    }\n    // memoize\n    _getDataCodec() {\n        const encodingParams = this.parameters.valuesEncoding;\n        return this.instantiateCodec(encodingParams, 'byte');\n    }\n}\n'_getLengthCodec _getDataCodec'.split(' ').forEach(method => {\n    tinyMemoize(ByteArrayStopCodec, method);\n});\n//# sourceMappingURL=byteArrayLength.js.map","import CramCodec from \"./_base.js\";\nimport { CramMalformedError } from \"../../errors.js\";\nimport { CramBufferOverrunError } from \"./getBits.js\";\nexport default class ByteArrayStopCodec extends CramCodec {\n    decode(_slice, _coreDataBlock, blocksByContentId, cursors) {\n        const { blockContentId } = this.parameters;\n        const contentBlock = blocksByContentId[blockContentId];\n        if (!contentBlock) {\n            throw new CramMalformedError(`no block found with content ID ${blockContentId}`);\n        }\n        const cursor = cursors.externalBlocks.getCursor(blockContentId);\n        return this._decodeByteArray(contentBlock, cursor);\n    }\n    _decodeByteArray(contentBlock, cursor) {\n        const dataBuffer = contentBlock.content;\n        const { stopByte } = this.parameters;\n        // scan to the next stop byte\n        const startPosition = cursor.bytePosition;\n        let stopPosition = cursor.bytePosition;\n        while (dataBuffer[stopPosition] !== stopByte &&\n            stopPosition < dataBuffer.length) {\n            if (stopPosition === dataBuffer.length) {\n                throw new CramBufferOverrunError('byteArrayStop reading beyond length of data buffer?');\n            }\n            stopPosition = stopPosition + 1;\n        }\n        cursor.bytePosition = stopPosition + 1;\n        return dataBuffer.subarray(startPosition, stopPosition);\n    }\n}\n//# sourceMappingURL=byteArrayStop.js.map","import CramCodec from \"./_base.js\";\nimport { CramUnimplementedError } from \"../../errors.js\";\nimport { parseItf8 } from \"../util.js\";\nimport { CramBufferOverrunError } from \"./getBits.js\";\nexport default class ExternalCodec extends CramCodec {\n    constructor(parameters, dataType) {\n        super(parameters, dataType);\n        if (this.dataType === 'int') {\n            this._decodeData = this._decodeInt;\n        }\n        else if (this.dataType === 'byte') {\n            this._decodeData = this._decodeByte;\n        }\n        else {\n            throw new CramUnimplementedError(`${this.dataType} decoding not yet implemented by EXTERNAL codec`);\n        }\n    }\n    decode(_slice, _coreDataBlock, blocksByContentId, cursors) {\n        const { blockContentId } = this.parameters;\n        const contentBlock = blocksByContentId[blockContentId];\n        return contentBlock\n            ? this._decodeData(contentBlock, cursors.externalBlocks.getCursor(blockContentId))\n            : undefined;\n    }\n    _decodeInt(contentBlock, cursor) {\n        const [result, bytesRead] = parseItf8(contentBlock.content, cursor.bytePosition);\n        cursor.bytePosition = cursor.bytePosition + bytesRead;\n        return result;\n    }\n    _decodeByte(contentBlock, cursor) {\n        if (cursor.bytePosition >= contentBlock.content.length) {\n            throw new CramBufferOverrunError('attempted to read beyond end of block. this file seems truncated.');\n        }\n        return contentBlock.content[cursor.bytePosition++];\n    }\n}\n//# sourceMappingURL=external.js.map","import CramCodec from \"./_base.js\";\nimport { getBits } from \"./getBits.js\";\nimport { CramUnimplementedError } from \"../../errors.js\";\nexport default class GammaCodec extends CramCodec {\n    constructor(parameters, dataType) {\n        super(parameters, dataType);\n        if (this.dataType !== 'int') {\n            throw new CramUnimplementedError(`${this.dataType} decoding not yet implemented by GAMMA codec`);\n        }\n    }\n    decode(_slice, coreDataBlock, _blocksByContentId, cursors) {\n        let length = 1;\n        while (getBits(coreDataBlock.content, cursors.coreBlock, 1) === 0) {\n            length = length + 1;\n        }\n        const readBits = getBits(coreDataBlock.content, cursors.coreBlock, length - 1);\n        const value = readBits | (1 << (length - 1));\n        return value - this.parameters.offset;\n    }\n}\n//# sourceMappingURL=gamma.js.map","import CramCodec from \"./_base.js\";\nimport { getBits } from \"./getBits.js\";\nimport { CramMalformedError } from \"../../errors.js\";\nfunction numberOfSetBits(ii) {\n    let i = (ii - (ii >> 1)) & 0x55555555;\n    i = (i & 0x33333333) + ((i >> 2) & 0x33333333);\n    return (((i + (i >> 4)) & 0x0f0f0f0f) * 0x01010101) >> 24;\n}\nexport default class HuffmanIntCodec extends CramCodec {\n    constructor(parameters, dataType) {\n        super(parameters, dataType);\n        this.codes = {};\n        this.codeBook = {};\n        this.sortedCodes = [];\n        this.sortedValuesByBitCode = [];\n        this.sortedBitCodes = [];\n        this.sortedBitLengthsByBitCode = [];\n        this.bitCodeToValue = [];\n        if (!['byte', 'int'].includes(this.dataType)) {\n            throw new TypeError(`${this.dataType} decoding not yet implemented by HUFFMAN_INT codec`);\n        }\n        this.buildCodeBook();\n        this.buildCodes();\n        this.buildCaches();\n        // if this is a degenerate zero-length huffman code, special-case the\n        // decoding\n        if (this.sortedCodes[0].bitLength === 0) {\n            this._decode = this._decodeZeroLengthCode;\n        }\n    }\n    buildCodeBook() {\n        // parse the parameters together into a `codes` data structure\n        let codes = new Array(this.parameters.numCodes);\n        for (let i = 0; i < this.parameters.numCodes; i++) {\n            codes[i] = {\n                symbol: this.parameters.symbols[i],\n                bitLength: this.parameters.bitLengths[i],\n            };\n        }\n        // sort the codes by bit length and symbol value\n        codes = codes.sort((a, b) => a.bitLength - b.bitLength || a.symbol - b.symbol);\n        this.codeBook = {};\n        codes.forEach(code => {\n            if (!this.codeBook[code.bitLength]) {\n                this.codeBook[code.bitLength] = [];\n            }\n            this.codeBook[code.bitLength].push(code.symbol);\n        });\n    }\n    buildCodes() {\n        this.codes = {}; /*  new TreeMap<Integer, HuffmanBitCode>(); */\n        let codeLength = 0;\n        let codeValue = -1;\n        Object.entries(this.codeBook).forEach(([bitLength, symbols]) => {\n            const bitLengthInt = Number.parseInt(bitLength, 10);\n            symbols.forEach(symbol => {\n                const code = {\n                    bitLength: bitLengthInt,\n                    value: symbol,\n                    bitCode: 0,\n                };\n                codeValue = codeValue + 1;\n                const delta = bitLengthInt - codeLength; // new length?\n                codeValue = codeValue << delta; // pad with 0's\n                code.bitCode = codeValue; // calculated: huffman code\n                codeLength = codeLength + delta; // adjust current code length\n                if (numberOfSetBits(codeValue) > bitLengthInt) {\n                    throw new CramMalformedError('Symbol out of range');\n                }\n                this.codes[symbol] = code;\n            });\n        });\n    }\n    buildCaches() {\n        this.sortedCodes = Object.values(this.codes).sort((a, b) => a.bitLength - b.bitLength || a.bitCode - b.bitCode);\n        this.sortedValuesByBitCode = this.sortedCodes.map(c => c.value);\n        this.sortedBitCodes = this.sortedCodes.map(c => c.bitCode);\n        this.sortedBitLengthsByBitCode = this.sortedCodes.map(c => c.bitLength);\n        const maxBitCode = Math.max(...this.sortedBitCodes);\n        this.bitCodeToValue = new Array(maxBitCode + 1).fill(-1);\n        for (let i = 0; i < this.sortedBitCodes.length; i += 1) {\n            this.bitCodeToValue[this.sortedCodes[i].bitCode] = i;\n        }\n    }\n    decode(slice, coreDataBlock, _blocksByContentId, cursors) {\n        return this._decode(slice, coreDataBlock, cursors.coreBlock);\n    }\n    // _decodeNull() {\n    //   return -1\n    // }\n    // the special case for zero-length codes\n    _decodeZeroLengthCode() {\n        return this.sortedCodes[0].value;\n    }\n    _decode(_slice, coreDataBlock, coreCursor) {\n        const input = coreDataBlock.content;\n        let prevLen = 0;\n        let bits = 0;\n        for (let i = 0; i < this.sortedCodes.length; i += 1) {\n            const length = this.sortedCodes[i].bitLength;\n            bits <<= length - prevLen;\n            bits |= getBits(input, coreCursor, length - prevLen);\n            prevLen = length;\n            {\n                const index = this.bitCodeToValue[bits];\n                if (index > -1 && this.sortedBitLengthsByBitCode[index] === length) {\n                    return this.sortedValuesByBitCode[index];\n                }\n                for (let j = i; this.sortedCodes[j + 1].bitLength === length &&\n                    j < this.sortedCodes.length; j += 1) {\n                    i += 1;\n                }\n            }\n        }\n        throw new CramMalformedError('Huffman symbol not found.');\n    }\n}\n//# sourceMappingURL=huffman.js.map","import CramCodec from \"./_base.js\";\nimport { getBits } from \"./getBits.js\";\nimport { CramUnimplementedError } from \"../../errors.js\";\nexport default class SubexpCodec extends CramCodec {\n    constructor(parameters, dataType) {\n        super(parameters, dataType);\n        if (this.dataType !== 'int') {\n            throw new CramUnimplementedError(`${this.dataType} decoding not yet implemented by SUBEXP codec`);\n        }\n    }\n    decode(_slice, coreDataBlock, _blocksByContentId, cursors) {\n        let numLeadingOnes = 0;\n        while (getBits(coreDataBlock.content, cursors.coreBlock, 1)) {\n            numLeadingOnes = numLeadingOnes + 1;\n        }\n        let b;\n        let n;\n        if (numLeadingOnes === 0) {\n            b = this.parameters.K;\n            n = getBits(coreDataBlock.content, cursors.coreBlock, b);\n        }\n        else {\n            b = numLeadingOnes + this.parameters.K - 1;\n            const bits = getBits(coreDataBlock.content, cursors.coreBlock, b);\n            n = (1 << b) | bits;\n        }\n        return n - this.parameters.offset;\n    }\n}\n//# sourceMappingURL=subexp.js.map","import BetaCodec from \"./beta.js\";\nimport ByteArrayLengthCodec from \"./byteArrayLength.js\";\nimport ByteArrayStopCodec from \"./byteArrayStop.js\";\nimport ExternalCodec from \"./external.js\";\nimport GammaCodec from \"./gamma.js\";\nimport HuffmanIntCodec from \"./huffman.js\";\nimport SubexpCodec from \"./subexp.js\";\nimport { CramUnimplementedError } from \"../../errors.js\";\nconst codecClasses = {\n    1: ExternalCodec,\n    // 2: GolombCodec,\n    3: HuffmanIntCodec,\n    4: ByteArrayLengthCodec,\n    5: ByteArrayStopCodec,\n    6: BetaCodec,\n    7: SubexpCodec,\n    // 8: GolombRiceCodec,\n    9: GammaCodec,\n};\nfunction getCodecClassWithId(id) {\n    return codecClasses[id];\n}\nexport function instantiateCodec(encodingData, dataType) {\n    const CodecClass = getCodecClassWithId(dataType === 'ignore' ? 0 : encodingData.codecId);\n    if (!CodecClass) {\n        throw new CramUnimplementedError(`no codec implemented for codec ID ${encodingData.codecId}`);\n    }\n    return new CodecClass(encodingData.parameters, dataType, instantiateCodec);\n}\n//# sourceMappingURL=index.js.map","import { CramMalformedError } from \"../../errors.js\";\nimport { instantiateCodec } from \"../codecs/index.js\";\n// the hardcoded data type to be decoded for each core\n// data field\nconst dataSeriesTypes = {\n    BF: 'int',\n    CF: 'int',\n    RI: 'int',\n    RL: 'int',\n    AP: 'int',\n    RG: 'int',\n    MF: 'int',\n    NS: 'int',\n    NP: 'int',\n    TS: 'int',\n    NF: 'int',\n    TC: 'byte',\n    TN: 'int',\n    FN: 'int',\n    FC: 'byte',\n    FP: 'int',\n    BS: 'byte',\n    IN: 'byteArray',\n    SC: 'byteArray',\n    DL: 'int',\n    BA: 'byte',\n    BB: 'byteArray',\n    RS: 'int',\n    PD: 'int',\n    HC: 'int',\n    MQ: 'int',\n    RN: 'byteArray',\n    QS: 'byte',\n    QQ: 'byteArray',\n    TL: 'int',\n    // TM: 'ignore',\n    // TV: 'ignore',\n};\nfunction parseSubstitutionMatrix(byteArray) {\n    const matrix = new Array(5);\n    for (let i = 0; i < 5; i += 1) {\n        matrix[i] = new Array(4);\n    }\n    matrix[0][(byteArray[0] >> 6) & 3] = 'C';\n    matrix[0][(byteArray[0] >> 4) & 3] = 'G';\n    matrix[0][(byteArray[0] >> 2) & 3] = 'T';\n    matrix[0][(byteArray[0] >> 0) & 3] = 'N';\n    matrix[1][(byteArray[1] >> 6) & 3] = 'A';\n    matrix[1][(byteArray[1] >> 4) & 3] = 'G';\n    matrix[1][(byteArray[1] >> 2) & 3] = 'T';\n    matrix[1][(byteArray[1] >> 0) & 3] = 'N';\n    matrix[2][(byteArray[2] >> 6) & 3] = 'A';\n    matrix[2][(byteArray[2] >> 4) & 3] = 'C';\n    matrix[2][(byteArray[2] >> 2) & 3] = 'T';\n    matrix[2][(byteArray[2] >> 0) & 3] = 'N';\n    matrix[3][(byteArray[3] >> 6) & 3] = 'A';\n    matrix[3][(byteArray[3] >> 4) & 3] = 'C';\n    matrix[3][(byteArray[3] >> 2) & 3] = 'G';\n    matrix[3][(byteArray[3] >> 0) & 3] = 'N';\n    matrix[4][(byteArray[4] >> 6) & 3] = 'A';\n    matrix[4][(byteArray[4] >> 4) & 3] = 'C';\n    matrix[4][(byteArray[4] >> 2) & 3] = 'G';\n    matrix[4][(byteArray[4] >> 0) & 3] = 'T';\n    return matrix;\n}\nexport default class CramContainerCompressionScheme {\n    constructor(content) {\n        this.dataSeriesCodecCache = {};\n        this.tagCodecCache = {};\n        this.tagEncoding = {};\n        // interpret some of the preservation map tags for convenient use\n        this.readNamesIncluded = content.preservation.RN;\n        this.APdelta = content.preservation.AP;\n        this.referenceRequired = !!content.preservation.RR;\n        this.tagIdsDictionary = content.preservation.TD;\n        this.substitutionMatrix = parseSubstitutionMatrix(content.preservation.SM);\n        this.dataSeriesEncoding = content.dataSeriesEncoding;\n        this.tagEncoding = content.tagEncoding;\n    }\n    /**\n     * @param {string} tagName three-character tag name\n     * @private\n     */\n    getCodecForTag(tagName) {\n        const test = this.tagCodecCache[tagName];\n        if (!test) {\n            const encodingData = this.tagEncoding[tagName];\n            if (!encodingData) {\n                throw new Error('Error, no tag encoding');\n            }\n            const ret = instantiateCodec(encodingData, 'byteArray');\n            this.tagCodecCache[tagName] = ret;\n            return ret;\n        }\n        else {\n            return test;\n        }\n    }\n    /**\n     *\n     * @param {number} tagListId ID of the tag list to fetch from the tag dictionary\n     * @private\n     */\n    getTagNames(tagListId) {\n        return this.tagIdsDictionary[tagListId];\n    }\n    getCodecForDataSeries(dataSeriesName) {\n        let r = this.dataSeriesCodecCache[dataSeriesName];\n        if (r === undefined) {\n            const encodingData = this.dataSeriesEncoding[dataSeriesName];\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (encodingData) {\n                const dataType = dataSeriesTypes[dataSeriesName];\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                if (!dataType) {\n                    throw new CramMalformedError(`data series name ${dataSeriesName} not defined in file compression header`);\n                }\n                r = instantiateCodec(encodingData, dataType);\n                // didn't find a way to make TS understand this\n                this.dataSeriesCodecCache[dataSeriesName] = r;\n            }\n        }\n        return r;\n    }\n    toJSON() {\n        const data = {};\n        Object.keys(this).forEach(k => {\n            if (k.endsWith('Cache')) {\n                return;\n            }\n            data[k] = this[k];\n        });\n        return data;\n    }\n}\n//# sourceMappingURL=compressionScheme.js.map","import { CramMalformedError } from \"../../errors.js\";\nimport CramSlice from \"../slice/index.js\";\nimport { itf8Size, parseItem, tinyMemoize } from \"../util.js\";\nimport CramContainerCompressionScheme from \"./compressionScheme.js\";\nimport { getSectionParsers } from \"../sectionParsers.js\";\nexport default class CramContainer {\n    constructor(file, filePosition) {\n        this.file = file;\n        this.filePosition = filePosition;\n    }\n    getHeader() {\n        return this._readContainerHeader(this.filePosition);\n    }\n    async getCompressionHeaderBlock() {\n        const containerHeader = await this.getHeader();\n        // if there are no records in the container, there will be no compression\n        // header\n        if (!containerHeader.numRecords) {\n            return null;\n        }\n        const { majorVersion } = await this.file.getDefinition();\n        const sectionParsers = getSectionParsers(majorVersion);\n        const block = await this.getFirstBlock();\n        if (block.contentType !== 'COMPRESSION_HEADER') {\n            throw new CramMalformedError(`invalid content type ${block.contentType} in compression header block`);\n        }\n        const content = parseItem(block.content, sectionParsers.cramCompressionHeader.parser, 0, block.contentPosition);\n        return {\n            ...block,\n            parsedContent: content,\n        };\n    }\n    async getFirstBlock() {\n        const containerHeader = await this.getHeader();\n        return this.file.readBlock(containerHeader._endPosition);\n    }\n    // parses the compression header data into a CramContainerCompressionScheme\n    // object\n    async getCompressionScheme() {\n        const header = await this.getCompressionHeaderBlock();\n        if (!header) {\n            return undefined;\n        }\n        return new CramContainerCompressionScheme(header.parsedContent);\n    }\n    getSlice(slicePosition, sliceSize) {\n        // note: slicePosition is relative to the end of the container header\n        // TODO: perhaps we should cache slices?\n        return new CramSlice(this, slicePosition, sliceSize);\n    }\n    async _readContainerHeader(position) {\n        const { majorVersion } = await this.file.getDefinition();\n        const sectionParsers = getSectionParsers(majorVersion);\n        const { cramContainerHeader1, cramContainerHeader2 } = sectionParsers;\n        // parse the container header. do it in 2 pieces because you cannot tell\n        // how much to buffer until you read numLandmarks\n        const bytes1 = await this.file.read(cramContainerHeader1.maxLength, position);\n        const header1 = parseItem(bytes1, cramContainerHeader1.parser);\n        const numLandmarksSize = itf8Size(header1.numLandmarks);\n        const bytes2 = await this.file.read(cramContainerHeader2.maxLength(header1.numLandmarks), position + header1._size - numLandmarksSize);\n        const header2 = parseItem(bytes2, cramContainerHeader2.parser);\n        if (this.file.validateChecksums && header2.crc32 !== undefined) {\n            await this.file.checkCrc32(position, header1._size + header2._size - numLandmarksSize - 4, header2.crc32, `container header beginning at position ${position}`);\n        }\n        return {\n            ...header1,\n            ...header2,\n            _size: header1._size + header2._size - numLandmarksSize,\n            _endPosition: header1._size + header2._size - numLandmarksSize + position,\n        };\n    }\n}\n'getHeader getCompressionHeaderBlock getCompressionScheme'\n    .split(' ')\n    .forEach(method => {\n    tinyMemoize(CramContainer, method);\n});\n//# sourceMappingURL=index.js.map","import crc32 from 'crc/calculators/crc32';\nimport QuickLRU from 'quick-lru';\nimport { XzReadableStream } from 'xz-decompress';\nimport { CramMalformedError, CramUnimplementedError } from \"../errors.js\";\nimport * as htscodecs from \"../htscodecs/index.js\";\nimport { open } from \"../io.js\";\nimport ransuncompress from \"../rans/index.js\";\nimport { parseHeaderText } from \"../sam.js\";\nimport { decode } from \"../seek-bzip/index.js\";\nimport { unzip } from \"../unzip.js\";\nimport CramContainer from \"./container/index.js\";\nimport { cramFileDefinition, getSectionParsers, } from \"./sectionParsers.js\";\nimport { parseItem, tinyMemoize } from \"./util.js\";\nfunction bufferToStream(buf) {\n    return new ReadableStream({\n        start(controller) {\n            controller.enqueue(buf);\n            controller.close();\n        },\n    });\n}\n// source: https://abdulapopoola.com/2019/01/20/check-endianness-with-javascript/\nfunction getEndianness() {\n    const uInt32 = new Uint32Array([0x11223344]);\n    const uInt8 = new Uint8Array(uInt32.buffer);\n    if (uInt8[0] === 0x44) {\n        return 0; // little-endian\n    }\n    else if (uInt8[0] === 0x11) {\n        return 1; // big-endian\n    }\n    else {\n        return 2; // mixed-endian?\n    }\n}\nexport default class CramFile {\n    constructor(args) {\n        this.file = open(args.url, args.path, args.filehandle);\n        this.validateChecksums = true;\n        this.fetchReferenceSequenceCallback = args.seqFetch;\n        this.options = {\n            checkSequenceMD5: args.checkSequenceMD5,\n            cacheSize: args.cacheSize ?? 20000,\n        };\n        // cache of features in a slice, keyed by the slice offset. caches all of\n        // the features in a slice, or none. the cache is actually used by the\n        // slice object, it's just kept here at the level of the file\n        this.featureCache = new QuickLRU({\n            maxSize: this.options.cacheSize,\n        });\n        if (getEndianness() > 0) {\n            throw new Error('Detected big-endian machine, may be unable to run');\n        }\n    }\n    read(length, position) {\n        return this.file.read(length, position);\n    }\n    // memoized\n    async getDefinition() {\n        const { maxLength, parser } = cramFileDefinition();\n        const headbytes = await this.file.read(maxLength, 0);\n        const definition = parser(headbytes).value;\n        if (definition.magic !== 'CRAM') {\n            throw new Error('Not a CRAM file, does not match magic string');\n        }\n        else if (definition.majorVersion !== 2 && definition.majorVersion !== 3) {\n            throw new CramUnimplementedError(`CRAM version ${definition.majorVersion} not supported`);\n        }\n        else {\n            return definition;\n        }\n    }\n    // memoize\n    async getSamHeader() {\n        const firstContainer = await this.getContainerById(0);\n        if (!firstContainer) {\n            throw new CramMalformedError('file contains no containers');\n        }\n        const firstBlock = await firstContainer.getFirstBlock();\n        const content = firstBlock.content;\n        const dataView = new DataView(content.buffer);\n        const headerLength = dataView.getInt32(0, true);\n        const textStart = 4;\n        const decoder = new TextDecoder('utf8');\n        const text = decoder.decode(content.subarray(textStart, textStart + headerLength));\n        this.header = text;\n        return parseHeaderText(text);\n    }\n    async getHeaderText() {\n        await this.getSamHeader();\n        return this.header;\n    }\n    async getContainerById(containerNumber) {\n        const { majorVersion } = await this.getDefinition();\n        const sectionParsers = getSectionParsers(majorVersion);\n        let position = sectionParsers.cramFileDefinition.maxLength;\n        // skip with a series of reads to the proper container\n        let currentContainer;\n        for (let i = 0; i <= containerNumber; i++) {\n            // if we are about to go off the end of the file\n            // and have not found that container, it does not exist\n            // if (position + cramContainerHeader1.maxLength + 8 >= fileSize) {\n            //   return undefined\n            // }\n            currentContainer = this.getContainerAtPosition(position);\n            const currentHeader = await currentContainer.getHeader();\n            // if this is the first container, read all the blocks in the container\n            // to determine its length, because we cannot trust the container\n            // header's given length due to a bug somewhere in htslib\n            if (i === 0) {\n                position = currentHeader._endPosition;\n                for (let j = 0; j < currentHeader.numBlocks; j++) {\n                    const block = await this.readBlock(position);\n                    position = block._endPosition;\n                }\n            }\n            else {\n                // otherwise, just traverse to the next container using the container's\n                // length\n                position += currentHeader._size + currentHeader.length;\n            }\n        }\n        return currentContainer;\n    }\n    async checkCrc32(position, length, recordedCrc32, description) {\n        const b = await this.file.read(length, position);\n        // this shift >>> 0 is equivalent to crc32(b).unsigned but uses the\n        // internal calculator of crc32 to avoid accidentally importing buffer\n        // https://github.com/alexgorbatchev/crc/blob/31fc3853e417b5fb5ec83335428805842575f699/src/define_crc.ts#L5\n        const calculatedCrc32 = crc32(b) >>> 0;\n        if (calculatedCrc32 !== recordedCrc32) {\n            throw new CramMalformedError(`crc mismatch in ${description}: recorded CRC32 = ${recordedCrc32}, but calculated CRC32 = ${calculatedCrc32}`);\n        }\n    }\n    /**\n     * @returns {Promise[number]} the number of containers in the file\n     *\n     * note: this is currently used only in unit tests, and after removing file\n     * length check, relies on a try catch to read return an error to break\n     */\n    async containerCount() {\n        const { majorVersion } = await this.getDefinition();\n        const sectionParsers = getSectionParsers(majorVersion);\n        let containerCount = 0;\n        let position = sectionParsers.cramFileDefinition.maxLength;\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            while (true) {\n                const currentHeader = await this.getContainerAtPosition(position).getHeader();\n                // if this is the first container, read all the blocks in the container,\n                // because we cannot trust the container header's given length due to a\n                // bug somewhere in htslib\n                if (containerCount === 0) {\n                    position = currentHeader._endPosition;\n                    for (let j = 0; j < currentHeader.numBlocks; j++) {\n                        const block = await this.readBlock(position);\n                        position = block._endPosition;\n                    }\n                }\n                else {\n                    // otherwise, just traverse to the next container using the container's\n                    // length\n                    position += currentHeader._size + currentHeader.length;\n                }\n                containerCount += 1;\n            }\n        }\n        catch (e) {\n            containerCount--;\n            /* do nothing */\n        }\n        return containerCount;\n    }\n    getContainerAtPosition(position) {\n        return new CramContainer(this, position);\n    }\n    async readBlockHeader(position) {\n        const { majorVersion } = await this.getDefinition();\n        const sectionParsers = getSectionParsers(majorVersion);\n        const { cramBlockHeader } = sectionParsers;\n        const buffer = await this.file.read(cramBlockHeader.maxLength, position);\n        return parseItem(buffer, cramBlockHeader.parser, 0, position);\n    }\n    async _parseSection(section, position, size = section.maxLength, preReadBuffer) {\n        const buffer = preReadBuffer ?? (await this.file.read(size, position));\n        const data = parseItem(buffer, section.parser, 0, position);\n        if (data._size !== size) {\n            throw new CramMalformedError(`section read error: requested size ${size} does not equal parsed size ${data._size}`);\n        }\n        return data;\n    }\n    async _uncompressPre(compressionMethod, inputBuffer, uncompressedSize) {\n        // console.log({ compressionMethod })\n        if (compressionMethod === 'gzip') {\n            return unzip(inputBuffer);\n        }\n        else if (compressionMethod === 'bzip2') {\n            return decode(inputBuffer);\n        }\n        else if (compressionMethod === 'lzma') {\n            const decompressedResponse = new Response(new XzReadableStream(bufferToStream(inputBuffer)));\n            return new Uint8Array(await decompressedResponse.arrayBuffer());\n        }\n        else if (compressionMethod === 'rans') {\n            const outputBuffer = new Uint8Array(uncompressedSize);\n            ransuncompress(inputBuffer, outputBuffer);\n            return outputBuffer;\n        }\n        else if (compressionMethod === 'rans4x16') {\n            return htscodecs.r4x16_uncompress(inputBuffer);\n        }\n        else if (compressionMethod === 'arith') {\n            return htscodecs.arith_uncompress(inputBuffer);\n        }\n        else if (compressionMethod === 'fqzcomp') {\n            return htscodecs.fqzcomp_uncompress(inputBuffer);\n        }\n        else if (compressionMethod === 'tok3') {\n            return htscodecs.tok3_uncompress(inputBuffer);\n        }\n        else {\n            throw new CramUnimplementedError(`${compressionMethod} decompression not yet implemented`);\n        }\n    }\n    async _uncompress(compressionMethod, inputBuffer, uncompressedSize) {\n        const buf = await this._uncompressPre(compressionMethod, inputBuffer, uncompressedSize);\n        if (buf.length !== uncompressedSize) {\n            const ret = new Uint8Array(uncompressedSize);\n            ret.set(buf, 0);\n            return ret;\n        }\n        return buf;\n    }\n    async readBlock(position) {\n        const { majorVersion } = await this.getDefinition();\n        const sectionParsers = getSectionParsers(majorVersion);\n        const blockHeader = await this.readBlockHeader(position);\n        const blockContentPosition = blockHeader._endPosition;\n        const d = await this.file.read(blockHeader.compressedSize, blockContentPosition);\n        const uncompressedData = blockHeader.compressionMethod !== 'raw'\n            ? await this._uncompress(blockHeader.compressionMethod, d, blockHeader.uncompressedSize)\n            : d;\n        const block = {\n            ...blockHeader,\n            _endPosition: blockContentPosition,\n            contentPosition: blockContentPosition,\n            content: uncompressedData,\n        };\n        if (majorVersion >= 3) {\n            // parse the crc32\n            const crc = await this._parseSection(sectionParsers.cramBlockCrc32, blockContentPosition + blockHeader.compressedSize);\n            block.crc32 = crc.crc32;\n            // check the block data crc32\n            if (this.validateChecksums) {\n                await this.checkCrc32(position, blockHeader._size + blockHeader.compressedSize, crc.crc32, 'block data');\n            }\n            // make the endposition and size reflect the whole block\n            block._endPosition = crc._endPosition;\n            block._size =\n                block.compressedSize + sectionParsers.cramBlockCrc32.maxLength;\n        }\n        else {\n            block._endPosition = blockContentPosition + block.compressedSize;\n            block._size = block.compressedSize;\n        }\n        return block;\n    }\n}\n'getDefinition getSectionParsers getSamHeader'.split(' ').forEach(method => {\n    tinyMemoize(CramFile, method);\n});\n//# sourceMappingURL=file.js.map","import { CramMalformedError } from \"./errors.js\";\nimport { open } from \"./io.js\";\nimport { unzip } from \"./unzip.js\";\nconst BAI_MAGIC = 21_578_050; // BAI\\1\nfunction addRecordToIndex(index, record) {\n    const [seqId, start, span, containerStart, sliceStart, sliceBytes] = record;\n    const s = seqId;\n    if (!index[s]) {\n        index[s] = [];\n    }\n    index[s].push({\n        start: start,\n        span: span,\n        containerStart: containerStart,\n        sliceStart: sliceStart,\n        sliceBytes: sliceBytes,\n    });\n}\nfunction maybeUnzip(data) {\n    return data[0] === 31 && data[1] === 139 ? unzip(data) : data;\n}\nexport default class CraiIndex {\n    /**\n     *\n     * @param {object} args\n     * @param {string} [args.path]\n     * @param {string} [args.url]\n     * @param {FileHandle} [args.filehandle]\n     */\n    constructor(args) {\n        this.filehandle = open(args.url, args.path, args.filehandle);\n    }\n    async parseIndex() {\n        const index = {};\n        const uncompressedBuffer = maybeUnzip(await this.filehandle.readFile());\n        const dataView = new DataView(uncompressedBuffer.buffer);\n        if (uncompressedBuffer.length > 4 &&\n            dataView.getUint32(0, true) === BAI_MAGIC) {\n            throw new CramMalformedError('invalid .crai index file. note: file appears to be a .bai index. this is technically legal but please open a github issue if you need support');\n        }\n        // interpret the text as regular ascii, since it is supposed to be only\n        // digits and whitespace characters this is written in a deliberately\n        // low-level fashion for performance, because some .crai files can be\n        // pretty large.\n        let currentRecord = [];\n        let currentString = '';\n        for (const charCode of uncompressedBuffer) {\n            if ((charCode >= 48 && charCode <= 57) /* 0-9 */ ||\n                (!currentString && charCode === 45) /* leading - */) {\n                currentString += String.fromCharCode(charCode);\n            }\n            else if (charCode === 9 /* \\t */) {\n                currentRecord.push(Number.parseInt(currentString, 10));\n                currentString = '';\n            }\n            else if (charCode === 10 /* \\n */) {\n                currentRecord.push(Number.parseInt(currentString, 10));\n                currentString = '';\n                addRecordToIndex(index, currentRecord);\n                currentRecord = [];\n            }\n            else if (charCode !== 13 /* \\r */ && charCode !== 32 /* space */) {\n                // if there are other characters in the file besides\n                // space and \\r, something is wrong.\n                throw new CramMalformedError('invalid .crai index file');\n            }\n        }\n        // if the file ends without a \\n, we need to flush our buffers\n        if (currentString) {\n            currentRecord.push(Number.parseInt(currentString, 10));\n        }\n        if (currentRecord.length === 6) {\n            addRecordToIndex(index, currentRecord);\n        }\n        // sort each of them by start\n        Object.entries(index).forEach(([seqId, ent]) => {\n            const e2 = ent;\n            index[seqId] = e2.sort((a, b) => a.start - b.start || a.span - b.span);\n        });\n        return index;\n    }\n    getIndex() {\n        if (!this.parseIndexP) {\n            this.parseIndexP = this.parseIndex().catch((e) => {\n                this.parseIndexP = undefined;\n                throw e;\n            });\n        }\n        return this.parseIndexP;\n    }\n    /**\n     * @param {number} seqId\n     * @returns {Promise} true if the index contains entries for\n     * the given reference sequence ID, false otherwise\n     */\n    async hasDataForReferenceSequence(seqId) {\n        return !!(await this.getIndex())[seqId];\n    }\n    /**\n     * fetch index entries for the given range\n     *\n     * @param {number} seqId\n     * @param {number} queryStart\n     * @param {number} queryEnd\n     *\n     * @returns {Promise} promise for\n     * an array of objects of the form\n     * `{start, span, containerStart, sliceStart, sliceBytes }`\n     */\n    async getEntriesForRange(seqId, queryStart, queryEnd) {\n        const seqEntries = (await this.getIndex())[seqId];\n        if (!seqEntries) {\n            return [];\n        }\n        const compare = (entry) => {\n            const entryStart = entry.start;\n            const entryEnd = entry.start + entry.span;\n            if (entryStart > queryEnd) {\n                return -1;\n            } // entry is ahead of query\n            if (entryEnd <= queryStart) {\n                return 1;\n            } // entry is behind query\n            return 0; // entry overlaps query\n        };\n        const bins = [];\n        for (const entry of seqEntries) {\n            if (compare(entry) === 0) {\n                bins.push(entry);\n            }\n        }\n        return bins;\n    }\n}\n//# sourceMappingURL=craiIndex.js.map","import CramFile from \"./cramFile/index.js\";\nimport { CramUnimplementedError } from \"./errors.js\";\nexport default class IndexedCramFile {\n    /**\n     *\n     * @param {object} args\n     * @param {CramFile} args.cram\n     *\n     * @param {Index-like} args.index object that supports\n     * getEntriesForRange(seqId,start,end) -> Promise[Array[index entries]]\n     *\n     * @param {number} [args.cacheSize] optional maximum number of CRAM records\n     * to cache.  default 20,000\n     *\n     * @param {boolean} [args.checkSequenceMD5] - default true. if false,\n     * disables verifying the MD5 checksum of the reference sequence underlying a\n     * slice. In some applications, this check can cause an inconvenient amount\n     * (many megabases) of sequences to be fetched.\n     */\n    constructor(args) {\n        this.cram =\n            args.cram ??\n                new CramFile({\n                    url: args.cramUrl,\n                    path: args.cramPath,\n                    filehandle: args.cramFilehandle,\n                    seqFetch: args.seqFetch,\n                    checkSequenceMD5: args.checkSequenceMD5,\n                    cacheSize: args.cacheSize,\n                });\n        if (!(this.cram instanceof CramFile)) {\n            throw new Error('invalid arguments: no cramfile');\n        }\n        this.index = args.index;\n    }\n    /**\n     *\n     * @param seq numeric ID of the reference sequence\n     * @param start start of the range of interest. 1-based closed coordinates.\n     * @param end end of the range of interest. 1-based closed coordinates.\n     */\n    async getRecordsForRange(seq, start, end, opts = {}) {\n        opts.viewAsPairs = opts.viewAsPairs || false;\n        opts.pairAcrossChr = opts.pairAcrossChr || false;\n        opts.maxInsertSize = opts.maxInsertSize || 200000;\n        if (typeof seq === 'string') {\n            // TODO: support string reference sequence names somehow\n            throw new CramUnimplementedError('string sequence names not yet supported');\n        }\n        const seqId = seq;\n        const slices = await this.index.getEntriesForRange(seqId, start, end);\n        // fetch all the slices and parse the feature data\n        const sliceResults = await Promise.all(slices.map(slice => this.getRecordsInSlice(slice, feature => feature.sequenceId === seq &&\n            feature.alignmentStart <= end &&\n            feature.lengthOnRef !== undefined &&\n            feature.alignmentStart + feature.lengthOnRef - 1 >= start)));\n        let ret = Array.prototype.concat(...sliceResults);\n        if (opts.viewAsPairs) {\n            const readNames = {};\n            const readIds = {};\n            for (const read of ret) {\n                const name = read.readName;\n                if (name === undefined) {\n                    throw new Error('readName undefined');\n                }\n                const id = read.uniqueId;\n                if (!readNames[name]) {\n                    readNames[name] = 0;\n                }\n                readNames[name] += 1;\n                readIds[id] = 1;\n            }\n            const unmatedPairs = {};\n            Object.entries(readNames).forEach(([k, v]) => {\n                if (v === 1) {\n                    unmatedPairs[k] = true;\n                }\n            });\n            const matePromises = [];\n            for (const cramRecord of ret) {\n                const name = cramRecord.readName;\n                if (name === undefined) {\n                    throw new Error('readName undefined');\n                }\n                if (unmatedPairs[name] &&\n                    cramRecord.mate &&\n                    (cramRecord.mate.sequenceId === seqId || opts.pairAcrossChr) &&\n                    Math.abs(cramRecord.alignmentStart - cramRecord.mate.alignmentStart) <\n                        opts.maxInsertSize) {\n                    const mateSlices = this.index.getEntriesForRange(cramRecord.mate.sequenceId, cramRecord.mate.alignmentStart, cramRecord.mate.alignmentStart + 1);\n                    matePromises.push(mateSlices);\n                }\n            }\n            const mateBlocks = await Promise.all(matePromises);\n            let mateChunks = [];\n            for (const block of mateBlocks) {\n                mateChunks.push(...block);\n            }\n            // filter out duplicates\n            mateChunks = mateChunks\n                .sort((a, b) => a.toString().localeCompare(b.toString()))\n                .filter((item, pos, ary) => !pos || item.toString() !== ary[pos - 1].toString());\n            const mateRecordPromises = [];\n            const mateFeatPromises = [];\n            for (const c of mateChunks) {\n                let recordPromise = this.cram.featureCache.get(c.toString());\n                if (!recordPromise) {\n                    recordPromise = this.getRecordsInSlice(c, () => true);\n                    this.cram.featureCache.set(c.toString(), recordPromise);\n                }\n                mateRecordPromises.push(recordPromise);\n                const featPromise = recordPromise.then(feats => {\n                    const mateRecs = [];\n                    for (const feature of feats) {\n                        if (feature.readName === undefined) {\n                            throw new Error('readName undefined');\n                        }\n                        if (unmatedPairs[feature.readName] && !readIds[feature.uniqueId]) {\n                            mateRecs.push(feature);\n                        }\n                    }\n                    return mateRecs;\n                });\n                mateFeatPromises.push(featPromise);\n            }\n            const newMateFeats = await Promise.all(mateFeatPromises);\n            if (newMateFeats.length) {\n                const newMates = newMateFeats.reduce((result, current) => result.concat(current));\n                ret = ret.concat(newMates);\n            }\n        }\n        return ret;\n    }\n    getRecordsInSlice({ containerStart, sliceStart, sliceBytes, }, filterFunction) {\n        const container = this.cram.getContainerAtPosition(containerStart);\n        const slice = container.getSlice(sliceStart, sliceBytes);\n        return slice.getRecords(filterFunction);\n    }\n    /**\n     *\n     * @param {number} seqId\n     * @returns {Promise} true if the CRAM file contains data for the given\n     * reference sequence numerical ID\n     */\n    hasDataForReferenceSequence(seqId) {\n        return this.index.hasDataForReferenceSequence(seqId);\n    }\n}\n//# sourceMappingURL=indexedCramFile.js.map","export function readFeaturesToMismatches(readFeatures, start, qual) {\n    if (!readFeatures) {\n        return [];\n    }\n    const mismatches = new Array(readFeatures.length);\n    let j = 0;\n    let insLen = 0;\n    let refPos = 0;\n    let sublen = 0;\n    let lastPos = start;\n    for (const { refPos: p, code, pos, data, sub, ref } of readFeatures) {\n        sublen = refPos - lastPos;\n        lastPos = refPos;\n        if (sublen && insLen > 0) {\n            mismatches[j++] = {\n                start: refPos,\n                type: 'insertion',\n                base: `${insLen}`,\n                length: 0,\n            };\n            insLen = 0;\n        }\n        refPos = p - 1 - start;\n        if (code === 'X') {\n            mismatches[j++] = {\n                start: refPos,\n                length: 1,\n                base: sub,\n                qual: qual === null || qual === void 0 ? void 0 : qual[pos - 1],\n                altbase: ref === null || ref === void 0 ? void 0 : ref.toUpperCase(),\n                type: 'mismatch',\n            };\n        }\n        else if (code === 'I') {\n            mismatches[j++] = {\n                start: refPos,\n                type: 'insertion',\n                base: `${data.length}`,\n                length: 0,\n            };\n        }\n        else if (code === 'N') {\n            mismatches[j++] = {\n                type: 'skip',\n                length: data,\n                start: refPos,\n                base: 'N',\n            };\n        }\n        else if (code === 'S') {\n            const len = data.length;\n            mismatches[j++] = {\n                start: refPos,\n                type: 'softclip',\n                base: `S${len}`,\n                cliplen: len,\n                length: 1,\n            };\n        }\n        else if (code === 'P') {\n        }\n        else if (code === 'H') {\n            const len = data;\n            mismatches[j++] = {\n                start: refPos,\n                type: 'hardclip',\n                base: `H${len}`,\n                cliplen: len,\n                length: 1,\n            };\n        }\n        else if (code === 'D') {\n            mismatches[j++] = {\n                type: 'deletion',\n                length: data,\n                start: refPos,\n                base: '*',\n            };\n        }\n        else if (code === 'b') {\n        }\n        else if (code === 'q') {\n        }\n        else if (code === 'B') {\n        }\n        else if (code === 'i') {\n            insLen++;\n        }\n        else if (code === 'Q') {\n        }\n    }\n    if (sublen && insLen > 0) {\n        mismatches[j++] = {\n            start: refPos,\n            type: 'insertion',\n            base: `${insLen}`,\n            length: 0,\n        };\n        insLen = 0;\n    }\n    return mismatches.slice(0, j);\n}\nexport function readFeaturesToCIGAR(readFeatures, alignmentStart, readLen, refRegion) {\n    let seq = '';\n    let cigar = '';\n    let op = 'M';\n    let oplen = 0;\n    if (!refRegion) {\n        return '';\n    }\n    const ref = refRegion.seq;\n    const refStart = refRegion.start;\n    let lastPos = alignmentStart;\n    let sublen = 0;\n    let insLen = 0;\n    if (readFeatures !== undefined) {\n        for (const { code, refPos, sub, data } of readFeatures) {\n            sublen = refPos - lastPos;\n            seq += ref.slice(lastPos - refStart, refPos - refStart);\n            lastPos = refPos;\n            if (insLen > 0 && sublen) {\n                cigar += `${insLen}I`;\n                insLen = 0;\n            }\n            if (oplen && op !== 'M') {\n                cigar += `${oplen}${op}`;\n                oplen = 0;\n            }\n            if (sublen) {\n                op = 'M';\n                oplen += sublen;\n            }\n            if (code === 'b') {\n                const ret = data.split(',');\n                const added = String.fromCharCode(...ret);\n                seq += added;\n                lastPos += added.length;\n                oplen += added.length;\n            }\n            else if (code === 'B') {\n                seq += sub;\n                lastPos++;\n                oplen++;\n            }\n            else if (code === 'X') {\n                seq += sub;\n                lastPos++;\n                oplen++;\n            }\n            else if (code === 'D' || code === 'N') {\n                lastPos += data;\n                if (oplen) {\n                    cigar += `${oplen}${op}`;\n                }\n                cigar += data + code;\n                oplen = 0;\n            }\n            else if (code === 'I' || code === 'S') {\n                seq += data;\n                if (oplen) {\n                    cigar += `${oplen}${op}`;\n                }\n                cigar += data.length + code;\n                oplen = 0;\n            }\n            else if (code === 'i') {\n                if (oplen) {\n                    cigar += `${oplen}${op}`;\n                }\n                insLen++;\n                seq += data;\n                oplen = 0;\n            }\n            else if (code === 'P') {\n                if (oplen) {\n                    cigar += `${oplen}${op}`;\n                }\n                cigar += `${data}P`;\n            }\n            else if (code === 'H') {\n                if (oplen) {\n                    cigar += `${oplen}${op}`;\n                }\n                cigar += `${data}H`;\n                oplen = 0;\n            }\n        }\n    }\n    else {\n        sublen = readLen - seq.length;\n    }\n    if (seq.length !== readLen) {\n        sublen = readLen - seq.length;\n        seq += ref.slice(lastPos - refStart, lastPos - refStart + sublen);\n        if (oplen && op !== 'M') {\n            cigar += `${oplen}${op}`;\n            oplen = 0;\n        }\n        op = 'M';\n        oplen += sublen;\n    }\n    if (sublen && insLen > 0) {\n        cigar += `${insLen}I`;\n    }\n    if (oplen) {\n        cigar += `${oplen}${op}`;\n    }\n    return cigar;\n}\n","import { readFeaturesToCIGAR, readFeaturesToMismatches } from './util';\nimport { cacheGetter } from '../shared/util';\nexport default class CramSlightlyLazyFeature {\n    constructor(record, _store) {\n        this.record = record;\n        this._store = _store;\n    }\n    get name() {\n        return this.record.readName;\n    }\n    get start() {\n        return this.record.alignmentStart - 1;\n    }\n    get end() {\n        var _a;\n        return this.start + ((_a = this.record.lengthOnRef) !== null && _a !== void 0 ? _a : 1);\n    }\n    get score() {\n        return this.record.mappingQuality;\n    }\n    get flags() {\n        return this.record.flags;\n    }\n    get strand() {\n        return this.record.isReverseComplemented() ? -1 : 1;\n    }\n    get qual() {\n        return (this.record.qualityScores || []).join(' ');\n    }\n    get qualRaw() {\n        return this.record.qualityScores;\n    }\n    get refName() {\n        return this._store.refIdToName(this.record.sequenceId);\n    }\n    get pair_orientation() {\n        return this.record.isPaired() ? this.record.getPairOrientation() : undefined;\n    }\n    get template_length() {\n        return this.record.templateLength || this.record.templateSize;\n    }\n    get next_ref() {\n        return this.record.mate\n            ? this._store.refIdToName(this.record.mate.sequenceId)\n            : undefined;\n    }\n    get next_segment_position() {\n        return this.record.mate\n            ? `${this._store.refIdToName(this.record.mate.sequenceId)}:${this.record.mate.alignmentStart}`\n            : undefined;\n    }\n    get is_paired() {\n        return !!this.record.mate;\n    }\n    get next_pos() {\n        var _a;\n        return (_a = this.record.mate) === null || _a === void 0 ? void 0 : _a.alignmentStart;\n    }\n    get tags() {\n        var _a;\n        const RG = (_a = this._store.samHeader.readGroups) === null || _a === void 0 ? void 0 : _a[this.record.readGroupId];\n        return RG !== undefined ? { ...this.record.tags, RG } : this.record.tags;\n    }\n    get seq() {\n        return this.record.getReadBases();\n    }\n    get CIGAR() {\n        return readFeaturesToCIGAR(this.record.readFeatures, this.record.alignmentStart, this.record.readLength, this.record._refRegion);\n    }\n    id() {\n        return `${this._store.id}-${this.record.uniqueId}`;\n    }\n    get(field) {\n        return field === 'mismatches'\n            ? this.mismatches\n            : field === 'qual'\n                ? this.qual\n                : field === 'CIGAR'\n                    ? this.CIGAR\n                    : this.fields[field];\n    }\n    parent() {\n        return undefined;\n    }\n    children() {\n        return undefined;\n    }\n    get mismatches() {\n        return readFeaturesToMismatches(this.record.readFeatures, this.start, this.qualRaw);\n    }\n    get fields() {\n        return {\n            start: this.start,\n            name: this.name,\n            end: this.end,\n            score: this.score,\n            strand: this.strand,\n            template_length: this.template_length,\n            flags: this.flags,\n            tags: this.tags,\n            refName: this.refName,\n            seq: this.seq,\n            type: 'match',\n            pair_orientation: this.pair_orientation,\n            next_ref: this.next_ref,\n            next_pos: this.next_pos,\n            next_segment_position: this.next_segment_position,\n            uniqueId: this.id(),\n        };\n    }\n    toJSON() {\n        return {\n            ...this.fields,\n            CIGAR: this.CIGAR,\n            qual: this.qual,\n        };\n    }\n}\ncacheGetter(CramSlightlyLazyFeature, 'fields');\ncacheGetter(CramSlightlyLazyFeature, 'CIGAR');\ncacheGetter(CramSlightlyLazyFeature, 'mismatches');\n","import { CraiIndex, IndexedCramFile } from '@gmod/cram';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { toLocale, updateStatus } from '@jbrowse/core/util';\nimport QuickLRU from '@jbrowse/core/util/QuickLRU';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { firstValueFrom } from 'rxjs';\nimport { toArray } from 'rxjs/operators';\nimport CramSlightlyLazyFeature from './CramSlightlyLazyFeature';\nimport { filterReadFlag, filterTagValue } from '../shared/util';\nexport default class CramAdapter extends BaseFeatureDataAdapter {\n    constructor() {\n        super(...arguments);\n        this.samHeader = {};\n        this.ultraLongFeatureCache = new QuickLRU({\n            maxSize: 500,\n        });\n        this.seqIdToOriginalRefName = [];\n    }\n    async configurePre() {\n        const cramLocation = this.getConf('cramLocation');\n        const craiLocation = this.getConf('craiLocation');\n        const pm = this.pluginManager;\n        const cram = new IndexedCramFile({\n            cramFilehandle: openLocation(cramLocation, pm),\n            index: new CraiIndex({\n                filehandle: openLocation(craiLocation, pm),\n            }),\n            seqFetch: (...args) => this.seqFetch(...args),\n            checkSequenceMD5: false,\n        });\n        if (!this.getSubAdapter) {\n            throw new Error('Error getting subadapter');\n        }\n        const seqConf = this.getConf('sequenceAdapter');\n        if (!seqConf) {\n            throw new Error('no sequenceAdapter supplied to CramAdapter config');\n        }\n        const subadapter = await this.getSubAdapter(seqConf);\n        return {\n            cram,\n            sequenceAdapter: subadapter.dataAdapter,\n        };\n    }\n    async configure() {\n        if (!this.configureP) {\n            this.configureP = this.configurePre().catch((e) => {\n                this.configureP = undefined;\n                throw e;\n            });\n        }\n        return this.configureP;\n    }\n    async getHeader(_opts) {\n        const { cram } = await this.configure();\n        return cram.cram.getHeaderText();\n    }\n    async seqFetch(seqId, start, end) {\n        start -= 1;\n        const { sequenceAdapter } = await this.configure();\n        const refName = this.refIdToOriginalName(seqId) || this.refIdToName(seqId);\n        if (!refName) {\n            throw new Error('unknown');\n        }\n        const seqChunks = await firstValueFrom(sequenceAdapter\n            .getFeatures({\n            refName,\n            start,\n            end,\n            assemblyName: '',\n        })\n            .pipe(toArray()));\n        const sequence = seqChunks\n            .sort((a, b) => a.get('start') - b.get('start'))\n            .map(chunk => {\n            const chunkStart = chunk.get('start');\n            const chunkEnd = chunk.get('end');\n            const trimStart = Math.max(start - chunkStart, 0);\n            const trimEnd = Math.min(end - chunkStart, chunkEnd - chunkStart);\n            const trimLength = trimEnd - trimStart;\n            const chunkSeq = chunk.get('seq') || chunk.get('residues');\n            return chunkSeq.slice(trimStart, trimStart + trimLength);\n        })\n            .join('');\n        const qlen = end - start;\n        if (sequence.length !== qlen) {\n            throw new Error(`fetching ${refName}:${toLocale(start - 1)}-${toLocale(end)} returned ${toLocale(sequence.length)} bases, should have returned ${toLocale(qlen)}`);\n        }\n        return sequence;\n    }\n    async setupPre(_opts) {\n        const conf = await this.configure();\n        const { cram } = conf;\n        const samHeader = await cram.cram.getSamHeader();\n        const idToName = [];\n        const nameToId = {};\n        for (const [refId, sqLine] of samHeader\n            .filter(l => l.tag === 'SQ')\n            .entries()) {\n            const SN = sqLine.data.find(item => item.tag === 'SN');\n            if (SN) {\n                const refName = SN.value;\n                nameToId[refName] = refId;\n                idToName[refId] = refName;\n            }\n        }\n        const readGroups = samHeader\n            .filter(l => l.tag === 'RG')\n            .map(rgLine => { var _a; return (_a = rgLine.data.find(item => item.tag === 'ID')) === null || _a === void 0 ? void 0 : _a.value; });\n        const data = { idToName, nameToId, readGroups };\n        this.samHeader = data;\n        return {\n            samHeader: data,\n            ...conf,\n        };\n    }\n    async setupPre2(opts) {\n        if (!this.setupP) {\n            this.setupP = this.setupPre(opts).catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async setup(opts) {\n        const { statusCallback = () => { } } = opts || {};\n        return updateStatus('Downloading index', statusCallback, () => this.setupPre2(opts));\n    }\n    async getRefNames(opts) {\n        const { samHeader } = await this.setup(opts);\n        if (!samHeader.idToName) {\n            throw new Error('CRAM file has no header lines');\n        }\n        return samHeader.idToName;\n    }\n    refNameToId(refName) {\n        if (this.samHeader.nameToId) {\n            return this.samHeader.nameToId[refName];\n        }\n        if (this.seqIdToRefName) {\n            return this.seqIdToRefName.indexOf(refName);\n        }\n        return undefined;\n    }\n    refIdToName(refId) {\n        var _a, _b;\n        return ((_a = this.samHeader.idToName) === null || _a === void 0 ? void 0 : _a[refId]) || ((_b = this.seqIdToRefName) === null || _b === void 0 ? void 0 : _b[refId]);\n    }\n    refIdToOriginalName(refId) {\n        return this.seqIdToOriginalRefName[refId];\n    }\n    getFeatures(region, opts) {\n        const { stopToken, filterBy, statusCallback = () => { } } = opts || {};\n        const { refName, start, end, originalRefName } = region;\n        return ObservableCreate(async (observer) => {\n            const { cram, samHeader } = await this.setup(opts);\n            const refId = this.refNameToId(refName);\n            if (refId === undefined) {\n                console.warn('Unknown refName', refName);\n                observer.complete();\n                return;\n            }\n            if (originalRefName) {\n                this.seqIdToOriginalRefName[refId] = originalRefName;\n            }\n            const records = await updateStatus('Downloading alignments', statusCallback, () => cram.getRecordsForRange(refId, start, end));\n            checkStopToken(stopToken);\n            await updateStatus('Processing alignments', statusCallback, () => {\n                var _a;\n                const { flagInclude = 0, flagExclude = 0, tagFilter, readName, } = filterBy || {};\n                for (const record of records) {\n                    if (filterReadFlag(record.flags, flagInclude, flagExclude)) {\n                        continue;\n                    }\n                    if (tagFilter &&\n                        filterTagValue(tagFilter.tag === 'RG'\n                            ? (_a = samHeader.readGroups) === null || _a === void 0 ? void 0 : _a[record.readGroupId]\n                            : record.tags[tagFilter.tag], tagFilter.value)) {\n                        continue;\n                    }\n                    if (readName && record.readName !== readName) {\n                        continue;\n                    }\n                    const ret = this.ultraLongFeatureCache.get(`${record.uniqueId}`);\n                    if (!ret) {\n                        const elt = this.cramRecordToFeature(record);\n                        this.ultraLongFeatureCache.set(`${record.uniqueId}`, elt);\n                        observer.next(elt);\n                    }\n                    else {\n                        observer.next(ret);\n                    }\n                }\n                observer.complete();\n            });\n        }, stopToken);\n    }\n    cramRecordToFeature(record) {\n        return new CramSlightlyLazyFeature(record, this);\n    }\n    async getMultiRegionFeatureDensityStats(regions, opts) {\n        const bytes = await this.bytesForRegions(regions, opts);\n        const fetchSizeLimit = this.getConf('fetchSizeLimit');\n        return {\n            bytes,\n            fetchSizeLimit,\n        };\n    }\n    async bytesForRegions(regions, _opts) {\n        const { cram } = await this.configure();\n        const blockResults = await Promise.all(regions.map(region => {\n            const { refName, start, end } = region;\n            const chrId = this.refNameToId(refName);\n            return chrId !== undefined\n                ? cram.index.getEntriesForRange(chrId, start, end)\n                : [{ sliceBytes: 0 }];\n        }));\n        return blockResults.flat().reduce((a, b) => a + b.sliceBytes, 0);\n    }\n}\n"],"names":["Constants","decodeReadSequence","cramRecord","refRegion","regionSeqOffset","bases","regionPos","currentReadFeature","feature","added","chunk","baseNumbers","decodeBaseSubstitution","compressionScheme","readFeature","refCoord","refBase","baseNumber","base","BamFlags","CramFlags","MateFlags","makeFlagsHelper","x","r","code","name","flags","BamFlagsDecoder","CramFlagsDecoder","MateFlagsDecoder","CramRecord","cramFlags","readLength","mappingQuality","lengthOnRef","qualityScores","mateRecordNumber","readBases","readFeatures","mateToUse","readGroupId","readName","sequenceId","uniqueId","templateSize","alignmentStart","tags","decoded","s1","s2","o1","o2","tmp","isize","data","k","root","factory","module","require$$0","this","__WEBPACK_EXTERNAL_MODULE__2__","__webpack_modules__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","definition","key","obj","prop","__webpack_exports__","XzReadableStream","_dist_native_xz_decompress_wasm__WEBPACK_IMPORTED_MODULE_0__","ReadableStream","XZ_OK","XZ_STREAM_END","XzContext","moduleInstance","sourceDataUint8Array","result","ContextMutex","resolve","base64Wasm","wasmBytes","c","wasmOptions","compressedStream","xzContext","unconsumedInput","compressedReader","controller","error","done","value","nextInputLength","nextOutputResult","CramError","CramUnimplementedError","CramMalformedError","CramArgumentError","LUT_HEX_4b","LUT_HEX_8b","n","toHex","buffer","out","idx","edx","BITMASK","BitReader","stream","bits","remaining","shift","pos","n_bit","n_byte","buf","i","crc32Lookup","CRC32","count","Stream","bufOffset","length","bytesRead","_byte","new_pos","MAX_HUFCODE_BITS","MAX_SYMBOLS","SYMBOL_RUNA","SYMBOL_RUNB","MIN_GROUPS","MAX_GROUPS","GROUP_SIZE","WHOLEPI","SQRTPI","mtf","array","index","src","Err","ErrorMessages","_throw","status","optDetail","msg","e","Bunzip","inputStream","outputStream","level","j","reader","h","origPointer","t","symToByte","symTotal","o","groupCount","nSelectors","mtfSymbol","selectors","symCount","groups","hufGroup","temp","minLen","maxLen","pp","byteCount","runPos","dbufCount","selector","uc","dbuf","nextSym","current","run","outputBuffer","len","copies","previous","outbyte","coerceInputStream","input","coerceOutputStream","output","newBuffer","decode","multistream","bz","targetStreamCRC","RangeCoder","tot_freq","sym_low","sym_freq","dst","old_low","MAX_FREQ","STEP","ByteModel","max_sym","rc","freq","acc","sym","IOStream","start_pos","size","A","b","s","ARITH_ORDER","ARITH_EXT","ARITH_STRIPE","ARITH_NOSIZE","ARITH_CAT","ARITH_RLE","ARITH_PACK","RangeCoderGen","n_out","e_len","order","P","byte_model","last","model_lit","model_run","part","rctx","M","v","nsym","N","clen","ulen","T","read_array","tab","z","R","copy","run_len","FLAG_DEDUP","FLAG_FLEN","FLAG_SEL","FLAG_QMAP","FLAG_PTAB","FLAG_DTAB","FLAG_QTAB","GFLAG_MULTI_PARAM","GFLAG_HAVE_STAB","GFLAG_DO_REV","fqz_update_ctx","params","state","q","decode_fqz_single_param","p","decode_fqz_params","gparams","gflags","nparam","max_sel","stab","fqz_create_models","model","decode_fqz_new_record","rev","decode_fqz","q_lens","Q","reverse_qualities","qual","qual_len","rec","RansGetCumulativeFreq","RansGetSymbolFromFreq","C","f","RansBuildC2S","max","C2S","RansAdvanceStep","RansRenorm","DecodeRLEMeta","u_meta_len","rle_len","rle_meta","comp_meta_len","RansDecode0","L","DecodeRLE","DecodePackMeta","DecodePack","RansDecodeStripe","RansDecodeStream","format","x32","stripe","nosz","cat","rle","pack","Nway","pack_len","RansDecode1","ReadAlphabet","last_sym","ReadFrequencies0","F","NormaliseFrequencies0_Shift","nbytes","ix","tot","ReadFrequencies1","comp","freq_src","nbytesx","sum","entry","concatUint8Array","args","mergedArray","offset","arith","arith_gen","TOK_TYPE","TOK_STRING","TOK_CHAR","TOK_DIGITS0","TOK_DZLEN","TOK_DUP","TOK_DIGITS","TOK_DELTA","TOK_DELTA0","TOK_MATCH","TOK_END","DecodeTokenByteStreams","in_size","use_arith","nnames","B","ttype","tok_new","tok_dup","type","dup_pos","dup_type","rans.decode","LeftPadNumber","val","str","DecodeSingleName","dist","m","d","l","separator","r4x16_uncompress","inputBuffer","r4x16.decode","arith_uncompress","fqzcomp_uncompress","fqzcomp.decode","tok3_uncompress","tok3.decode","letter","open","maybeUrl","maybePath","maybeFilehandle","RemoteFile","LocalFile","TF_SHIFT","TOTFREQ","RANS_BYTE_L","FC","AriDecoder","DecodingSymbol","symbolInit","start","advanceStep","scaleBits","mask","advanceSymbolStep","get","advance","pptr","advanceSymbol","renormalize","Decoding","uncompress","D","syms","rans0","rans1","rans2","rans3","outputSize","outputEnd","c0","c1","c2","c3","rans7","isz4","i0","i1","i2","i7","l0","l1","l2","l7","c7","assert","readStatsO0","cp","decoder","readStatsO1","rlei","rlej","RAW_BYTE_LENGTH","uncompressOrder0Way4","D04","uncompressOrder1Way4","D14","ByteBuffer","nodeBuffer","initialInputPosition","position","parseHeaderText","text","lines","line","tag","fields","inflate","pkg","unzip","CramBufferOverrunError","getBits","cursor","numBits","dlen","base64map","crypt","bytes","words","hex","base64","triplet","imod4","cryptModule","charenc","charenc_1","isBuffer_1","isBuffer","isSlowBuffer","utf8","require$$1","require$$2","bin","md5","message","options","a","FF","GG","HH","II","aa","bb","cc","dd","md5Module","digestbytes","TWO_PWR_16_DBL","TWO_PWR_32_DBL","TWO_PWR_24_DBL","TWO_PWR_56_DBL","itf8Size","parseItf8","initialOffset","countFlags","parseLtf8","parseItem","parser","startBufferPosition","startFilePosition","tinyMemoize","_class","methodName","method","memoAttrName","res","sequenceMD5","seq","cramFileDefinition","_startOffset","dataView","magic","majorVersion","minorVersion","fileId","cramBlockHeader","compressionMethod","contentType","contentId","newOffset1","compressedSize","newOffset2","uncompressedSize","newOffset3","cramBlockCrc32","crc32","makeTagSet","stringStart","stringEnd","cramTagDictionary","subbuf","tagSets","cramPreservationMap","mapSize","mapCount","ents","offsetRet","formatMap","map","isMappedSliceHeader","header","cramUnmappedSliceHeader","maxLength","numRecords","recordCounter","numBlocks","numContentIds","newOffset4","contentIds","id","newOffset5","cramMappedSliceHeader","refSeqId","refSeqStart","refSeqSpan","newOffset6","newOffset7","refBaseBlockId","newOffset8","cramEncoding","cramEncodingSub","codecId","parametersBytes","parameters","bc","off","M2","numCodes","symbols","val2","numLengths","bitLengths","lengthsEncoding","valuesEncoding","blockContentId","K","l2m","cramDataSeriesEncodingMap","cramTagEncodingMap","k0","cramCompressionHeader","preservation","dataSeriesEncoding","tagEncoding","cramContainerHeader1","alignmentSpan","numBases","numLandmarks","cramContainerHeader2","landmarks","landmark","getSectionParsers","readNullTerminatedString","parseTagValueArray","arrayType","arr","parseTagData","tagType","decodeReadFeatures","readFeatureCount","decodeDataSeries","currentReadPos","currentRefPos","decodeRFData","dataSeriesName","readPosDelta","data1Schema","data2Schema","refPos","decodeRecord","slice","sliceHeader","coreDataBlock","blocksByContentId","cursors","recordNumber","mateFlags","mateReadName","mateSequenceId","mateAlignmentStart","TLindex","TN","ntags","tagId","tagName","tagData","calculateMultiSegmentMatedTemplateLength","allRecords","_currentRecordNumber","thisRecord","getAllMatedRecords","startRecord","records","mateRecord","matedRecords","starts","ends","estimatedTemplateLength","calculateIntraSliceMatePairTemplateLength","lengthEstimate","associateIntraSliceMate","currentRecordNumber","complicatedMultiSegment","CramSlice","container","containerPosition","sliceSize","sectionParsers","containerHeader","content","blockPosition","blocks","block","refBlock","end","seqMd5","storedMd5","byte","codec","init","filterFunction","cacheKey","recordsPromise","singleRefId","refRegions","record","seqId","CramCodec","dataType","BetaCodec","_slice","_blocksByContentId","instantiateCodec","arrayLength","dataCodec","encodingParams","ByteArrayStopCodec","_coreDataBlock","contentBlock","dataBuffer","stopByte","startPosition","stopPosition","ExternalCodec","GammaCodec","numberOfSetBits","ii","HuffmanIntCodec","codes","codeLength","codeValue","bitLength","bitLengthInt","symbol","delta","maxBitCode","coreCursor","prevLen","SubexpCodec","numLeadingOnes","codecClasses","ByteArrayLengthCodec","getCodecClassWithId","encodingData","CodecClass","dataSeriesTypes","parseSubstitutionMatrix","byteArray","matrix","CramContainerCompressionScheme","test","ret","tagListId","CramContainer","file","filePosition","slicePosition","bytes1","header1","numLandmarksSize","bytes2","header2","bufferToStream","getEndianness","uInt32","uInt8","CramFile","QuickLRU","headbytes","firstContainer","headerLength","textStart","containerNumber","currentContainer","currentHeader","recordedCrc32","description","calculatedCrc32","containerCount","section","preReadBuffer","decompressedResponse","ransuncompress","htscodecs.r4x16_uncompress","htscodecs.arith_uncompress","htscodecs.fqzcomp_uncompress","htscodecs.tok3_uncompress","blockHeader","blockContentPosition","uncompressedData","crc","BAI_MAGIC","addRecordToIndex","span","containerStart","sliceStart","sliceBytes","maybeUnzip","CraiIndex","uncompressedBuffer","currentRecord","currentString","charCode","ent","e2","queryStart","queryEnd","seqEntries","compare","entryStart","entryEnd","bins","IndexedCramFile","opts","slices","sliceResults","readNames","readIds","read","unmatedPairs","matePromises","mateSlices","mateBlocks","mateChunks","item","ary","mateFeatPromises","recordPromise","featPromise","feats","mateRecs","newMateFeats","newMates","readFeaturesToMismatches","mismatches","insLen","sublen","lastPos","sub","ref","readFeaturesToCIGAR","readLen","cigar","op","oplen","refStart","CramSlightlyLazyFeature","_store","_a","RG","field","cacheGetter","CramAdapter","BaseFeatureDataAdapter","cramLocation","craiLocation","pm","cram","openLocation","seqConf","subadapter","_opts","sequenceAdapter","refName","sequence","firstValueFrom","toArray","chunkStart","chunkEnd","trimStart","trimLength","qlen","toLocale","conf","samHeader","idToName","nameToId","refId","sqLine","SN","readGroups","rgLine","statusCallback","updateStatus","_b","region","stopToken","filterBy","originalRefName","ObservableCreate","observer","checkStopToken","flagInclude","flagExclude","tagFilter","filterReadFlag","filterTagValue","elt","regions","fetchSizeLimit","chrId"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52]}