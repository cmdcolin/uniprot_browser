{"version":3,"file":"ImportForm-RaGB3tT1.js","sources":["../../node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ImportFormRefNameAutocomplete.js","../../node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ImportForm.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getSession } from '@jbrowse/core/util';\nimport { observer } from 'mobx-react';\nimport RefNameAutocomplete from './RefNameAutocomplete';\nimport { fetchResults } from './util';\nconst ImportFormRefNameAutocomplete = observer(function ({ model, selectedAsm, value, setValue, setOption, }) {\n    const session = getSession(model);\n    const { assemblyManager, textSearchManager } = session;\n    const { rankSearchResults } = model;\n    const searchScope = model.searchScope(selectedAsm);\n    const assembly = assemblyManager.get(selectedAsm);\n    return (_jsx(RefNameAutocomplete, { fetchResults: queryString => fetchResults({\n            queryString,\n            assembly,\n            textSearchManager,\n            rankSearchResults,\n            searchScope,\n        }), model: model, assemblyName: selectedAsm, value: value, minWidth: 270, onChange: str => {\n            setValue(str);\n        }, onSelect: val => {\n            setOption(val);\n        }, TextFieldProps: {\n            variant: 'outlined',\n            helperText: 'Enter sequence name, feature name, or location',\n        } }));\n});\nexport default ImportFormRefNameAutocomplete;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { AssemblySelector, ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession } from '@jbrowse/core/util';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Button, CircularProgress, Container, FormControl, Grid as Grid, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport ImportFormRefNameAutocomplete from './ImportFormRefNameAutocomplete';\nimport { handleSelectedRegion, navToOption } from '../../searchUtils';\nconst useStyles = makeStyles()(theme => ({\n    importFormContainer: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(2),\n    },\n    container: {\n        padding: theme.spacing(4),\n    },\n}));\nconst LinearGenomeViewImportForm = observer(function ({ model, }) {\n    var _a;\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { assemblyNames, assemblyManager } = session;\n    const { error } = model;\n    const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]);\n    const [option, setOption] = useState();\n    const assembly = assemblyManager.get(selectedAsm);\n    const assemblyError = assemblyNames.length\n        ? assembly === null || assembly === void 0 ? void 0 : assembly.error\n        : 'No configured assemblies';\n    const displayError = assemblyError || error;\n    const [value, setValue] = useState('');\n    const regions = assembly === null || assembly === void 0 ? void 0 : assembly.regions;\n    const assemblyLoaded = !!regions;\n    const r0 = regions ? ((_a = regions[0]) === null || _a === void 0 ? void 0 : _a.refName) || '' : '';\n    useEffect(() => {\n        setValue(r0);\n    }, [r0, selectedAsm]);\n    return (_jsxs(\"div\", { className: classes.container, children: [displayError ? _jsx(ErrorMessage, { error: displayError }) : null, _jsx(Container, { className: classes.importFormContainer, children: _jsx(\"form\", { onSubmit: async (event) => {\n                        var _a;\n                        event.preventDefault();\n                        model.setError(undefined);\n                        if (value) {\n                            try {\n                                if ((option === null || option === void 0 ? void 0 : option.getDisplayString()) === value &&\n                                    option.hasLocation()) {\n                                    await navToOption({\n                                        option,\n                                        model,\n                                        assemblyName: selectedAsm,\n                                    });\n                                }\n                                else if ((_a = option === null || option === void 0 ? void 0 : option.results) === null || _a === void 0 ? void 0 : _a.length) {\n                                    model.setSearchResults(option.results, option.getLabel(), selectedAsm);\n                                }\n                                else if (assembly) {\n                                    await handleSelectedRegion({ input: value, assembly, model });\n                                }\n                            }\n                            catch (e) {\n                                console.error(e);\n                                session.notify(`${e}`, 'warning');\n                            }\n                        }\n                    }, children: _jsxs(Grid, { container: true, spacing: 1, justifyContent: \"center\", alignItems: \"center\", children: [_jsx(FormControl, { children: _jsx(AssemblySelector, { onChange: val => {\n                                        setSelectedAsm(val);\n                                    }, localStorageKey: \"lgv\", session: session, selected: selectedAsm }) }), selectedAsm ? (assemblyError ? (_jsx(CloseIcon, { style: { color: 'red' } })) : assemblyLoaded ? (_jsx(FormControl, { children: _jsx(ImportFormRefNameAutocomplete, { value: value, setValue: setValue, selectedAsm: selectedAsm, setOption: setOption, model: model }) })) : (_jsx(CircularProgress, { size: 20, disableShrink: true }))) : null, _jsx(FormControl, { children: _jsx(Button, { type: \"submit\", disabled: !value, className: classes.button, variant: \"contained\", color: \"primary\", children: \"Open\" }) }), _jsx(FormControl, { children: _jsx(Button, { disabled: !value, className: classes.button, onClick: () => {\n                                        model.setError(undefined);\n                                        model.showAllRegionsInAssembly(selectedAsm);\n                                    }, variant: \"contained\", color: \"secondary\", children: \"Show all regions in assembly\" }) })] }) }) })] }));\n});\nexport default LinearGenomeViewImportForm;\n"],"names":["ImportFormRefNameAutocomplete","observer","model","selectedAsm","value","setValue","setOption","session","getSession","assemblyManager","textSearchManager","rankSearchResults","searchScope","assembly","_jsx","RefNameAutocomplete","queryString","fetchResults","str","val","useStyles","makeStyles","theme","LinearGenomeViewImportForm","_a","classes","assemblyNames","error","setSelectedAsm","useState","option","assemblyError","displayError","regions","assemblyLoaded","r0","useEffect","_jsxs","ErrorMessage","Container","event","navToOption","handleSelectedRegion","e","Grid","FormControl","AssemblySelector","CloseIcon","CircularProgress","Button"],"mappings":"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","x_google_ignoreList":[0,1]}