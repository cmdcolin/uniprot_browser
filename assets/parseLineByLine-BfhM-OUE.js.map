{"version":3,"file":"parseLineByLine-BfhM-OUE.js","sources":["../../node_modules/@jbrowse/core/util/parseLineByLine.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseLineByLine = parseLineByLine;\nconst index_1 = require(\"./index\");\nfunction parseLineByLine(buffer, lineCallback, statusCallback = () => { }) {\n    const decoder = new TextDecoder('utf8');\n    let blockStart = 0;\n    let i = 0;\n    while (blockStart < buffer.length) {\n        const n = buffer.indexOf(10, blockStart);\n        const lineEnd = n === -1 ? buffer.length : n;\n        const b = buffer.subarray(blockStart, lineEnd);\n        const line = decoder.decode(b).trim();\n        if (line) {\n            const shouldContinue = lineCallback(line, i);\n            if (shouldContinue === false) {\n                break;\n            }\n        }\n        if (i++ % 10000 === 0) {\n            statusCallback(`Loading ${(0, index_1.getProgressDisplayStr)(blockStart, buffer.length)}`);\n        }\n        blockStart = lineEnd + 1;\n    }\n}\n"],"names":["parseLineByLine_1","parseLineByLine","index_1","require$$0","buffer","lineCallback","statusCallback","decoder","blockStart","i","n","lineEnd","b","line"],"mappings":"mFACA,OAAO,eAAeA,EAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,EAAA,gBAA0BC,EAC1B,MAAMC,EAAUC,EAAA,EAChB,SAASF,EAAgBG,EAAQC,EAAcC,EAAiB,IAAM,CAAA,EAAK,CACvE,MAAMC,EAAU,IAAI,YAAY,MAAM,EACtC,IAAIC,EAAa,EACbC,EAAI,EACR,KAAOD,EAAaJ,EAAO,QAAQ,CAC/B,MAAMM,EAAIN,EAAO,QAAQ,GAAII,CAAU,EACjCG,EAAUD,IAAM,GAAKN,EAAO,OAASM,EACrCE,EAAIR,EAAO,SAASI,EAAYG,CAAO,EACvCE,EAAON,EAAQ,OAAOK,CAAC,EAAE,KAAI,EACnC,GAAIC,GACuBR,EAAaQ,EAAMJ,CAAC,IACpB,GACnB,MAGJA,IAAM,MAAU,GAChBH,EAAe,cAAeJ,EAAQ,uBAAuBM,EAAYJ,EAAO,MAAM,CAAC,EAAE,EAE7FI,EAAaG,EAAU,CAC/B,CACA","x_google_ignoreList":[0]}