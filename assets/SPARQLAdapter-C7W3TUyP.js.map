{"version":3,"file":"SPARQLAdapter-C7W3TUyP.js","sources":["../../node_modules/string-template/index.js","../../node_modules/@jbrowse/plugin-rdf/esm/SPARQLAdapter/SPARQLAdapter.js"],"sourcesContent":["var nargs = /\\{([0-9a-zA-Z_]+)\\}/g\n\nmodule.exports = template\n\nfunction template(string) {\n    var args\n\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\n        args = arguments[1]\n    } else {\n        args = new Array(arguments.length - 1)\n        for (var i = 1; i < arguments.length; ++i) {\n            args[i - 1] = arguments[i]\n        }\n    }\n\n    if (!args || !args.hasOwnProperty) {\n        args = {}\n    }\n\n    return string.replace(nargs, function replaceArg(match, i, index) {\n        var result\n\n        if (string[index - 1] === \"{\" &&\n            string[index + match.length] === \"}\") {\n            return i\n        } else {\n            result = args.hasOwnProperty(i) ? args[i] : null\n            if (result === null || result === undefined) {\n                return \"\"\n            }\n\n            return result\n        }\n    })\n}\n","import { readConfObject } from '@jbrowse/core/configuration';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport format from 'string-template';\nexport default class SPARQLAdapter extends BaseFeatureDataAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        this.endpoint = readConfObject(config, 'endpoint').uri;\n        this.queryTemplate = readConfObject(config, 'queryTemplate');\n        this.additionalQueryParams = readConfObject(config, 'additionalQueryParams');\n        this.refNamesQueryTemplate = readConfObject(config, 'refNamesQueryTemplate');\n        this.configRefNames = readConfObject(config, 'refNames');\n    }\n    async getRefNames(opts) {\n        if (this.refNames) {\n            return this.refNames;\n        }\n        if (this.refNamesQueryTemplate) {\n            const queryTemplate = encodeURIComponent(this.refNamesQueryTemplate);\n            const results = await this.querySparql(queryTemplate, opts);\n            this.refNames = this.resultsToRefNames(results);\n        }\n        else {\n            this.refNames = this.configRefNames;\n        }\n        return this.refNames;\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const filledTemplate = encodeURIComponent(format(this.queryTemplate, query));\n            const { refName } = query;\n            const results = await this.querySparql(filledTemplate, opts);\n            const features = this.resultsToFeatures(results, refName);\n            for (const feature of features) {\n                observer.next(feature);\n            }\n            observer.complete();\n        }, opts.stopToken);\n    }\n    async querySparql(query, _opts) {\n        let additionalQueryParams = '';\n        if (this.additionalQueryParams.length) {\n            additionalQueryParams = `&${this.additionalQueryParams.join('&')}`;\n        }\n        const url = `${this.endpoint}?query=${query}${additionalQueryParams}`;\n        const response = await fetch(url, {\n            headers: {\n                accept: 'application/json,application/sparql-results+json',\n            },\n        });\n        return response.json();\n    }\n    resultsToRefNames(response) {\n        const rows = response.results.bindings || [];\n        const fields = response.head.vars;\n        if (!fields.includes('refName')) {\n            throw new Error('\"refName\" not found in refNamesQueryTemplate response');\n        }\n        return rows.map(row => row.refName.value);\n    }\n    resultsToFeatures(results, refName) {\n        const rows = results.results.bindings || [];\n        const fields = results.head.vars;\n        const requiredFields = ['start', 'end', 'uniqueId'];\n        for (const requiredField of requiredFields) {\n            if (!fields.includes(requiredField)) {\n                console.error(`Required field ${requiredField} missing from feature data`);\n            }\n        }\n        const seenFeatures = {};\n        for (const row of rows) {\n            const rawData = [{}];\n            for (let field of fields) {\n                if (field in row) {\n                    const { value } = row[field];\n                    let idx = 0;\n                    while (field.startsWith('sub_')) {\n                        field = field.slice(4);\n                        idx += 1;\n                    }\n                    while (idx > rawData.length - 1) {\n                        rawData.push({});\n                    }\n                    rawData[idx][field] = value;\n                }\n            }\n            for (const [idx, rd] of rawData.entries()) {\n                const { uniqueId, start, end, strand } = rd;\n                if (idx < rawData.length - 1) {\n                    rawData[idx + 1].parentUniqueId = uniqueId;\n                }\n                seenFeatures[uniqueId] = {\n                    data: {\n                        ...rd,\n                        uniqueId: uniqueId,\n                        refName,\n                        start: Number.parseInt(start, 10),\n                        end: Number.parseInt(end, 10),\n                        strand: Number.parseInt(strand, 10) || 0,\n                    },\n                };\n            }\n        }\n        for (const [uniqueId, f] of Object.entries(seenFeatures)) {\n            const pid = f.data.parentUniqueId;\n            f.data.parentUniqueId = undefined;\n            if (pid) {\n                const p = seenFeatures[pid];\n                if (p) {\n                    if (!p.data.subfeatures) {\n                        p.data.subfeatures = [];\n                    }\n                    p.data.subfeatures.push({\n                        ...f.data,\n                        uniqueId,\n                    });\n                    delete seenFeatures[uniqueId];\n                }\n                else {\n                    const subfeatures = Object.values(seenFeatures)\n                        .map(sf => sf.data.subfeatures)\n                        .filter(sf => !!sf)\n                        .flat();\n                    let found = false;\n                    for (const subfeature of subfeatures) {\n                        if (subfeature.uniqueId === pid) {\n                            if (!subfeature.subfeatures) {\n                                subfeature.subfeatures = [];\n                            }\n                            subfeature.subfeatures.push({\n                                ...f.data,\n                                uniqueId,\n                            });\n                            delete seenFeatures[uniqueId];\n                            found = true;\n                            break;\n                        }\n                        if (subfeature.subfeatures) {\n                            subfeatures.push(...subfeature.subfeatures);\n                        }\n                    }\n                    if (!found) {\n                        console.error(`Could not find parentID ${pid}`);\n                    }\n                }\n            }\n        }\n        return Object.keys(seenFeatures).map(seenFeature => new SimpleFeature({\n            ...seenFeatures[seenFeature].data,\n            uniqueId: seenFeature,\n            subfeatures: seenFeatures[seenFeature].data.subfeatures,\n        }));\n    }\n    async hasDataForRefName(refName, opts = {}) {\n        const refNames = await this.getRefNames(opts);\n        if (refNames.length && !refNames.includes(refName)) {\n            return false;\n        }\n        return true;\n    }\n}\n"],"names":["nargs","stringTemplate","template","string","args","i","match","index","result","SPARQLAdapter","BaseFeatureDataAdapter","config","getSubAdapter","pluginManager","readConfObject","opts","queryTemplate","results","query","ObservableCreate","observer","filledTemplate","format","refName","features","feature","_opts","additionalQueryParams","url","response","rows","row","fields","requiredFields","requiredField","seenFeatures","rawData","field","value","idx","rd","uniqueId","start","end","strand","f","pid","p","subfeatures","sf","found","subfeature","seenFeature","SimpleFeature","refNames"],"mappings":"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","x_google_ignoreList":[0,1]}