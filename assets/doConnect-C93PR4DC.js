import{cS as I,ah as A,u as y,t as O,y as g}from"./index-B3kPj2Rj.js";class L{constructor(e=[],c){this.data={};const{checkIndent:o=!0,skipValidation:d=!1}=c??{},n=typeof e=="string"?e.trimEnd().split(/\r?\n/):e;let r,t;for(const h of n){if(h==="")throw new Error("Invalid stanza, contained blank lines");if(h.trim().startsWith("#"))continue;if(h.trimEnd().endsWith("\\")){const f=h.trimEnd().slice(0,-1);t?t+=f.trimStart():t=f;continue}let m=h;if(t&&(m=t+m.trimStart(),t=void 0),r??o){const f=/^([ \t]+)/.exec(m);if(r===void 0)f?[,r]=f:r="";else if(r===""&&f!==null||r&&f&&r!==f[1])throw new Error("Inconsistent indentation of stanza")}else r="";const i=m.trim(),l=i.indexOf(" ");if(l===-1){if(!this.nameKey)throw new Error("First line in a stanza must have both a key and a value");if(this.data[i])continue;this.data[i]="";continue}const s=i.slice(0,l),u=i.slice(l+1);if(this.data[s]&&u!==this.data[s])throw new Error(`Got duplicate key with a different value in stanza: "${s}" key has both ${this.data[s]} and ${u}`);this.nameKey||(this.nameKey=s,this.name=i.slice(l+1)),this.data[s]=u}d||this.validate()}validate(){}}class C{constructor(e=[],c){this.data={};const{checkIndent:o=!0,skipValidation:d=!1}=c??{},n=typeof e=="string"?e.trimEnd().split(/(?:[\t ]*\r?\n){2,}/):e;for(const r of n){if(r==="")throw new Error("Invalid stanza, was empty");if(r.startsWith("include")||r.trim().startsWith("#")&&r.trimEnd().split(/\r?\n/).map(m=>m.trim()).every(m=>m.startsWith("#")))continue;const t=new L(r,{checkIndent:o});if(!this.nameKey)this.nameKey=t.nameKey;else if(t.nameKey!==this.nameKey)throw new Error(`The first line in each stanza must have the same key. Saw both ${this.nameKey} and ${t.nameKey}`);if(!t.name)throw new Error(`No stanza name: ${t.name}`);if(this.data[t.name])throw new Error(`Got duplicate stanza name: ${t.name}`);this.data[t.name]=t}d||this.validate()}validate(){}}function T(a,e,c=""){const o=[];for(const d of e)a.data[d]||o.push(d);if(o.length>0)throw new Error(`${c} is missing required entr${o.length===1?"y":"ies"}: ${o.join(", ")}`)}class P extends C{constructor(e,c){super(e,{...c,checkIndent:!1})}validate(){if(this.nameKey!=="track")throw new Error(`trackDb has "${this.nameKey}" instead of "track" as the first line in each track`);for(const[e,c]of Object.entries(this.data)){const o=Object.keys(c.data);T(c,["track","shortLabel"],`Track ${e}`);const d=new Set(["superTrack","compositeTrack","container","view"]);if(!o.some(t=>d.has(t))){if(!o.includes("bigDataUrl"))throw new Error(`Track ${e} is missing required key "bigDataUrl"`);if(!o.includes("type")&&!Object.keys(this.settings(e)).includes("type"))throw new Error(`Neither track ${e} nor any of its parent tracks have the required key "type"`)}let n=e;do n=this.data[n]?.parent,n&&([n]=n.split(" "));while(n);const r=this.data[e];r&&(this.data[e]=r)}}settings(e){if(!this.data[e])throw new Error(`Track ${e} does not exist`);const c=[e];let o=e;do o=this.data[o]?.parent,o&&c.push(o);while(o);const d={};c.reverse();for(const n of c){const r=this.data[n];if(r)for(const[t,h]of Object.entries(r))d[t]=h}return d}}class G extends C{validate(e=["genome","trackDb"]){if(this.nameKey!=="genome")throw new Error('Genomes file must begin with a line like "genome <genome_name>"');for(const[c,o]of Object.entries(this.data))T(o,e,`genome ${c}`)}}class W extends L{validate(){T(this,["hub","shortLabel","longLabel","genomesFile","email"],"Hub file")}}class H{constructor(e){const[c,o,...d]=e.trimEnd().split(/(?:[\t ]*\r?\n){2,}/);this.hubData=new L(c),this.validateHub(),this.genome=new L(o),this.validateGenomeSection(),this.tracks=new P(d.join(`

`),{skipValidation:!1})}validateHub(){if(this.hubData.nameKey!=="hub")throw new Error('Hub file must begin with a line like "hub <hub_name>"');T(this.hubData,["hub","shortLabel","longLabel","email"])}validateGenomeSection(){if(this.genome.nameKey!=="genome")throw new Error('Genomes file must begin with a line like "genome <genome_name>"')}}var R=I();async function V(a){const e=await A.openLocation(a).readFile("utf8");return new G(e)}async function _(a){const e=await A.openLocation(a).readFile("utf8");return new P(e)}function U(a,e){return{uri:new URL(a,new URL(e.uri,e.baseUri)).href,locationType:"UriLocation"}}function F(a,e,c){return U(a||e,c)}function k(a,e){return a?{uri:a,locationType:"LocalPath"}:{uri:e,locationType:"UriLocation"}}function b(a,e){return new URL(a,e).href}function N({trackDb:a,trackDbLoc:e,assemblyName:c,sequenceAdapter:o,baseUrl:d}){const n=new Set(["superTrack","compositeTrack","container","view"]);return Object.entries(a.data).map(([r,t])=>{var h;const{data:m}=t;if(!Object.keys(m).some(i=>n.has(i))){const i=[];let l=r;do l=((h=a.data[l])===null||h===void 0?void 0:h.data.parent)||"",l&&(l=l.split(" ")[0],i.push(a.data[l]));while(l);return i.reverse(),{metadata:{...t.data,...t.data.html?{html:`<a href="${b(t.data.html,d)}">${t.data.html}</a>`}:{}},category:[t.data.group,...i.map(s=>s?.data.group).filter(s=>!!s)].filter(s=>!!s),...M({track:t,trackDbLoc:e,trackDb:a,sequenceAdapter:o})}}}).filter(y.notEmpty).map(r=>({...r,trackId:`ucsc-trackhub-${y.objectHash(r)}`,assemblyNames:[c]}))}function M({track:a,trackDbLoc:e,trackDb:c,sequenceAdapter:o}){var d;const{data:n}=a,r=n.parent||"",t=n.bigDataUrl||"",h=n.bigDataIndex||"",m=n.type||((d=c.data[r])===null||d===void 0?void 0:d.data.type)||"",i=(n.shortLabel||"")+(t.includes("xeno")?" (xeno)":""),l=y.isUriLocation(e);let s=m.split(" ")[0]||"";s==="bam"&&t.toLowerCase().endsWith("cram")&&(s="cram");const u=l?U(t,e):k(t);return s==="bam"?{type:"AlignmentsTrack",name:i,description:n.longLabel,adapter:{type:"BamAdapter",bamLocation:u,index:{location:l?F(h,`${t}.bai`,e):k(h,`${t}.bai`)}}}:s==="cram"?{type:"AlignmentsTrack",name:i,description:n.longLabel,adapter:{type:"CramAdapter",cramLocation:u,craiLocation:l?F(h,`${t}.crai`,e):k(h,`${t}.crai`),sequenceAdapter:o}}:s==="bigWig"?{type:"QuantitativeTrack",name:i,description:n.longLabel,adapter:{type:"BigWigAdapter",bigWigLocation:u}}:s.startsWith("big")?{type:"FeatureTrack",name:i,description:n.longLabel,adapter:{type:"BigBedAdapter",bigBedLocation:u}}:s==="vcfTabix"?{type:"VariantTrack",name:i,description:n.longLabel,adapter:{type:"VcfTabixAdapter",vcfGzLocation:u,index:{location:l?F(h,`${t}.tbi`,e):k(h,`${t}.tbi`)}}}:s==="hic"?{type:"HicTrack",name:i,description:n.longLabel,adapter:{type:"HicAdapter",hicLocation:u}}:O.generateUnknownTrackConf(i,s)}async function J(a){var e;const{pluginManager:c}=y.getEnv(a),o=y.getSession(a),d=[];try{const n=g.getConf(a,"hubTxtLocation"),r=await A.openLocation(n).readFile("utf8"),t=b(n.uri,n.baseUri),{assemblyManager:h}=o;if(r.includes("useOneFile on")){const m=new H(r),{genome:i,tracks:l}=m,s=i.name,u=i.data.description;h.get(s)||o.addSessionAssembly({name:s,displayName:u,sequence:{type:"ReferenceSequenceTrack",metadata:{...i.data,...i.data.htmlPath?{htmlPath:`<a href="${b(i.data.htmlPath,t)}">${i.data.htmlPath}</a>`}:{}},trackId:`${s}-${R.nanoid()}`,adapter:{type:"TwoBitAdapter",twoBitLocation:{uri:b(i.data.twoBitPath,t)},chromSizesLocation:{uri:b(i.data.chromSizes,t)}}},...i.data.chromAliasBb?{refNameAliases:{adapter:{type:"BigBedAdapter",uri:b(i.data.chromAliasBb,t)}}}:{}});const w=h.get(s),v=g.getConf(w,["sequence","adapter"]),$=N({trackDb:l,trackDbLoc:n,assemblyName:s,sequenceAdapter:v,baseUrl:t});a.addTrackConfs($),c.evaluateExtensionPoint("LaunchView-LinearGenomeView",{session:o,assembly:s,tracklist:!0,loc:i.data.defaultPos})}else{const i=new W(r).data.genomesFile;if(!i)throw new Error("genomesFile not found on hub");const l=b(n.uri,n.baseUri),s=l?{uri:b(i,l),locationType:"UriLocation"}:{localPath:i,locationType:"LocalPathLocation"},u=await V(s),f={};for(const[p,E]of Object.entries(u.data)){const K=g.getConf(a,"assemblyNames");if(K.length>0&&!K.includes(p))continue;const S=h.get(p);if(!S){d.push(p);continue}const x=E.data.trackDb;if(!x)throw new Error("genomesFile not found on hub");const B=new URL(i,l),z=l?{uri:new URL(x,B).href,locationType:"UriLocation"}:{localPath:x,locationType:"LocalPathLocation"},D=await _(z),q=g.getConf(S,["sequence","adapter"]),j=N({trackDb:D,trackDbLoc:z,assemblyName:p,sequenceAdapter:q,baseUrl:l});a.addTrackConfs(j),f[p]=j.length}const w=Object.entries(f),v=w.length?`Loaded data from these assemblies: ${w.map(([p,E])=>`${p} (${E} tracks)`).join(", ")}`:"",$=d.length?`Skipped data from these assemblies: ${d.join(", ")}`:"";o.notify([v,$].filter(p=>!!p).join(". "),"success")}}catch(n){console.error(n),o.notifyError(`${g.getConf(a,"name")}: "${n}"`,n),(e=o.breakConnection)===null||e===void 0||e.call(o,a.configuration)}}export{J as doConnect};
//# sourceMappingURL=doConnect-C93PR4DC.js.map
