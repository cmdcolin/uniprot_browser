import{B as f}from"./index-CWy9Wmpn.js";import{ah as l,u as n}from"./index-B3kPj2Rj.js";import{r as u}from"./rxjs-bJg6jVuh.js";class x extends f.BaseFeatureDataAdapter{static capabilities=["getFeatures","getRefNames"];feats;async loadDataP(){return(await l.openLocation(this.getConf("location")).readFile("utf8")).split(`
`).slice(1).map(t=>t.trim()).filter(t=>!!t).map((t,a)=>{const[s,r,i]=t.split(","),c=s[0],o=s.at(-1),p=s.slice(1,-1);return{uniqueId:`feat-${a}`,ref:c,variant:o,start:+p,end:+p+1,score:+r,am_class:i}})}async loadData(e={}){return this.feats=this.feats??this.loadDataP().catch(t=>{throw this.feats=void 0,t}),this.feats}async getGlobalStats(e){const t=await this.loadData(),a=n.min(t.map(r=>r.score)),s=n.max(t.map(r=>r.score));return{scoreMin:a,scoreMax:s}}async getMultiRegionFeatureDensityStats(e){return{featureDensity:0}}async getRefNames(e={}){return[]}getFeatures(e,t={}){return u.ObservableCreate(async a=>{const{start:s,end:r,refName:i}=e,c=await this.loadData();for(const o of c)n.doesIntersect2(o.start,o.end,s,r)&&a.next(new n.SimpleFeature({...o,refName:i,source:o.variant}));a.complete()})}async getSources(){const e=new Set,t=await this.loadData();for(const a of t)e.add(a.variant);return[...e].map(a=>({name:a,__name:a}))}freeResources(){}}export{x as default};
//# sourceMappingURL=AlphaMissensePathogenicityAdapter-BbM0FLxO.js.map
