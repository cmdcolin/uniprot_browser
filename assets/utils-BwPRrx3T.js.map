{"version":3,"file":"utils-BwPRrx3T.js","sources":["../../node_modules/@mui/x-data-grid/esm/utils/utils.js"],"sourcesContent":["export function isNumber(value) {\n  return typeof value === 'number' && !Number.isNaN(value);\n}\nexport function isFunction(value) {\n  return typeof value === 'function';\n}\nexport function isObject(value) {\n  return typeof value === 'object' && value !== null;\n}\nexport function localStorageAvailable() {\n  try {\n    // Incognito mode might reject access to the localStorage for security reasons.\n    // window isn't defined on Node.js\n    // https://stackoverflow.com/questions/16427636/check-if-localstorage-is-available\n    const key = '__some_random_key_you_are_not_going_to_use__';\n    window.localStorage.setItem(key, key);\n    window.localStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nexport function escapeRegExp(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Follows the CSS specification behavior for min and max\n * If min > max, then the min have priority\n */\nexport const clamp = (value, min, max) => Math.max(min, Math.min(max, value));\n\n/**\n * Create an array containing the range [from, to[\n */\nexport function range(from, to) {\n  return Array.from({\n    length: to - from\n  }).map((_, i) => from + i);\n}\n\n// Pseudo random number. See https://stackoverflow.com/a/47593316\nfunction mulberry32(a) {\n  return () => {\n    /* eslint-disable */\n    let t = a += 0x6d2b79f5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    /* eslint-enable */\n  };\n}\n\n/**\n * Create a random number generator from a seed. The seed\n * ensures that the random number generator produces the\n * same sequence of 'random' numbers on every render. It\n * returns a function that generates a random number between\n * a specified min and max.\n */\nexport function createRandomNumberGenerator(seed) {\n  const random = mulberry32(seed);\n  return (min, max) => min + (max - min) * random();\n}\nexport function deepClone(obj) {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(obj);\n  }\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Mark a value as used so eslint doesn't complain. Use this instead\n * of a `eslint-disable-next-line react-hooks/exhaustive-deps` because\n * that hint disables checks on all values instead of just one.\n */\nexport function eslintUseValue(_) {}\nexport const runIf = (condition, fn) => params => {\n  if (condition) {\n    fn(params);\n  }\n};"],"names":["isNumber","value","isFunction","isObject","localStorageAvailable","key","escapeRegExp","clamp","min","max","range","from","to","_","i","mulberry32","a","createRandomNumberGenerator","seed","random","deepClone","obj","runIf","condition","fn","params"],"mappings":"AAAO,SAASA,EAASC,EAAO,CAC9B,OAAO,OAAOA,GAAU,UAAY,CAAC,OAAO,MAAMA,CAAK,CACzD,CACO,SAASC,EAAWD,EAAO,CAChC,OAAO,OAAOA,GAAU,UAC1B,CACO,SAASE,EAASF,EAAO,CAC9B,OAAO,OAAOA,GAAU,UAAYA,IAAU,IAChD,CACO,SAASG,GAAwB,CACtC,GAAI,CAIF,MAAMC,EAAM,+CACZ,cAAO,aAAa,QAAQA,EAAKA,CAAG,EACpC,OAAO,aAAa,WAAWA,CAAG,EAC3B,EACT,MAAc,CACZ,MAAO,EACT,CACF,CACO,SAASC,EAAaL,EAAO,CAClC,OAAOA,EAAM,QAAQ,2BAA4B,MAAM,CACzD,CAMY,MAACM,EAAQ,CAACN,EAAOO,EAAKC,IAAQ,KAAK,IAAID,EAAK,KAAK,IAAIC,EAAKR,CAAK,CAAC,EAKrE,SAASS,EAAMC,EAAMC,EAAI,CAC9B,OAAO,MAAM,KAAK,CAChB,OAAQA,EAAKD,CACjB,CAAG,EAAE,IAAI,CAACE,EAAGC,IAAMH,EAAOG,CAAC,CAC3B,CAGA,SAASC,EAAWC,EAAG,CACrB,MAAO,IAAM,CAEX,IAAI,EAAIA,GAAK,WACb,SAAI,KAAK,KAAK,EAAI,IAAM,GAAI,EAAI,CAAC,EACjC,GAAK,EAAI,KAAK,KAAK,EAAI,IAAM,EAAG,EAAI,EAAE,IAC7B,EAAI,IAAM,MAAQ,GAAK,UAElC,CACF,CASO,SAASC,EAA4BC,EAAM,CAChD,MAAMC,EAASJ,EAAWG,CAAI,EAC9B,MAAO,CAACV,EAAKC,IAAQD,GAAOC,EAAMD,GAAOW,EAAM,CACjD,CACO,SAASC,EAAUC,EAAK,CAC7B,OAAI,OAAO,iBAAoB,WACtB,gBAAgBA,CAAG,EAErB,KAAK,MAAM,KAAK,UAAUA,CAAG,CAAC,CACvC,CAQY,MAACC,EAAQ,CAACC,EAAWC,IAAOC,GAAU,CAC5CF,GACFC,EAAGC,CAAM,CAEb","x_google_ignoreList":[0]}