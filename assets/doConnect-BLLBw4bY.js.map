{"version":3,"file":"doConnect-BLLBw4bY.js","sources":["../../node_modules/@gmod/ucsc-hub/esm/raStanza.js","../../node_modules/@gmod/ucsc-hub/esm/raFile.js","../../node_modules/@gmod/ucsc-hub/esm/util.js","../../node_modules/@gmod/ucsc-hub/esm/trackDbFile.js","../../node_modules/@gmod/ucsc-hub/esm/genomesFile.js","../../node_modules/@gmod/ucsc-hub/esm/hubFile.js","../../node_modules/@gmod/ucsc-hub/esm/singleFileHub.js","../../node_modules/@jbrowse/plugin-data-management/esm/UCSCTrackHubConnection/util.js","../../node_modules/@jbrowse/plugin-data-management/esm/UCSCTrackHubConnection/ucscTrackHub.js","../../node_modules/@jbrowse/plugin-data-management/esm/UCSCTrackHubConnection/doConnect.js"],"sourcesContent":["/**\n * Class representing an ra file stanza. Each stanza line is split into its key\n * and value and stored as a Map, so the usual Map methods can be used on the\n * stanza.\n */\nexport default class RaStanza {\n    constructor(stanza = [], options) {\n        this.data = {};\n        const { checkIndent = true, skipValidation = false } = options ?? {};\n        const stanzaLines = typeof stanza === 'string' ? stanza.trimEnd().split(/\\r?\\n/) : stanza;\n        let currentIndent;\n        let continuedLine;\n        for (const line of stanzaLines) {\n            if (line === '') {\n                throw new Error('Invalid stanza, contained blank lines');\n            }\n            if (line.trim().startsWith('#')) {\n                continue;\n            }\n            if (line.trimEnd().endsWith('\\\\')) {\n                const trimmedLine = line.trimEnd().slice(0, -1);\n                if (continuedLine) {\n                    continuedLine += trimmedLine.trimStart();\n                }\n                else {\n                    continuedLine = trimmedLine;\n                }\n                continue;\n            }\n            let combinedLine = line;\n            if (continuedLine) {\n                combinedLine = continuedLine + combinedLine.trimStart();\n                continuedLine = undefined;\n            }\n            if (currentIndent ?? checkIndent) {\n                const indent = /^([ \\t]+)/.exec(combinedLine);\n                if (currentIndent === undefined) {\n                    if (indent) {\n                        ;\n                        [, currentIndent] = indent;\n                    }\n                    else {\n                        currentIndent = '';\n                    }\n                }\n                else if ((currentIndent === '' && indent !== null) ||\n                    (currentIndent && indent && currentIndent !== indent[1])) {\n                    throw new Error('Inconsistent indentation of stanza');\n                }\n            }\n            else {\n                currentIndent = '';\n            }\n            const trimmedLine = combinedLine.trim();\n            const sep = trimmedLine.indexOf(' ');\n            if (sep === -1) {\n                if (!this.nameKey) {\n                    throw new Error('First line in a stanza must have both a key and a value');\n                }\n                // Adding a key that already exists and has no value is a no-op\n                if (this.data[trimmedLine]) {\n                    continue;\n                }\n                this.data[trimmedLine] = '';\n                continue;\n            }\n            const key = trimmedLine.slice(0, sep);\n            const value = trimmedLine.slice(sep + 1);\n            if (this.data[key] && value !== this.data[key]) {\n                throw new Error('Got duplicate key with a different value in stanza: ' +\n                    `\"${key}\" key has both ${this.data[key]} and ${value}`);\n            }\n            if (!this.nameKey) {\n                this.nameKey = key;\n                this.name = trimmedLine.slice(sep + 1);\n            }\n            this.data[key] = value;\n        }\n        if (!skipValidation) {\n            this.validate();\n        }\n    }\n    validate() { }\n}\n//# sourceMappingURL=raStanza.js.map","import RaStanza from \"./raStanza.js\";\n/**\n * Class representing an ra file. Each file is composed of multiple stanzas, and\n * each stanza is separated by one or more blank lines. Each stanza is stored in\n * a Map with the key being the value of the first key-value pair in the stanza.\n * The usual Map methods can be used on the file. An additional method `add()`\n * is available to take a raw line of text and break it up into a key and value\n * and add them to the class. This should be favored over `set()` when possible,\n * as it performs more validity checks than using `set()`.\n * @property {undefined|string} nameKey - The key of the first line of all the\n * stanzas (`undefined` if the stanza has no lines yet).\n * @throws {Error} Throws if an empty stanza is added, if the key in the first\n * key-value pair of each stanze isn't the same, or if two stanzas have the same\n * value for the key-value pair in their first lines.\n * @param {(string|string[])} [raFile=[]] - An ra file, either as a single\n * string or an array of strings with one stanza per entry. Supports both LF\n * and CRLF line terminators.\n * @param {object} options\n * @param {boolean} options.checkIndent [true] - Check if a the stanzas within\n * the file are indented consistently and keep track of the indentation\n */\nexport default class RaFile {\n    constructor(raFile = [], options) {\n        this.data = {};\n        const { checkIndent = true, skipValidation = false } = options ?? {};\n        const stanzas = typeof raFile === 'string'\n            ? raFile.trimEnd().split(/(?:[\\t ]*\\r?\\n){2,}/)\n            : raFile;\n        for (const stanza of stanzas) {\n            if (stanza === '') {\n                throw new Error('Invalid stanza, was empty');\n            }\n            if (stanza.startsWith('include')) {\n                continue;\n            }\n            if (stanza.trim().startsWith('#')) {\n                const stanzaLines = stanza\n                    .trimEnd()\n                    .split(/\\r?\\n/)\n                    .map(line => line.trim());\n                if (stanzaLines.every(line => line.startsWith('#'))) {\n                    continue;\n                }\n            }\n            const raStanza = new RaStanza(stanza, { checkIndent });\n            if (!this.nameKey) {\n                this.nameKey = raStanza.nameKey;\n            }\n            else if (raStanza.nameKey !== this.nameKey) {\n                throw new Error('The first line in each stanza must have the same key. ' +\n                    `Saw both ${this.nameKey} and ${raStanza.nameKey}`);\n            }\n            if (!raStanza.name) {\n                throw new Error(`No stanza name: ${raStanza.name}`);\n            }\n            if (this.data[raStanza.name]) {\n                throw new Error(`Got duplicate stanza name: ${raStanza.name}`);\n            }\n            this.data[raStanza.name] = raStanza;\n        }\n        if (!skipValidation) {\n            this.validate();\n        }\n    }\n    validate() { }\n}\n//# sourceMappingURL=raFile.js.map","// validate that all required fields are present in the map\nexport function validateRequiredFieldsArePresent(map, requiredFields, description = '') {\n    const missingFields = [];\n    for (const field of requiredFields) {\n        if (!map.data[field]) {\n            missingFields.push(field);\n        }\n    }\n    if (missingFields.length > 0) {\n        throw new Error(`${description} is missing required entr${missingFields.length === 1 ? 'y' : 'ies'}: ${missingFields.join(', ')}`);\n    }\n}\n//# sourceMappingURL=util.js.map","import RaFile from \"./raFile.js\";\nimport { validateRequiredFieldsArePresent } from \"./util.js\";\n/**\n * Class representing a genomes.txt file.\n * @extends RaFile\n * @param {(string|string[])} [trackDbFile=[]] - A trackDb.txt file as a string\n * @throws {Error} Throws if \"track\" is not the first key in each track or if a\n * track is missing required keys\n */\nexport default class TrackDbFile extends RaFile {\n    constructor(trackDbFile, options) {\n        super(trackDbFile, { ...options, checkIndent: false });\n    }\n    validate() {\n        if (this.nameKey !== 'track') {\n            throw new Error(`trackDb has \"${this.nameKey}\" instead of \"track\" as the first line in each track`);\n        }\n        for (const [trackName, track] of Object.entries(this.data)) {\n            const trackKeys = Object.keys(track.data);\n            validateRequiredFieldsArePresent(track, ['track', 'shortLabel'], `Track ${trackName}`);\n            const parentTrackKeys = new Set([\n                'superTrack',\n                'compositeTrack',\n                'container',\n                'view',\n            ]);\n            if (!trackKeys.some(key => parentTrackKeys.has(key))) {\n                if (!trackKeys.includes('bigDataUrl')) {\n                    throw new Error(`Track ${trackName} is missing required key \"bigDataUrl\"`);\n                }\n                if (!trackKeys.includes('type')) {\n                    const settingsKeys = Object.keys(this.settings(trackName));\n                    if (!settingsKeys.includes('type')) {\n                        throw new Error(`Neither track ${trackName} nor any of its parent tracks have the required key \"type\"`);\n                    }\n                }\n            }\n            let currentTrackName = trackName;\n            do {\n                // @ts-expect-error\n                currentTrackName = this.data[currentTrackName]?.parent;\n                if (currentTrackName) {\n                    ;\n                    [currentTrackName] = currentTrackName.split(' ');\n                }\n            } while (currentTrackName);\n            const currentTrack = this.data[trackName];\n            if (currentTrack) {\n                this.data[trackName] = currentTrack;\n            }\n        }\n    }\n    /**\n     * Gets all track entries including those of parent tracks, with closer\n     * entries overriding more distant ones\n     * @param {string} trackName The name of a track\n     * @throws {Error} Throws if track name does not exist in the trackDb\n     */\n    settings(trackName) {\n        if (!this.data[trackName]) {\n            throw new Error(`Track ${trackName} does not exist`);\n        }\n        const parentTracks = [trackName];\n        let currentTrackName = trackName;\n        do {\n            // @ts-expect-error\n            currentTrackName = this.data[currentTrackName]?.parent;\n            if (currentTrackName) {\n                parentTracks.push(currentTrackName);\n            }\n        } while (currentTrackName);\n        const settings = {};\n        parentTracks.reverse();\n        for (const parentTrack of parentTracks) {\n            const ret = this.data[parentTrack];\n            if (ret) {\n                for (const [key, value] of Object.entries(ret)) {\n                    settings[key] = value;\n                }\n            }\n        }\n        return settings;\n    }\n}\n//# sourceMappingURL=trackDbFile.js.map","import RaFile from \"./raFile.js\";\nimport { validateRequiredFieldsArePresent } from \"./util.js\";\n/**\n * Class representing a genomes.txt file.\n * @extends RaFile\n * @param {(string|string[])} [genomesFile=[]] - A genomes.txt file as a string\n * @throws {Error} Throws if the first line of the hub.txt file doesn't start\n * with \"genome <genome_name>\" or if it has invalid entries\n */\nexport default class GenomesFile extends RaFile {\n    validate(requiredFields = ['genome', 'trackDb']) {\n        // TODO: check if genome is hosted by UCSC and if not, require twoBitPath and groups\n        if (this.nameKey !== 'genome') {\n            throw new Error('Genomes file must begin with a line like \"genome <genome_name>\"');\n        }\n        for (const [genomeName, genome] of Object.entries(this.data)) {\n            validateRequiredFieldsArePresent(genome, requiredFields, `genome ${genomeName}`);\n        }\n    }\n}\n//# sourceMappingURL=genomesFile.js.map","import RaStanza from \"./raStanza.js\";\nimport { validateRequiredFieldsArePresent } from \"./util.js\";\n/**\n * Class representing a hub.txt file.\n * @extends RaStanza\n * @param {(string|string[])} [hubFile=[]] - A hub.txt file as a string\n * @throws {Error} Throws if the first line of the hub.txt file doesn't start\n * with \"hub <hub_name>\", if it has invalid entries, or is missing required\n * entries\n */\nexport default class HubFile extends RaStanza {\n    validate() {\n        validateRequiredFieldsArePresent(this, ['hub', 'shortLabel', 'longLabel', 'genomesFile', 'email'], 'Hub file');\n    }\n}\n//# sourceMappingURL=hubFile.js.map","import RaStanza from \"./raStanza.js\";\nimport TrackDbFile from \"./trackDbFile.js\";\nimport { validateRequiredFieldsArePresent } from \"./util.js\";\n/**\n * Class representing a \"single-file\" hub.txt file that contains all the\n * sections of a hub in a single file.\n */\nexport default class SingleFileHub {\n    constructor(hubText) {\n        const [hubSection, genomeSection, ...trackSections] = hubText\n            .trimEnd()\n            .split(/(?:[\\t ]*\\r?\\n){2,}/);\n        this.hubData = new RaStanza(hubSection);\n        this.validateHub();\n        this.genome = new RaStanza(genomeSection);\n        this.validateGenomeSection();\n        this.tracks = new TrackDbFile(trackSections.join('\\n\\n'), {\n            skipValidation: false,\n        });\n    }\n    validateHub() {\n        if (this.hubData.nameKey !== 'hub') {\n            throw new Error('Hub file must begin with a line like \"hub <hub_name>\"');\n        }\n        validateRequiredFieldsArePresent(this.hubData, [\n            'hub',\n            'shortLabel',\n            'longLabel',\n            'email',\n            // 'descriptionUrl', mpxvRivers has a typo\n        ]);\n    }\n    validateGenomeSection() {\n        if (this.genome.nameKey !== 'genome') {\n            throw new Error('Genomes file must begin with a line like \"genome <genome_name>\"');\n        }\n    }\n}\n//# sourceMappingURL=singleFileHub.js.map","import { GenomesFile, TrackDbFile } from '@gmod/ucsc-hub';\nimport { openLocation } from '@jbrowse/core/util/io';\nexport async function fetchGenomesFile(genomesLoc) {\n    const genomesFileText = await openLocation(genomesLoc).readFile('utf8');\n    return new GenomesFile(genomesFileText);\n}\nexport async function fetchTrackDbFile(trackDbLoc) {\n    const text = await openLocation(trackDbLoc).readFile('utf8');\n    return new TrackDbFile(text);\n}\nexport function makeLoc(first, base) {\n    return {\n        uri: new URL(first, new URL(base.uri, base.baseUri)).href,\n        locationType: 'UriLocation',\n    };\n}\nexport function makeLocAlt(first, alt, base) {\n    return first ? makeLoc(first, base) : makeLoc(alt, base);\n}\nexport function makeLoc2(first, alt) {\n    return first\n        ? {\n            uri: first,\n            locationType: 'LocalPath',\n        }\n        : {\n            uri: alt,\n            locationType: 'UriLocation',\n        };\n}\nexport function resolve(uri, baseUri) {\n    return new URL(uri, baseUri).href;\n}\n","import { isUriLocation, notEmpty, objectHash } from '@jbrowse/core/util';\nimport { generateUnknownTrackConf } from '@jbrowse/core/util/tracks';\nimport { makeLoc2, makeLoc, makeLocAlt, resolve } from './util';\nexport function generateTracks({ trackDb, trackDbLoc, assemblyName, sequenceAdapter, baseUrl, }) {\n    const parentTrackKeys = new Set([\n        'superTrack',\n        'compositeTrack',\n        'container',\n        'view',\n    ]);\n    return Object.entries(trackDb.data)\n        .map(([trackName, track]) => {\n        var _a;\n        const { data } = track;\n        if (Object.keys(data).some(key => parentTrackKeys.has(key))) {\n            return undefined;\n        }\n        else {\n            const parentTracks = [];\n            let currentTrackName = trackName;\n            do {\n                currentTrackName = ((_a = trackDb.data[currentTrackName]) === null || _a === void 0 ? void 0 : _a.data.parent) || '';\n                if (currentTrackName) {\n                    currentTrackName = currentTrackName.split(' ')[0];\n                    parentTracks.push(trackDb.data[currentTrackName]);\n                }\n            } while (currentTrackName);\n            parentTracks.reverse();\n            return {\n                metadata: {\n                    ...track.data,\n                    ...(track.data.html\n                        ? {\n                            html: `<a href=\"${resolve(track.data.html, baseUrl)}\">${track.data.html}</a>`,\n                        }\n                        : {}),\n                },\n                category: [\n                    track.data.group,\n                    ...parentTracks\n                        .map(p => p === null || p === void 0 ? void 0 : p.data.group)\n                        .filter((f) => !!f),\n                ].filter(f => !!f),\n                ...makeTrackConfig({\n                    track,\n                    trackDbLoc,\n                    trackDb,\n                    sequenceAdapter,\n                }),\n            };\n        }\n    })\n        .filter(notEmpty)\n        .map(r => ({\n        ...r,\n        trackId: `ucsc-trackhub-${objectHash(r)}`,\n        assemblyNames: [assemblyName],\n    }));\n}\nfunction makeTrackConfig({ track, trackDbLoc, trackDb, sequenceAdapter, }) {\n    var _a;\n    const { data } = track;\n    const parent = data.parent || '';\n    const bigDataUrl = data.bigDataUrl || '';\n    const bigDataIdx = data.bigDataIndex || '';\n    const trackType = data.type || ((_a = trackDb.data[parent]) === null || _a === void 0 ? void 0 : _a.data.type) || '';\n    const name = (data.shortLabel || '') + (bigDataUrl.includes('xeno') ? ' (xeno)' : '');\n    const isUri = isUriLocation(trackDbLoc);\n    let baseTrackType = trackType.split(' ')[0] || '';\n    if (baseTrackType === 'bam' && bigDataUrl.toLowerCase().endsWith('cram')) {\n        baseTrackType = 'cram';\n    }\n    const bigDataLocation = isUri\n        ? makeLoc(bigDataUrl, trackDbLoc)\n        : makeLoc2(bigDataUrl);\n    if (baseTrackType === 'bam') {\n        return {\n            type: 'AlignmentsTrack',\n            name,\n            description: data.longLabel,\n            adapter: {\n                type: 'BamAdapter',\n                bamLocation: bigDataLocation,\n                index: {\n                    location: isUri\n                        ? makeLocAlt(bigDataIdx, `${bigDataUrl}.bai`, trackDbLoc)\n                        : makeLoc2(bigDataIdx, `${bigDataUrl}.bai`),\n                },\n            },\n        };\n    }\n    else if (baseTrackType === 'cram') {\n        return {\n            type: 'AlignmentsTrack',\n            name,\n            description: data.longLabel,\n            adapter: {\n                type: 'CramAdapter',\n                cramLocation: bigDataLocation,\n                craiLocation: isUri\n                    ? makeLocAlt(bigDataIdx, `${bigDataUrl}.crai`, trackDbLoc)\n                    : makeLoc2(bigDataIdx, `${bigDataUrl}.crai`),\n                sequenceAdapter,\n            },\n        };\n    }\n    else if (baseTrackType === 'bigWig') {\n        return {\n            type: 'QuantitativeTrack',\n            name,\n            description: data.longLabel,\n            adapter: {\n                type: 'BigWigAdapter',\n                bigWigLocation: bigDataLocation,\n            },\n        };\n    }\n    else if (baseTrackType.startsWith('big')) {\n        return {\n            type: 'FeatureTrack',\n            name,\n            description: data.longLabel,\n            adapter: {\n                type: 'BigBedAdapter',\n                bigBedLocation: bigDataLocation,\n            },\n        };\n    }\n    else if (baseTrackType === 'vcfTabix') {\n        return {\n            type: 'VariantTrack',\n            name,\n            description: data.longLabel,\n            adapter: {\n                type: 'VcfTabixAdapter',\n                vcfGzLocation: bigDataLocation,\n                index: {\n                    location: isUri\n                        ? makeLocAlt(bigDataIdx, `${bigDataUrl}.tbi`, trackDbLoc)\n                        : makeLoc2(bigDataIdx, `${bigDataUrl}.tbi`),\n                },\n            },\n        };\n    }\n    else if (baseTrackType === 'hic') {\n        return {\n            type: 'HicTrack',\n            name,\n            description: data.longLabel,\n            adapter: {\n                type: 'HicAdapter',\n                hicLocation: bigDataLocation,\n            },\n        };\n    }\n    else {\n        return generateUnknownTrackConf(name, baseTrackType);\n    }\n}\n","import { HubFile, SingleFileHub } from '@gmod/ucsc-hub';\nimport { getConf } from '@jbrowse/core/configuration';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { nanoid } from '@jbrowse/core/util/nanoid';\nimport { generateTracks } from './ucscTrackHub';\nimport { fetchGenomesFile, fetchTrackDbFile, resolve } from './util';\nexport async function doConnect(self) {\n    var _a;\n    const { pluginManager } = getEnv(self);\n    const session = getSession(self);\n    const notLoadedAssemblies = [];\n    try {\n        const hubFileLocation = getConf(self, 'hubTxtLocation');\n        const hubFileText = await openLocation(hubFileLocation).readFile('utf8');\n        const hubUri = resolve(hubFileLocation.uri, hubFileLocation.baseUri);\n        const { assemblyManager } = session;\n        if (hubFileText.includes('useOneFile on')) {\n            const hub = new SingleFileHub(hubFileText);\n            const { genome, tracks } = hub;\n            const genomeName = genome.name;\n            const shortLabel = genome.data.description;\n            const asm = assemblyManager.get(genomeName);\n            if (!asm) {\n                session.addSessionAssembly({\n                    name: genomeName,\n                    displayName: shortLabel,\n                    sequence: {\n                        type: 'ReferenceSequenceTrack',\n                        metadata: {\n                            ...genome.data,\n                            ...(genome.data.htmlPath\n                                ? {\n                                    htmlPath: `<a href=\"${resolve(genome.data.htmlPath, hubUri)}\">${genome.data.htmlPath}</a>`,\n                                }\n                                : {}),\n                        },\n                        trackId: `${genomeName}-${nanoid()}`,\n                        adapter: {\n                            type: 'TwoBitAdapter',\n                            twoBitLocation: {\n                                uri: resolve(genome.data.twoBitPath, hubUri),\n                            },\n                            chromSizesLocation: {\n                                uri: resolve(genome.data.chromSizes, hubUri),\n                            },\n                        },\n                    },\n                    ...(genome.data.chromAliasBb\n                        ? {\n                            refNameAliases: {\n                                adapter: {\n                                    type: 'BigBedAdapter',\n                                    uri: resolve(genome.data.chromAliasBb, hubUri),\n                                },\n                            },\n                        }\n                        : {}),\n                });\n            }\n            const asm2 = assemblyManager.get(genomeName);\n            const sequenceAdapter = getConf(asm2, ['sequence', 'adapter']);\n            const tracksNew = generateTracks({\n                trackDb: tracks,\n                trackDbLoc: hubFileLocation,\n                assemblyName: genomeName,\n                sequenceAdapter,\n                baseUrl: hubUri,\n            });\n            self.addTrackConfs(tracksNew);\n            pluginManager.evaluateExtensionPoint('LaunchView-LinearGenomeView', {\n                session,\n                assembly: genomeName,\n                tracklist: true,\n                loc: genome.data.defaultPos,\n            });\n        }\n        else {\n            const hubFile = new HubFile(hubFileText);\n            const genomeFile = hubFile.data.genomesFile;\n            if (!genomeFile) {\n                throw new Error('genomesFile not found on hub');\n            }\n            const hubUri = resolve(hubFileLocation.uri, hubFileLocation.baseUri);\n            const genomesFileLocation = hubUri\n                ? {\n                    uri: resolve(genomeFile, hubUri),\n                    locationType: 'UriLocation',\n                }\n                : {\n                    localPath: genomeFile,\n                    locationType: 'LocalPathLocation',\n                };\n            const genomesFile = await fetchGenomesFile(genomesFileLocation);\n            const map = {};\n            for (const [genomeName, genome] of Object.entries(genomesFile.data)) {\n                const assemblyNames = getConf(self, 'assemblyNames');\n                if (assemblyNames.length > 0 && !assemblyNames.includes(genomeName)) {\n                    continue;\n                }\n                const asm = assemblyManager.get(genomeName);\n                if (!asm) {\n                    notLoadedAssemblies.push(genomeName);\n                    continue;\n                }\n                const db = genome.data.trackDb;\n                if (!db) {\n                    throw new Error('genomesFile not found on hub');\n                }\n                const base = new URL(genomeFile, hubUri);\n                const loc = hubUri\n                    ? {\n                        uri: new URL(db, base).href,\n                        locationType: 'UriLocation',\n                    }\n                    : {\n                        localPath: db,\n                        locationType: 'LocalPathLocation',\n                    };\n                const trackDb = await fetchTrackDbFile(loc);\n                const sequenceAdapter = getConf(asm, ['sequence', 'adapter']);\n                const tracks = generateTracks({\n                    trackDb,\n                    trackDbLoc: loc,\n                    assemblyName: genomeName,\n                    sequenceAdapter,\n                    baseUrl: hubUri,\n                });\n                self.addTrackConfs(tracks);\n                map[genomeName] = tracks.length;\n            }\n            const loadedAssemblies = Object.entries(map);\n            const str1 = loadedAssemblies.length\n                ? `Loaded data from these assemblies: ${loadedAssemblies\n                    .map(([key, val]) => `${key} (${val} tracks)`)\n                    .join(', ')}`\n                : '';\n            const str2 = notLoadedAssemblies.length\n                ? `Skipped data from these assemblies: ${notLoadedAssemblies.join(', ')}`\n                : '';\n            session.notify([str1, str2].filter(f => !!f).join('. '), 'success');\n        }\n    }\n    catch (e) {\n        console.error(e);\n        session.notifyError(`${getConf(self, 'name')}: \"${e}\"`, e);\n        (_a = session.breakConnection) === null || _a === void 0 ? void 0 : _a.call(session, self.configuration);\n    }\n}\n"],"names":["RaStanza","stanza","options","checkIndent","skipValidation","stanzaLines","currentIndent","continuedLine","line","trimmedLine","combinedLine","indent","sep","key","value","RaFile","raFile","stanzas","raStanza","validateRequiredFieldsArePresent","map","requiredFields","description","missingFields","field","TrackDbFile","trackDbFile","trackName","track","trackKeys","parentTrackKeys","currentTrackName","currentTrack","parentTracks","settings","parentTrack","ret","GenomesFile","genomeName","genome","HubFile","SingleFileHub","hubText","hubSection","genomeSection","trackSections","fetchGenomesFile","genomesLoc","genomesFileText","openLocation","fetchTrackDbFile","trackDbLoc","text","makeLoc","first","base","makeLocAlt","alt","makeLoc2","resolve","uri","baseUri","generateTracks","trackDb","assemblyName","sequenceAdapter","baseUrl","_a","data","p","f","makeTrackConfig","notEmpty","objectHash","parent","bigDataUrl","bigDataIdx","trackType","name","isUri","isUriLocation","baseTrackType","bigDataLocation","generateUnknownTrackConf","doConnect","self","pluginManager","getEnv","session","getSession","notLoadedAssemblies","hubFileLocation","getConf","hubFileText","hubUri","assemblyManager","hub","tracks","shortLabel","nanoid","asm2","tracksNew","genomeFile","genomesFileLocation","genomesFile","assemblyNames","asm","db","loc","loadedAssemblies","str1","val","str2","e"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}