import{B as f}from"./index-CWy9Wmpn.js";import{ah as p,u as r}from"./index-B3kPj2Rj.js";import{r as d}from"./rxjs-bJg6jVuh.js";class x extends f.BaseFeatureDataAdapter{static capabilities=["getFeatures","getRefNames"];feats;async loadDataP(){const t=JSON.parse(await p.openLocation(this.getConf("location")).readFile("utf8"));return t.residueNumber.map((e,a)=>({uniqueId:`feat-${a}`,start:e,end:e+1,score:t.confidenceScore[a]}))}async loadData(t={}){return this.feats=this.feats??this.loadDataP().catch(e=>{throw this.feats=void 0,e}),this.feats}async getRefNames(t={}){return[]}getFeatures(t,e={}){return d.ObservableCreate(async a=>{const{start:o,end:n,refName:i}=t,c=await this.loadData();for(const s of c)r.doesIntersect2(s.start,s.end,o,n)&&a.next(new r.SimpleFeature({...s,refName:i}));a.complete()})}}export{x as default};
//# sourceMappingURL=AlphaFoldConfidenceAdapter-C-QIDhCO.js.map
