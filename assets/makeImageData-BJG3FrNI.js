import{Z as H,u as I,aI as X}from"./index-DPMJgfAS.js";import{d as J,f as a,g as K,a as L}from"./drawPhased-BPe_GwF_.js";import"./util-Cozj6Xfd.js";async function ee({ctx:n,canvasWidth:w,canvasHeight:F,renderArgs:q}){const{renderingMode:G,minorAlleleFrequencyFilter:N,sources:d,features:Q,stopToken:C,lengthCutoffFilter:U}=q,{statusCallback:O=()=>{}}=q,u=F/d.length;H.checkStopToken(C);const g=await I.updateStatus("Calculating stats",O,()=>X({stopToken:C,features:Q.values(),minorAlleleFrequencyFilter:N,lengthCutoffFilter:U}));H.checkStopToken(C);const Z=[],V=g.length,p=w/V;return await I.updateStatus("Drawing variant matrix",O,()=>{const T={};I.forEachWithStopTokenCheck(g,C,({feature:v,mostFrequentAlt:z},B)=>{var b,A,E;const M=[];if((b=v.get("FORMAT"))===null||b===void 0?void 0:b.includes("PS")){const R=v.get("samples"),i=B/g.length*w,m=d.length;for(let t=0;t<m;t++){const c=t/m*F,{name:_,HP:j}=d[t],e=R[_];if(e){const s=(A=e.GT)===null||A===void 0?void 0:A[0];if(s){M.push(s);const o=s.includes("|");if(G==="phased")if(o){const l=(E=e.PS)===null||E===void 0?void 0:E[0],f=s.split("|");J(f,n,i,c,p,u,j,l)}else n.fillStyle="black",n.fillRect(i-a,c-a,p+a,u+a);else{let l=T[s];if(l===void 0){let f=0,k=0,S=0,P=0;const y=s.split(/[/|]/),h=y.length;for(let r=0;r<h;r++){const D=y[r];D===z?f++:D==="0"?P++:D==="."?k++:S++}l=K(P,f,S,k,h,!0),T[s]=l}l&&L(l,n,i,c,p,u)}}}}}else{const R=v.get("genotypes"),i=B/g.length*w,m=d.length;for(let t=0;t<m;t++){const c=t/m*F,{name:_,HP:j}=d[t],e=R[_];if(e){M.push(e);const s=e.includes("|");if(G==="phased")if(s){const o=e.split("|");J(o,n,i,c,p,u,j)}else n.fillStyle="black",n.fillRect(i-a,c-a,p+a,u+a);else{let o=T[e];if(o===void 0){let l=0,f=0,k=0,S=0;const P=e.split(/[/|]/),y=P.length;for(let h=0;h<y;h++){const r=P[h];r===z?l++:r==="0"?S++:r==="."?f++:k++}o=K(S,l,k,f,y,!0),T[e]=o}o&&L(o,n,i,c,p,u)}}}}Z.push(M)})}),{mafs:g,arr:Z}}export{ee as makeImageData};
//# sourceMappingURL=makeImageData-BJG3FrNI.js.map
