{"version":3,"file":"AddConnectionWidget-jXO8FCHo.js","sources":["../../node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConfigureConnection.js","../../node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConnectionTypeSelect.js","../../node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/AddConnectionWidget.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Suspense } from 'react';\nimport { LoadingEllipses } from '@jbrowse/core/ui';\nimport { ConfigurationEditor } from '@jbrowse/plugin-config';\nimport { observer } from 'mobx-react';\nconst ConfigureConnection = observer(function ({ connectionType, model, session, }) {\n    const ConfigEditorComponent = connectionType.configEditorComponent || ConfigurationEditor;\n    return (_jsx(Suspense, { fallback: _jsx(LoadingEllipses, {}), children: _jsx(ConfigEditorComponent, { model: { target: model }, session: session }) }));\n});\nexport default ConfigureConnection;\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport { ExternalLink } from '@jbrowse/core/ui';\nimport { MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst ConnectionTypeSelect = observer(function ConnectionTypeSelect({ connectionTypeChoices, connectionType, setConnectionType, }) {\n    const firstChoice = connectionTypeChoices[0];\n    useEffect(() => {\n        if (!connectionType) {\n            setConnectionType(firstChoice);\n        }\n    }, [connectionType, firstChoice, setConnectionType]);\n    return (_jsx(\"form\", { autoComplete: \"off\", children: connectionType ? (_jsx(TextField, { value: connectionType.name, label: \"connectionType\", helperText: connectionType.description ? (_jsxs(_Fragment, { children: [connectionType.description, connectionType.url ? (_jsx(ExternalLink, { href: connectionType.url })) : null] })) : null, select: true, fullWidth: true, onChange: event => {\n                setConnectionType(connectionTypeChoices.find(c => c.name === event.target.value));\n            }, variant: \"outlined\", children: connectionTypeChoices.map(c => (_jsx(MenuItem, { value: c.name, children: c.displayName || c.name }, c.name))) })) : null }));\n});\nexport default ConnectionTypeSelect;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo, useState } from 'react';\nimport { getEnv, getSession, isSessionModelWithWidgets, } from '@jbrowse/core/util';\nimport { isSessionWithConnections } from '@jbrowse/product-core';\nimport { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport ConfigureConnection from './ConfigureConnection';\nimport ConnectionTypeSelect from './ConnectionTypeSelect';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n}));\nconst steps = ['Select a Connection Type', 'Configure Connection'];\nconst AddConnectionWidget = observer(function ({ model }) {\n    const [connectionType, setConnectionType] = useState();\n    const [connectionId, setConnectionId] = useState();\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    const configModel = useMemo(() => connectionType === null || connectionType === void 0 ? void 0 : connectionType.configSchema.create({ connectionId }, getEnv(model)), [connectionId, connectionType, model]);\n    return (_jsx(\"div\", { className: classes.root, children: _jsx(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\", children: steps.map(label => (_jsxs(Step, { children: [_jsx(StepLabel, { children: label }), _jsxs(StepContent, { children: [activeStep === 0 ? (_jsx(ConnectionTypeSelect, { connectionTypeChoices: pluginManager.getConnectionElements(), connectionType: connectionType, setConnectionType: c => {\n                                    setConnectionType(c);\n                                    if (!c) {\n                                        return;\n                                    }\n                                    setConnectionId(`${c.name}-${Date.now()}`);\n                                } })) : connectionType && configModel ? (_jsx(ConfigureConnection, { connectionType: connectionType, model: configModel, session: session })) : null, _jsxs(\"div\", { className: classes.actionsContainer, children: [_jsx(Button, { disabled: activeStep === 0, onClick: () => {\n                                            setActiveStep(activeStep - 1);\n                                        }, className: classes.button, children: \"Back\" }), _jsx(Button, { disabled: !((activeStep === 0 && connectionType) ||\n                                            (activeStep === 1 && configModel)), variant: \"contained\", color: \"primary\", onClick: () => {\n                                            if (activeStep === steps.length - 1) {\n                                                if (configModel && isSessionWithConnections(session)) {\n                                                    const conf = session.addConnectionConf(configModel);\n                                                    session.makeConnection(conf);\n                                                }\n                                                else {\n                                                    session.notify('No config model to add');\n                                                }\n                                                if (isSessionModelWithWidgets(session)) {\n                                                    session.hideWidget(model);\n                                                }\n                                            }\n                                            else {\n                                                setActiveStep(activeStep + 1);\n                                            }\n                                        }, className: classes.button, \"data-testid\": \"addConnectionNext\", children: activeStep === steps.length - 1 ? 'Connect' : 'Next' })] })] })] }, label))) }) }));\n});\nexport default AddConnectionWidget;\n"],"names":["ConfigureConnection","observer","connectionType","model","session","ConfigEditorComponent","ConfigurationEditor","_jsx","Suspense","LoadingEllipses","ConnectionTypeSelect","connectionTypeChoices","setConnectionType","firstChoice","useEffect","TextField","_jsxs","_Fragment","ExternalLink","event","c","MenuItem","useStyles","makeStyles","theme","steps","AddConnectionWidget","useState","connectionId","setConnectionId","activeStep","setActiveStep","classes","getSession","pluginManager","getEnv","configModel","useMemo","Stepper","label","Step","StepLabel","StepContent","Button","isSessionWithConnections","conf","isSessionModelWithWidgets"],"mappings":"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","x_google_ignoreList":[0,1,2]}