import{$ as B,u as q,aJ as X}from"./index-B3kPj2Rj.js";import{d as H,f as a,g as K,a as L}from"./drawPhased-BkOqWA4s.js";import"./util-Cozj6Xfd.js";async function ee({ctx:n,canvasWidth:w,canvasHeight:F,renderArgs:G}){const{renderingMode:I,minorAlleleFrequencyFilter:N,sources:d,features:Q,stopToken:C,lengthCutoffFilter:U}=G,{statusCallback:J=()=>{}}=G,u=F/d.length;B.checkStopToken(C);const g=await q.updateStatus("Calculating stats",J,()=>X({stopToken:C,features:Q.values(),minorAlleleFrequencyFilter:N,lengthCutoffFilter:U}));B.checkStopToken(C);const O=[],V=g.length,p=w/V;return await q.updateStatus("Drawing variant matrix",J,()=>{const T={};q.forEachWithStopTokenCheck(g,C,({feature:v,mostFrequentAlt:$},z)=>{var b,A,E;const M=[];if((b=v.get("FORMAT"))===null||b===void 0?void 0:b.includes("PS")){const R=v.get("samples"),i=z/g.length*w,m=d.length;for(let t=0;t<m;t++){const c=t/m*F,{name:_,HP:j}=d[t],e=R[_];if(e){const s=(A=e.GT)===null||A===void 0?void 0:A[0];if(s){M.push(s);const o=s.includes("|");if(I==="phased")if(o){const l=(E=e.PS)===null||E===void 0?void 0:E[0],f=s.split("|");H(f,n,i,c,p,u,j,l)}else n.fillStyle="black",n.fillRect(i-a,c-a,p+a,u+a);else{let l=T[s];if(l===void 0){let f=0,k=0,S=0,P=0;const y=s.split(/[/|]/),h=y.length;for(let r=0;r<h;r++){const D=y[r];D===$?f++:D==="0"?P++:D==="."?k++:S++}l=K(P,f,S,k,h,!0),T[s]=l}l&&L(l,n,i,c,p,u)}}}}}else{const R=v.get("genotypes"),i=z/g.length*w,m=d.length;for(let t=0;t<m;t++){const c=t/m*F,{name:_,HP:j}=d[t],e=R[_];if(e){M.push(e);const s=e.includes("|");if(I==="phased")if(s){const o=e.split("|");H(o,n,i,c,p,u,j)}else n.fillStyle="black",n.fillRect(i-a,c-a,p+a,u+a);else{let o=T[e];if(o===void 0){let l=0,f=0,k=0,S=0;const P=e.split(/[/|]/),y=P.length;for(let h=0;h<y;h++){const r=P[h];r===$?l++:r==="0"?S++:r==="."?f++:k++}o=K(S,l,k,f,y,!0),T[e]=o}o&&L(o,n,i,c,p,u)}}}}O.push(M)})}),{mafs:g,arr:O}}export{ee as makeImageData};
//# sourceMappingURL=makeImageData-BVv_g3qQ.js.map
