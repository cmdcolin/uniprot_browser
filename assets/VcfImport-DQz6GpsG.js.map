{"version":3,"file":"VcfImport-DQz6GpsG.js","sources":["../../node_modules/@jbrowse/plugin-spreadsheet-view/esm/SpreadsheetView/importAdapters/VcfImport.js"],"sourcesContent":["import VCF from '@gmod/vcf';\nimport { VcfFeature } from '@jbrowse/plugin-variants';\nimport { isNumber } from './isNumber';\nimport { bufferToLines } from './util';\nexport function parseVcfBuffer(buffer) {\n    const lines = bufferToLines(buffer);\n    const header = lines.filter(l => l.startsWith('#')).join('\\n');\n    const body = lines.filter(l => !l.startsWith('#'));\n    const vcfParser = new VCF({ header });\n    const keys = new Set();\n    const rows = [];\n    let i = 0;\n    for (const line of body) {\n        const [CHROM, POS, ID, REF, ALT, QUAL, FILTER, INFO, FORMAT, ...rest] = line.split('\\t');\n        const ret = Object.fromEntries((INFO === null || INFO === void 0 ? void 0 : INFO.split(';').map(f => f.trim()).map(e => {\n            const [key, val = 'true'] = e.split('=');\n            const k = `INFO.${key.trim()}`;\n            keys.add(k);\n            const v = val.trim();\n            return [k, isNumber(v) ? +v : v];\n        })) || []);\n        rows.push({\n            cellData: {\n                CHROM,\n                POS: +POS,\n                ID,\n                REF,\n                ALT,\n                QUAL: isNumber(QUAL) ? +QUAL : QUAL,\n                FILTER,\n                FORMAT,\n                ...ret,\n                ...Object.fromEntries(vcfParser.samples.map((s, idx) => [s, rest[idx]])),\n            },\n            feature: new VcfFeature({\n                parser: vcfParser,\n                variant: vcfParser.parseLine(line),\n                id: `vcf-${i}`,\n            }).toJSON(),\n        });\n        i++;\n    }\n    return {\n        columns: [\n            'CHROM',\n            'POS',\n            'ID',\n            'REF',\n            'ALT',\n            'QUAL',\n            'FILTER',\n            ...keys,\n            'FORMAT',\n            ...vcfParser.samples,\n        ].map(c => ({ name: c })),\n        rowSet: {\n            rows,\n        },\n    };\n}\n"],"names":["parseVcfBuffer","buffer","lines","bufferToLines","header","l","body","vcfParser","VCF","keys","rows","i","line","CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT","rest","ret","f","e","key","val","k","v","isNumber","s","idx","VcfFeature","c"],"mappings":"6JAIO,SAASA,EAAeC,EAAQ,CACnC,MAAMC,EAAQC,EAAcF,CAAM,EAC5BG,EAASF,EAAM,OAAOG,GAAKA,EAAE,WAAW,GAAG,CAAC,EAAE,KAAK;AAAA,CAAI,EACvDC,EAAOJ,EAAM,OAAOG,GAAK,CAACA,EAAE,WAAW,GAAG,CAAC,EAC3CE,EAAY,IAAIC,EAAI,CAAE,OAAAJ,CAAM,CAAE,EAC9BK,EAAO,IAAI,IACXC,EAAO,CAAA,EACb,IAAIC,EAAI,EACR,UAAWC,KAAQN,EAAM,CACrB,KAAM,CAACO,EAAOC,EAAKC,EAAIC,EAAKC,EAAKC,EAAMC,EAAQC,EAAMC,EAAQ,GAAGC,CAAI,EAAIV,EAAK,MAAM,GAAI,EACjFW,EAAM,OAAO,YAAyDH,GAAK,MAAM,GAAG,EAAE,IAAII,GAAKA,EAAE,KAAI,CAAE,EAAE,IAAIC,GAAK,CACpH,KAAM,CAACC,EAAKC,EAAM,MAAM,EAAIF,EAAE,MAAM,GAAG,EACjCG,EAAI,QAAQF,EAAI,KAAI,CAAE,GAC5BjB,EAAK,IAAImB,CAAC,EACV,MAAMC,EAAIF,EAAI,KAAI,EAClB,MAAO,CAACC,EAAGE,EAASD,CAAC,EAAI,CAACA,EAAIA,CAAC,CACnC,CAAC,GAAM,CAAA,CAAE,EACTnB,EAAK,KAAK,CACN,SAAU,CACN,MAAAG,EACA,IAAK,CAACC,EACN,GAAAC,EACA,IAAAC,EACA,IAAAC,EACA,KAAMa,EAASZ,CAAI,EAAI,CAACA,EAAOA,EAC/B,OAAAC,EACA,OAAAE,EACA,GAAGE,EACH,GAAG,OAAO,YAAYhB,EAAU,QAAQ,IAAI,CAACwB,EAAGC,IAAQ,CAACD,EAAGT,EAAKU,CAAG,CAAC,CAAC,CAAC,CACvF,EACY,QAAS,IAAIC,EAAW,CACpB,OAAQ1B,EACR,QAASA,EAAU,UAAUK,CAAI,EACjC,GAAI,OAAOD,CAAC,EAC5B,CAAa,EAAE,OAAM,CACrB,CAAS,EACDA,GACJ,CACA,MAAO,CACH,QAAS,CACL,QACA,MACA,KACA,MACA,MACA,OACA,SACA,GAAGF,EACH,SACA,GAAGF,EAAU,OACzB,EAAU,IAAI2B,IAAM,CAAE,KAAMA,CAAC,EAAG,EACxB,OAAQ,CACJ,KAAAxB,CACZ,CACA,CACA","x_google_ignoreList":[0]}