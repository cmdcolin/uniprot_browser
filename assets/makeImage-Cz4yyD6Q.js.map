{"version":3,"file":"makeImage-Cz4yyD6Q.js","sources":["../../node_modules/@jbrowse/plugin-alignments/esm/SNPCoverageRenderer/makeImage.js"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration';\nimport { createJBrowseTheme } from '@jbrowse/core/ui';\nimport { bpSpanPx, featureSpanPx, forEachWithStopTokenCheck, } from '@jbrowse/core/util';\nimport { YSCALEBAR_LABEL_OFFSET, getOrigin, getScale, } from '@jbrowse/plugin-wiggle';\nimport { alphaColor } from '../shared/util';\nconst INTERBASE_INDICATOR_WIDTH = 7;\nconst INTERBASE_INDICATOR_HEIGHT = 4.5;\nconst MINIMUM_INTERBASE_INDICATOR_READ_DEPTH = 7;\nconst complementBase = {\n    C: 'G',\n    G: 'C',\n    A: 'T',\n    T: 'A',\n};\nconst fudgeFactor = 0.6;\nexport async function makeImage(ctx, props) {\n    var _a;\n    const { features, regions, bpPerPx, colorBy, displayCrossHatches, visibleModifications = {}, scaleOpts, height: unadjustedHeight, theme: configTheme, config: cfg, ticks, stopToken, } = props;\n    const theme = createJBrowseTheme(configTheme);\n    const region = regions[0];\n    const width = (region.end - region.start) / bpPerPx;\n    const offset = YSCALEBAR_LABEL_OFFSET;\n    const height = unadjustedHeight - offset * 2;\n    const opts = { ...scaleOpts, range: [0, height] };\n    const viewScale = getScale(opts);\n    const indicatorViewScale = getScale({\n        ...opts,\n        range: [0, height / 2],\n        scaleType: 'linear',\n    });\n    const originY = getOrigin(scaleOpts.scaleType);\n    const originLinear = getOrigin('linear');\n    const indicatorThreshold = readConfObject(cfg, 'indicatorThreshold');\n    const showInterbaseCounts = readConfObject(cfg, 'showInterbaseCounts');\n    const showArcs = readConfObject(cfg, 'showArcs');\n    const showInterbaseIndicators = readConfObject(cfg, 'showInterbaseIndicators');\n    const toY = (n) => height - (viewScale(n) || 0) + offset;\n    const toHeight = (n) => toY(originY) - toY(n);\n    const toY2 = (n) => height - (indicatorViewScale(n) || 0) + offset;\n    const toHeight2 = (n) => toY2(originLinear) - toY2(n);\n    const { bases, softclip, hardclip, insertion } = theme.palette;\n    const colorMap = {\n        A: bases.A.main,\n        C: bases.C.main,\n        G: bases.G.main,\n        T: bases.T.main,\n        insertion,\n        softclip,\n        hardclip,\n        total: readConfObject(cfg, 'color'),\n        mod_NONE: 'blue',\n        cpg_meth: 'red',\n        cpg_unmeth: 'blue',\n    };\n    ctx.fillStyle = colorMap.total;\n    forEachWithStopTokenCheck(features.values(), stopToken, feature => {\n        if (feature.get('type') === 'skip') {\n            return;\n        }\n        const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx);\n        const w = rightPx - leftPx + fudgeFactor;\n        const score = feature.get('score');\n        ctx.fillRect(leftPx, toY(score), w, toHeight(score));\n    });\n    let prevTotal = 0;\n    const extraHorizontallyFlippedOffset = region.reversed ? 1 / bpPerPx : 0;\n    const drawingModifications = colorBy.type === 'modifications';\n    const drawingMethylation = colorBy.type === 'methylation';\n    const isolatedModification = (_a = colorBy.modifications) === null || _a === void 0 ? void 0 : _a.isolatedModification;\n    forEachWithStopTokenCheck(features.values(), stopToken, feature => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (feature.get('type') === 'skip') {\n            return;\n        }\n        const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx);\n        const snpinfo = feature.get('snpinfo');\n        const w = Math.max(rightPx - leftPx, 1);\n        const score0 = feature.get('score');\n        if (drawingModifications) {\n            let curr = 0;\n            const refbase = (_a = snpinfo.refbase) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n            const { nonmods, mods, snps, ref } = snpinfo;\n            for (const m of Object.keys(nonmods).sort().reverse()) {\n                const mod = visibleModifications[m.replace('nonmod_', '')] ||\n                    visibleModifications[m.replace('mod_', '')];\n                if (!mod) {\n                    console.warn(`${m} not known yet`);\n                    continue;\n                }\n                if (isolatedModification && mod.type !== isolatedModification) {\n                    continue;\n                }\n                const cmp = complementBase[mod.base];\n                const detectable = mod.base === 'N'\n                    ? score0\n                    : (((_b = snps[mod.base]) === null || _b === void 0 ? void 0 : _b.entryDepth) || 0) +\n                        (((_c = snps[cmp]) === null || _c === void 0 ? void 0 : _c.entryDepth) || 0) +\n                        (refbase === mod.base ? ref['1'] : 0) +\n                        (refbase === cmp ? ref['-1'] : 0);\n                const modifiable = mod.base === 'N'\n                    ? score0\n                    : (((_d = snps[mod.base]) === null || _d === void 0 ? void 0 : _d.entryDepth) || 0) +\n                        (((_e = snps[cmp]) === null || _e === void 0 ? void 0 : _e.entryDepth) || 0) +\n                        (refbase === mod.base ? ref.entryDepth : 0) +\n                        (refbase === cmp ? ref.entryDepth : 0);\n                const { entryDepth, avgProbability = 0 } = snpinfo.nonmods[m];\n                const modFraction = (modifiable / score0) * (entryDepth / detectable);\n                const nonModColor = 'blue';\n                const c = alphaColor(nonModColor, avgProbability);\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = c;\n                ctx.fillRect(Math.round(leftPx), bottom - (curr + modFraction * height), w, modFraction * height);\n                curr += modFraction * height;\n            }\n            for (const m of Object.keys(mods).sort().reverse()) {\n                const mod = visibleModifications[m.replace('mod_', '')];\n                if (!mod) {\n                    console.warn(`${m} not known yet`);\n                    continue;\n                }\n                if (isolatedModification && mod.type !== isolatedModification) {\n                    continue;\n                }\n                const cmp = complementBase[mod.base];\n                const detectable = mod.base === 'N'\n                    ? score0\n                    : (((_f = snps[mod.base]) === null || _f === void 0 ? void 0 : _f.entryDepth) || 0) +\n                        (((_g = snps[cmp]) === null || _g === void 0 ? void 0 : _g.entryDepth) || 0) +\n                        (refbase === mod.base ? ref['1'] : 0) +\n                        (refbase === cmp ? ref['-1'] : 0);\n                const modifiable = mod.base === 'N'\n                    ? score0\n                    : (((_h = snps[mod.base]) === null || _h === void 0 ? void 0 : _h.entryDepth) || 0) +\n                        (((_j = snps[cmp]) === null || _j === void 0 ? void 0 : _j.entryDepth) || 0) +\n                        (refbase === mod.base ? ref.entryDepth : 0) +\n                        (refbase === cmp ? ref.entryDepth : 0);\n                const { entryDepth, avgProbability = 0 } = mods[m];\n                const modFraction = (modifiable / score0) * (entryDepth / detectable);\n                const baseColor = mod.color || 'black';\n                const c = alphaColor(baseColor, avgProbability);\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = c;\n                ctx.fillRect(Math.round(leftPx), bottom - (curr + modFraction * height), w, modFraction * height);\n                curr += modFraction * height;\n            }\n        }\n        else if (drawingMethylation) {\n            const { depth, nonmods, mods } = snpinfo;\n            let curr = 0;\n            for (const base of Object.keys(mods).sort().reverse()) {\n                const { entryDepth } = mods[base];\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = colorMap[base] || 'black';\n                ctx.fillRect(Math.round(leftPx), bottom - ((entryDepth + curr) / depth) * height, w, (entryDepth / depth) * height);\n                curr += entryDepth;\n            }\n            for (const base of Object.keys(nonmods).sort().reverse()) {\n                const { entryDepth } = nonmods[base];\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = colorMap[base] || 'black';\n                ctx.fillRect(Math.round(leftPx), bottom - ((entryDepth + curr) / depth) * height, w, (entryDepth / depth) * height);\n                curr += entryDepth;\n            }\n        }\n        else {\n            const { depth, snps } = snpinfo;\n            let curr = 0;\n            for (const base of Object.keys(snps).sort().reverse()) {\n                const { entryDepth } = snps[base];\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = colorMap[base] || 'black';\n                ctx.fillRect(Math.round(leftPx), bottom - ((entryDepth + curr) / depth) * height, w, (entryDepth / depth) * height);\n                curr += entryDepth;\n            }\n        }\n        const interbaseEvents = Object.keys(snpinfo.noncov);\n        if (showInterbaseCounts) {\n            let curr = 0;\n            for (const base of interbaseEvents) {\n                const { entryDepth } = snpinfo.noncov[base];\n                const r = 0.6;\n                ctx.fillStyle = colorMap[base];\n                ctx.fillRect(leftPx - r + extraHorizontallyFlippedOffset, INTERBASE_INDICATOR_HEIGHT + toHeight2(curr), r * 2, toHeight2(entryDepth));\n                curr += entryDepth;\n            }\n        }\n        if (showInterbaseIndicators) {\n            let accum = 0;\n            let max = 0;\n            let maxBase = '';\n            for (const base of interbaseEvents) {\n                const { entryDepth } = snpinfo.noncov[base];\n                accum += entryDepth;\n                if (entryDepth > max) {\n                    max = entryDepth;\n                    maxBase = base;\n                }\n            }\n            const indicatorComparatorScore = Math.max(score0, prevTotal);\n            if (accum > indicatorComparatorScore * indicatorThreshold &&\n                indicatorComparatorScore > MINIMUM_INTERBASE_INDICATOR_READ_DEPTH) {\n                ctx.fillStyle = colorMap[maxBase];\n                ctx.beginPath();\n                const l = leftPx + extraHorizontallyFlippedOffset;\n                ctx.moveTo(l - INTERBASE_INDICATOR_WIDTH / 2, 0);\n                ctx.lineTo(l + INTERBASE_INDICATOR_WIDTH / 2, 0);\n                ctx.lineTo(l, INTERBASE_INDICATOR_HEIGHT);\n                ctx.fill();\n            }\n        }\n        prevTotal = score0;\n    });\n    if (showArcs) {\n        forEachWithStopTokenCheck(features.values(), stopToken, feature => {\n            if (feature.get('type') !== 'skip') {\n                return;\n            }\n            const s = feature.get('start');\n            const e = feature.get('end');\n            const [left, right] = bpSpanPx(s, e, region, bpPerPx);\n            ctx.beginPath();\n            const effectiveStrand = feature.get('effectiveStrand');\n            const pos = 'rgba(255,200,200,0.7)';\n            const neg = 'rgba(200,200,255,0.7)';\n            const neutral = 'rgba(200,200,200,0.7)';\n            if (effectiveStrand === 1) {\n                ctx.strokeStyle = pos;\n            }\n            else if (effectiveStrand === -1) {\n                ctx.strokeStyle = neg;\n            }\n            else {\n                ctx.strokeStyle = neutral;\n            }\n            ctx.lineWidth = Math.log(feature.get('score') + 1);\n            ctx.moveTo(left, height - offset * 2);\n            ctx.bezierCurveTo(left, 0, right, 0, right, height - offset * 2);\n            ctx.stroke();\n        });\n    }\n    if (displayCrossHatches) {\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(140,140,140,0.8)';\n        for (const tick of ticks.values) {\n            ctx.beginPath();\n            ctx.moveTo(0, Math.round(toY(tick)));\n            ctx.lineTo(width, Math.round(toY(tick)));\n            ctx.stroke();\n        }\n    }\n}\n"],"names":["INTERBASE_INDICATOR_WIDTH","INTERBASE_INDICATOR_HEIGHT","MINIMUM_INTERBASE_INDICATOR_READ_DEPTH","complementBase","fudgeFactor","makeImage","ctx","props","_a","features","regions","bpPerPx","colorBy","displayCrossHatches","visibleModifications","scaleOpts","unadjustedHeight","configTheme","cfg","ticks","stopToken","theme","createJBrowseTheme","region","width","offset","YSCALEBAR_LABEL_OFFSET","height","opts","viewScale","getScale","indicatorViewScale","originY","getOrigin","originLinear","indicatorThreshold","readConfObject","showInterbaseCounts","showArcs","showInterbaseIndicators","toY","n","toHeight","toY2","toHeight2","bases","softclip","hardclip","insertion","colorMap","forEachWithStopTokenCheck","feature","leftPx","rightPx","featureSpanPx","w","score","prevTotal","extraHorizontallyFlippedOffset","drawingModifications","drawingMethylation","isolatedModification","_b","_c","_d","_e","_f","_g","_h","_j","snpinfo","score0","curr","refbase","nonmods","mods","snps","ref","m","mod","cmp","detectable","modifiable","entryDepth","avgProbability","modFraction","c","alphaColor","bottom","baseColor","depth","base","interbaseEvents","r","accum","max","maxBase","indicatorComparatorScore","l","s","e","left","right","bpSpanPx","effectiveStrand","pos","neg","neutral","tick"],"mappings":"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","x_google_ignoreList":[0]}