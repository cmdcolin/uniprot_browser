{"version":3,"file":"makeImageData-BHBJR4kO.js","sources":["../../node_modules/@jbrowse/plugin-variants/esm/MultiLinearVariantRenderer/makeImageData.js"],"sourcesContent":["import { featureSpanPx, forEachWithStopTokenCheck, updateStatus, } from '@jbrowse/core/util';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport RBush from 'rbush';\nimport { f2 } from '../shared/constants';\nimport { drawColorAlleleCount, getColorAlleleCount, } from '../shared/drawAlleleCount';\nimport { drawPhased } from '../shared/drawPhased';\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../shared/minorAlleleFrequencyUtils';\nexport async function makeImageData(ctx, props) {\n    const { scrollTop, minorAlleleFrequencyFilter, sources, rowHeight, features, regions, bpPerPx, renderingMode, stopToken, lengthCutoffFilter, referenceDrawingMode, } = props;\n    const region = regions[0];\n    const { statusCallback = () => { } } = props;\n    checkStopToken(stopToken);\n    const mafs = await updateStatus('Calculating stats', statusCallback, () => getFeaturesThatPassMinorAlleleFrequencyFilter({\n        stopToken,\n        features: features.values(),\n        minorAlleleFrequencyFilter,\n        lengthCutoffFilter,\n    }));\n    checkStopToken(stopToken);\n    const rbush = new RBush();\n    await updateStatus('Drawing variants', statusCallback, () => {\n        forEachWithStopTokenCheck(mafs, stopToken, ({ mostFrequentAlt, feature }) => {\n            const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx);\n            const flen = feature.get('end') - feature.get('start');\n            const w = Math.max(Math.round(rightPx - leftPx), 2);\n            const samp = feature.get('genotypes');\n            let y = -scrollTop;\n            const s = sources.length;\n            if (renderingMode === 'phased') {\n                for (let j = 0; j < s; j++) {\n                    const { name, HP } = sources[j];\n                    const genotype = samp[name];\n                    const x = Math.floor(leftPx);\n                    const h = Math.max(rowHeight, 1);\n                    if (genotype) {\n                        const isPhased = genotype.includes('|');\n                        if (isPhased) {\n                            const alleles = genotype.split('|');\n                            if (drawPhased(alleles, ctx, x, y, w, h, HP, undefined, referenceDrawingMode === 'draw')) {\n                                rbush.insert({\n                                    minX: x,\n                                    maxX: x + w,\n                                    minY: y,\n                                    maxY: y + h,\n                                    genotype,\n                                    name,\n                                    featureId: feature.id(),\n                                });\n                            }\n                        }\n                        else {\n                            ctx.fillStyle = 'black';\n                            ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                        }\n                    }\n                    y += rowHeight;\n                }\n            }\n            else {\n                const colorCache = {};\n                for (let j = 0; j < s; j++) {\n                    const { name } = sources[j];\n                    const genotype = samp[name];\n                    const x = Math.floor(leftPx);\n                    const h = Math.max(rowHeight, 1);\n                    if (genotype) {\n                        let c = colorCache[genotype];\n                        if (c === undefined) {\n                            let alt = 0;\n                            let uncalled = 0;\n                            let alt2 = 0;\n                            let ref = 0;\n                            const alleles = genotype.split(/[/|]/);\n                            const total = alleles.length;\n                            for (let i = 0; i < total; i++) {\n                                const allele = alleles[i];\n                                if (allele === mostFrequentAlt) {\n                                    alt++;\n                                }\n                                else if (allele === '0') {\n                                    ref++;\n                                }\n                                else if (allele === '.') {\n                                    uncalled++;\n                                }\n                                else {\n                                    alt2++;\n                                }\n                            }\n                            c = getColorAlleleCount(ref, alt, alt2, uncalled, total, referenceDrawingMode === 'draw');\n                            colorCache[genotype] = c;\n                        }\n                        if (c) {\n                            drawColorAlleleCount(c, ctx, x, y, w, h, feature.get('type'), feature.get('strand'), flen > 5 ? 0.75 : 1);\n                            rbush.insert({\n                                minX: x,\n                                maxX: x + w,\n                                minY: y,\n                                maxY: y + h,\n                                genotype,\n                                name,\n                                featureId: feature.id(),\n                            });\n                        }\n                    }\n                    y += rowHeight;\n                }\n            }\n        });\n    });\n    return {\n        rbush: rbush.toJSON(),\n        featureGenotypeMap: Object.fromEntries(mafs.map(({ feature }) => [\n            feature.id(),\n            {\n                alt: feature.get('ALT'),\n                ref: feature.get('REF'),\n                name: feature.get('name'),\n                description: feature.get('description'),\n                length: feature.get('end') - feature.get('start'),\n            },\n        ])),\n    };\n}\n"],"names":["makeImageData","ctx","props","scrollTop","minorAlleleFrequencyFilter","sources","rowHeight","features","regions","bpPerPx","renderingMode","stopToken","lengthCutoffFilter","referenceDrawingMode","region","statusCallback","checkStopToken","mafs","updateStatus","getFeaturesThatPassMinorAlleleFrequencyFilter","rbush","RBush","forEachWithStopTokenCheck","mostFrequentAlt","feature","leftPx","rightPx","featureSpanPx","flen","w","samp","y","s","j","name","HP","genotype","x","h","alleles","drawPhased","f2","colorCache","c","alt","uncalled","alt2","ref","total","i","allele","getColorAlleleCount","drawColorAlleleCount"],"mappings":"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","x_google_ignoreList":[0]}