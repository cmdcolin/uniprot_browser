{"version":3,"file":"makeImageData-BJG3FrNI.js","sources":["../../node_modules/@jbrowse/plugin-variants/esm/MultiLinearVariantMatrixRenderer/makeImageData.js"],"sourcesContent":["import { forEachWithStopTokenCheck, updateStatus } from '@jbrowse/core/util';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { f2 } from '../shared/constants';\nimport { drawColorAlleleCount, getColorAlleleCount, } from '../shared/drawAlleleCount';\nimport { drawPhased } from '../shared/drawPhased';\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../shared/minorAlleleFrequencyUtils';\nexport async function makeImageData({ ctx, canvasWidth, canvasHeight, renderArgs, }) {\n    const { renderingMode, minorAlleleFrequencyFilter, sources, features, stopToken, lengthCutoffFilter, } = renderArgs;\n    const { statusCallback = () => { } } = renderArgs;\n    const h = canvasHeight / sources.length;\n    checkStopToken(stopToken);\n    const mafs = await updateStatus('Calculating stats', statusCallback, () => getFeaturesThatPassMinorAlleleFrequencyFilter({\n        stopToken,\n        features: features.values(),\n        minorAlleleFrequencyFilter,\n        lengthCutoffFilter,\n    }));\n    checkStopToken(stopToken);\n    const arr = [];\n    const m = mafs.length;\n    const w = canvasWidth / m;\n    await updateStatus('Drawing variant matrix', statusCallback, () => {\n        const colorCache = {};\n        forEachWithStopTokenCheck(mafs, stopToken, ({ feature, mostFrequentAlt }, idx) => {\n            var _a, _b, _c;\n            const arr2 = [];\n            const hasPhaseSet = (_a = feature.get('FORMAT')) === null || _a === void 0 ? void 0 : _a.includes('PS');\n            if (hasPhaseSet) {\n                const samp = feature.get('samples');\n                const x = (idx / mafs.length) * canvasWidth;\n                const sln = sources.length;\n                for (let j = 0; j < sln; j++) {\n                    const y = (j / sln) * canvasHeight;\n                    const { name, HP } = sources[j];\n                    const s = samp[name];\n                    if (s) {\n                        const genotype = (_b = s.GT) === null || _b === void 0 ? void 0 : _b[0];\n                        if (genotype) {\n                            arr2.push(genotype);\n                            const isPhased = genotype.includes('|');\n                            if (renderingMode === 'phased') {\n                                if (isPhased) {\n                                    const PS = (_c = s.PS) === null || _c === void 0 ? void 0 : _c[0];\n                                    const alleles = genotype.split('|');\n                                    drawPhased(alleles, ctx, x, y, w, h, HP, PS);\n                                }\n                                else {\n                                    ctx.fillStyle = 'black';\n                                    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                                }\n                            }\n                            else {\n                                let c = colorCache[genotype];\n                                if (c === undefined) {\n                                    let alt = 0;\n                                    let uncalled = 0;\n                                    let alt2 = 0;\n                                    let ref = 0;\n                                    const alleles = genotype.split(/[/|]/);\n                                    const total = alleles.length;\n                                    for (let i = 0; i < total; i++) {\n                                        const allele = alleles[i];\n                                        if (allele === mostFrequentAlt) {\n                                            alt++;\n                                        }\n                                        else if (allele === '0') {\n                                            ref++;\n                                        }\n                                        else if (allele === '.') {\n                                            uncalled++;\n                                        }\n                                        else {\n                                            alt2++;\n                                        }\n                                    }\n                                    c = getColorAlleleCount(ref, alt, alt2, uncalled, total, true);\n                                    colorCache[genotype] = c;\n                                }\n                                if (c) {\n                                    drawColorAlleleCount(c, ctx, x, y, w, h);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const samp = feature.get('genotypes');\n                const x = (idx / mafs.length) * canvasWidth;\n                const sln = sources.length;\n                for (let j = 0; j < sln; j++) {\n                    const y = (j / sln) * canvasHeight;\n                    const { name, HP } = sources[j];\n                    const genotype = samp[name];\n                    if (genotype) {\n                        arr2.push(genotype);\n                        const isPhased = genotype.includes('|');\n                        if (renderingMode === 'phased') {\n                            if (isPhased) {\n                                const alleles = genotype.split('|');\n                                drawPhased(alleles, ctx, x, y, w, h, HP);\n                            }\n                            else {\n                                ctx.fillStyle = 'black';\n                                ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                            }\n                        }\n                        else {\n                            let c = colorCache[genotype];\n                            if (c === undefined) {\n                                let alt = 0;\n                                let uncalled = 0;\n                                let alt2 = 0;\n                                let ref = 0;\n                                const alleles = genotype.split(/[/|]/);\n                                const total = alleles.length;\n                                for (let i = 0; i < total; i++) {\n                                    const allele = alleles[i];\n                                    if (allele === mostFrequentAlt) {\n                                        alt++;\n                                    }\n                                    else if (allele === '0') {\n                                        ref++;\n                                    }\n                                    else if (allele === '.') {\n                                        uncalled++;\n                                    }\n                                    else {\n                                        alt2++;\n                                    }\n                                }\n                                c = getColorAlleleCount(ref, alt, alt2, uncalled, total, true);\n                                colorCache[genotype] = c;\n                            }\n                            if (c) {\n                                drawColorAlleleCount(c, ctx, x, y, w, h);\n                            }\n                        }\n                    }\n                }\n            }\n            arr.push(arr2);\n        });\n    });\n    return {\n        mafs,\n        arr,\n    };\n}\n"],"names":["makeImageData","ctx","canvasWidth","canvasHeight","renderArgs","renderingMode","minorAlleleFrequencyFilter","sources","features","stopToken","lengthCutoffFilter","statusCallback","h","checkStopToken","mafs","updateStatus","getFeaturesThatPassMinorAlleleFrequencyFilter","arr","m","w","colorCache","forEachWithStopTokenCheck","feature","mostFrequentAlt","idx","_a","_b","_c","arr2","samp","x","sln","j","y","name","HP","s","genotype","isPhased","PS","alleles","drawPhased","f2","c","alt","uncalled","alt2","ref","total","i","allele","getColorAlleleCount","drawColorAlleleCount"],"mappings":"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","x_google_ignoreList":[0]}